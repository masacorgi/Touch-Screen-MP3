   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"serial.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	__NVIC_SystemReset:
  26              	.LFB120:
  27              		.file 1 "/project/stm32f4x_iolib/include/cmsis/core_cm4.h"
   1:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**************************************************************************//**
   2:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * @file     core_cm4.h
   3:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * @version  V5.0.8
   5:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * @date     04. June 2018
   6:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  ******************************************************************************/
   7:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*
   8:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *
  10:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *
  12:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * not use this file except in compliance with the License.
  14:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * You may obtain a copy of the License at
  15:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *
  16:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *
  18:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  * limitations under the License.
  23:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
  24:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  25:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined (__clang__)
  28:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
  30:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  31:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  34:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #include <stdint.h>
  35:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  36:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef __cplusplus
  37:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  extern "C" {
  38:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
  39:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  40:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
  41:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  44:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  47:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  50:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
  53:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  54:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  55:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*******************************************************************************
  56:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *                 CMSIS definitions
  57:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  ******************************************************************************/
  58:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
  59:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup Cortex_M4
  60:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
  61:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
  62:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  63:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #include "cmsis_version.h"
  64:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  65:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* CMSIS CM4 definitions */
  66:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  71:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  73:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
  76:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #if defined ( __CC_ARM )
  77:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
  80:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
  81:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
  83:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
  84:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
  85:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
  86:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
  87:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
  88:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
  92:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
  93:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
  95:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
  96:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
  97:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
  98:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
  99:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 100:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined ( __GNUC__ )
 101:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 104:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
 105:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 107:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
 108:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
 109:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 110:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 111:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 112:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined __ARMVFP__
 114:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 116:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
 117:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 119:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
 120:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
 121:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 122:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 123:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 124:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 128:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
 129:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 131:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
 132:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
 133:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 134:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 135:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 136:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined ( __TASKING__ )
 137:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if defined __FPU_VFP__
 138:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 140:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
 141:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 143:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
 144:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
 145:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 146:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 147:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 148:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #elif defined ( __CSMC__ )
 149:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 152:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #else
 153:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 155:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #endif
 156:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #else
 157:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 158:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 159:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 160:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
 161:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 162:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 164:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 165:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef __cplusplus
 166:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
 167:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
 168:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 169:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 171:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 173:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 176:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef __cplusplus
 177:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  extern "C" {
 178:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
 179:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 180:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* check device defines and use defaults */
 181:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef __CM4_REV
 183:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 186:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 187:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 191:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 192:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 196:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 197:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 201:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 202:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
 206:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
 207:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 208:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 210:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 212:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
 216:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef __cplusplus
 217:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #else
 219:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
 221:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 224:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* following defines should be used for structure members */
 225:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 229:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 231:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 232:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 233:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*******************************************************************************
 234:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *                 Register Abstraction
 235:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   Core Register contain:
 236:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core Register
 237:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core NVIC Register
 238:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core SCB Register
 239:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core SysTick Register
 240:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core Debug Register
 241:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core MPU Register
 242:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core FPU Register
 243:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  ******************************************************************************/
 244:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 245:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
 248:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 249:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 250:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief      Core Register type definitions.
 253:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 254:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 255:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 256:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 257:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 259:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef union
 260:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 261:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   struct
 262:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
 263:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } APSR_Type;
 274:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 275:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* APSR Register Definitions */
 276:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 279:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 282:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 285:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 288:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 291:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 294:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 295:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 296:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 298:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef union
 299:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 300:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   struct
 301:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
 302:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } IPSR_Type;
 307:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 308:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* IPSR Register Definitions */
 309:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 312:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 313:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 314:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 316:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef union
 317:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 318:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   struct
 319:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
 320:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } xPSR_Type;
 335:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 336:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* xPSR Register Definitions */
 337:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 340:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 343:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 346:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 349:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 352:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 355:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 358:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 361:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 364:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 367:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 368:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 369:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 371:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef union
 372:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 373:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   struct
 374:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
 375:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } CONTROL_Type;
 382:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 383:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* CONTROL Register Definitions */
 384:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 387:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 390:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 393:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 395:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 396:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 397:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 401:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 402:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 403:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 404:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 406:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 407:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 408:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }  NVIC_Type;
 422:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 423:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 427:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 429:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 430:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 431:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 435:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 436:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 437:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 438:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 440:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 441:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 442:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } SCB_Type;
 464:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 465:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 469:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 472:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 475:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 478:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 481:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 485:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 488:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 491:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 494:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 497:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 500:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 503:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 506:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 509:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 512:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 516:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 520:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 523:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 526:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 529:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 532:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 535:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 538:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB System Control Register Definitions */
 539:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 542:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 545:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 548:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 552:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 555:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 558:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 561:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 564:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 567:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 571:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 574:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 577:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 580:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 583:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 586:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 589:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 592:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 595:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 598:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 601:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 604:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 607:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 610:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 614:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 617:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 620:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 624:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 627:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 630:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 633:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 636:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 639:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 643:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 646:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 649:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 652:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 655:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 658:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 661:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 665:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 668:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 671:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 674:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 677:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 680:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 684:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 687:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 690:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 694:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 697:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 700:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 703:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 706:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 708:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 709:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 710:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 714:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 715:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 716:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 717:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 719:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 720:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 721:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } SCnSCB_Type;
 725:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 726:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 730:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 734:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 737:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 740:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 743:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 746:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 748:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 749:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 750:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 754:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 755:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 756:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 757:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 759:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 760:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 761:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } SysTick_Type;
 766:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 767:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 771:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 774:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 777:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 780:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 784:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SysTick Current Register Definitions */
 785:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 788:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 792:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 795:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 798:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 800:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 801:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 802:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 806:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 807:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 808:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 809:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 811:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 812:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 813:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __OM  union
 814:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
 815:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } ITM_Type;
 846:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 847:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 850:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 851:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 855:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 858:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 861:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 864:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 867:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 870:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 873:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 876:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 879:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 883:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 887:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 891:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 895:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 898:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 901:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 903:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 904:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 905:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
 909:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 910:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 911:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
 912:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
 914:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
 915:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
 916:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } DWT_Type;
 940:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 941:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Control Register Definitions */
 942:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 945:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 948:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 951:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 954:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 957:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 960:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 963:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 966:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 969:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 972:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 975:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 978:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 981:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 984:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 987:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 990:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 993:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
 996:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1000:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1004:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1008:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1012:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1016:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1020:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1024:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1027:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1030:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1033:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1036:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1039:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1042:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1045:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1048:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1050:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1051:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1052:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1056:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1057:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1058:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1059:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1061:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
1062:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1063:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1075:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } TPI_Type;
1088:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1089:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1093:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1097:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1101:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1104:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1107:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1110:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1114:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1117:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1121:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1125:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1128:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1131:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1134:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1137:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1140:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1143:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1145:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1146:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1147:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1148:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1149:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1150:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1151:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1152:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1153:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1154:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1155:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1156:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1157:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1158:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1159:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1160:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1161:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1162:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1163:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1164:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1165:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1166:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1167:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1168:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1169:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1170:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1171:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1172:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1173:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1174:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1175:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1176:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1177:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1178:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1179:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1180:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1181:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1182:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1183:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI DEVID Register Definitions */
1184:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1185:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1186:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1187:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1188:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1189:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1190:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1191:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1192:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1193:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1194:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1195:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1196:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1197:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1198:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1199:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1200:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1201:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1202:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1203:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1204:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1205:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1206:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1207:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1208:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1209:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1210:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1211:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1212:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1213:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1214:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1215:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1216:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1217:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1218:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1219:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1220:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1221:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1222:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1223:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
1224:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1225:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1226:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1227:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1228:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1229:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1230:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1231:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1232:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1233:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1234:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1235:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1236:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } MPU_Type;
1237:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1238:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1239:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1240:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MPU Type Register Definitions */
1241:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1242:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1243:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1244:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1245:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1246:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1247:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1248:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1249:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1250:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MPU Control Register Definitions */
1251:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1252:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1253:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1254:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1255:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1256:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1257:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1258:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1259:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1260:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MPU Region Number Register Definitions */
1261:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1262:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1263:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1264:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1265:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1266:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1267:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1268:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1269:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1270:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1271:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1272:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1273:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1274:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1275:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1276:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1277:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1278:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1279:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1280:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1281:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1282:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1283:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1284:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1285:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1286:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1287:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1288:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1289:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1290:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1291:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1292:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1293:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1294:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1295:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1296:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1297:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1298:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1299:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1300:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1301:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1302:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1303:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1304:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1305:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_MPU */
1306:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1307:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1308:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1309:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1310:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1311:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1312:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1313:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1314:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1315:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1316:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1317:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1318:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1319:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
1320:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1321:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
1322:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1323:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1324:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1325:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1326:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1327:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } FPU_Type;
1328:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1329:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1330:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1331:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1332:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1333:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1334:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1335:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1336:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1337:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1338:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1339:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1340:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1341:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1342:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1343:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1344:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1345:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1346:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1347:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1348:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1349:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1350:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1351:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1352:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1353:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1354:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1355:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1356:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1357:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1358:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1359:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1360:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1361:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1362:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1363:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1364:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1365:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1366:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1367:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1368:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1369:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1370:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1371:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1372:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1373:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1374:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1375:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1376:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1377:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1378:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1379:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1380:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1381:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1382:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1383:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1384:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1385:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1386:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1387:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1388:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1389:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1390:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1391:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1392:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1393:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1394:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1395:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1396:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1397:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1398:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1399:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1400:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1401:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1402:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1403:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1404:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1405:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1406:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1407:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1408:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1409:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1410:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1411:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1412:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_FPU */
1413:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1414:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1415:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1416:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1417:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1418:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1419:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1420:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1421:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1422:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1423:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1424:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1425:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** typedef struct
1426:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1427:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1428:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1429:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1430:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1431:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** } CoreDebug_Type;
1432:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1433:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1434:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1435:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1436:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1437:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1438:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1439:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1440:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1441:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1442:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1443:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1444:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1445:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1446:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1447:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1448:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1449:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1450:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1451:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1452:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1453:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1454:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1455:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1456:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1457:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1458:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1459:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1460:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1461:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1462:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1463:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1464:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1465:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1466:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1467:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1468:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1469:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1470:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1471:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1472:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1473:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1474:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1475:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1476:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1477:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1478:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1479:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1480:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1481:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1482:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1483:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1484:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1485:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1486:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1487:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1488:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1489:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1490:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1491:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1492:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1493:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1494:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1495:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1496:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1497:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1498:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1499:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1500:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1501:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1502:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1503:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1504:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1505:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1506:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1507:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1508:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1509:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1510:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1511:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1512:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1513:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1514:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1515:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1516:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1517:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1518:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1519:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1520:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1521:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
1522:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1523:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1524:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1525:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1526:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1527:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1528:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1529:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1531:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return           Masked and shifted value.
1532:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
1533:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1534:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1535:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1536:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1537:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param[in] field  Name of the register bit field.
1538:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1539:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return           Masked and shifted bit field value.
1540:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
1541:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1542:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1543:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1544:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1545:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1546:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1547:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
1548:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1549:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1550:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1551:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1552:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1553:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* Memory mapping of Core Hardware */
1554:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1555:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1556:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1557:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1558:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1559:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1560:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1561:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1562:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1563:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1564:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1565:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1566:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1567:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1568:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1569:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1570:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1571:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1572:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1573:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1574:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1575:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif
1576:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1577:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1578:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1579:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1580:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*@} */
1581:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1582:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1583:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1584:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /*******************************************************************************
1585:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  *                Hardware Abstraction Layer
1586:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   Core Function Interface contains:
1587:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core NVIC Functions
1588:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core SysTick Functions
1589:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core Debug Functions
1590:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   - Core Register Access Functions
1591:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  ******************************************************************************/
1592:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1593:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1594:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** */
1595:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1596:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1597:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1598:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1599:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1600:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1601:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1602:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1603:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   @{
1604:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1605:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1606:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1607:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1608:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1609:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
1610:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1611:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #else
1612:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1613:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1614:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1615:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1616:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1617:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1618:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1619:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1620:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1621:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1622:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1623:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1624:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1625:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1626:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1627:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1628:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1629:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #endif
1630:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1631:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #else
1632:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1633:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1634:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1635:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1636:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1637:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1638:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1639:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1640:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1641:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1642:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1643:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1644:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1645:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1646:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1647:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1648:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1649:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Set Priority Grouping
1650:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1651:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1652:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            Only values from 0..7 are used.
1653:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1654:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1655:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1656:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1657:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1658:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1659:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t reg_value;
1660:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1661:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1662:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1663:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1664:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   reg_value  =  (reg_value                                   |
1665:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1666:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1667:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   SCB->AIRCR =  reg_value;
1668:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1669:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1670:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1671:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1672:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Priority Grouping
1673:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1674:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1675:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1676:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1677:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1678:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1679:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1680:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1681:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1682:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1683:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Enable Interrupt
1684:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1685:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1686:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1687:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1688:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1689:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1690:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1691:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1692:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1693:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1694:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1695:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1696:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1697:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1698:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Interrupt Enable status
1699:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1700:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1701:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             0  Interrupt is not enabled.
1702:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             1  Interrupt is enabled.
1703:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1704:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1705:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1706:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1707:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1708:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1709:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1710:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1711:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   else
1712:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1713:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return(0U);
1714:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1715:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1716:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1717:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1718:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1719:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Disable Interrupt
1720:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1721:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1722:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1723:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1724:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1725:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1726:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1727:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1728:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1729:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __DSB();
1730:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __ISB();
1731:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1732:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1733:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1734:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1735:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1736:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Pending Interrupt
1737:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1738:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1739:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             0  Interrupt status is not pending.
1740:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             1  Interrupt status is pending.
1741:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1742:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1743:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1744:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1745:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1746:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1747:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1748:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1749:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   else
1750:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1751:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return(0U);
1752:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1753:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1754:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1755:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1756:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1757:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Set Pending Interrupt
1758:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1759:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1760:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1761:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1762:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1763:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1764:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1765:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1766:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1767:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1768:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1769:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1770:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1771:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1772:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Clear Pending Interrupt
1773:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1774:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1775:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1776:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1777:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1778:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1779:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1780:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1781:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1782:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1783:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1784:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1785:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1786:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1787:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Active Interrupt
1788:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1789:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1790:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             0  Interrupt status is not active.
1791:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             1  Interrupt status is active.
1792:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    IRQn must not be negative.
1793:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1794:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1795:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1796:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1797:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1798:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1799:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1800:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   else
1801:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1802:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return(0U);
1803:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1804:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1805:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1806:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1807:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1808:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Set Interrupt Priority
1809:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1810:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1811:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            or negative to specify a processor exception.
1812:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1813:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]  priority  Priority to set.
1814:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1815:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1816:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1817:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1818:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1819:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1820:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1821:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1822:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   else
1823:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1824:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1825:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1826:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1827:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1828:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1829:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1830:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Interrupt Priority
1831:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1832:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1833:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            or negative to specify a processor exception.
1834:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1835:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return             Interrupt Priority.
1836:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1837:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1838:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1839:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1840:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1841:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1842:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1843:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1844:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1845:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   else
1846:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1847:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1848:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   }
1849:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1850:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1851:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1852:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1853:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Encode Priority
1854:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1855:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            preemptive priority value, and subpriority value.
1856:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1857:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1858:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1859:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1860:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1861:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1862:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1863:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1864:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1865:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1866:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t PreemptPriorityBits;
1867:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t SubPriorityBits;
1868:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1869:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1870:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1871:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1872:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   return (
1873:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1874:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1875:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****          );
1876:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1877:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1878:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1879:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1880:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Decode Priority
1881:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1882:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            preemptive priority value and subpriority value.
1883:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1884:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1885:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1886:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1887:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1888:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1889:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1890:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1891:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1892:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1893:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t PreemptPriorityBits;
1894:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t SubPriorityBits;
1895:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1896:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1897:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1898:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1899:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1900:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1901:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1902:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1903:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1904:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1905:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Set Interrupt Vector
1906:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1907:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1908:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            or negative to specify a processor exception.
1909:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            VTOR must been relocated to SRAM before.
1910:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1911:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
1912:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1913:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1914:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1915:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1916:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1917:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1918:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1919:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1920:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1921:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   Get Interrupt Vector
1922:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1923:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1924:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****            or negative to specify a processor exception.
1925:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1926:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \return                 Address of interrupt handler function
1927:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1928:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1929:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
1930:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1931:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1932:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** }
1933:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1934:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1935:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** /**
1936:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \brief   System Reset
1937:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1938:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****  */
1939:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1940:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** {
  28              		.loc 1 1940 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1941:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
  34              		.loc 1 1941 3 view .LVU1
  35              	.LBB6:
  36              	.LBI6:
  37              		.file 2 "/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h"
   1:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**************************************************************************//**
   2:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * @version  V5.0.4
   5:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * @date     09. April 2018
   6:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  ******************************************************************************/
   7:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /*
   8:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  *
  10:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  *
  12:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  *
  16:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  *
  18:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * limitations under the License.
  23:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
  24:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
  25:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
  28:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
  34:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef __has_builtin
  36:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  38:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
  39:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __ASM
  41:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  43:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __INLINE
  44:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __INLINE                               inline
  45:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  46:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  49:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif                                           
  52:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  55:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __USED
  56:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  58:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __WEAK
  59:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  61:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __PACKED
  62:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  64:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  67:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  70:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  78:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  86:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
  94:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 102:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 110:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 113:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 116:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 117:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 118:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   @{
 122:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 123:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 124:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 125:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 129:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 131:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 133:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 134:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 135:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 136:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 140:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 142:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 144:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 145:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 146:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 147:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Control Register
 148:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Control Register value
 150:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 151:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 153:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 154:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 155:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 157:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 158:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 159:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 160:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 162:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 166:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 168:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 169:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 170:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 172:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 173:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 174:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 175:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 176:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 177:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Control Register
 178:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 181:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 183:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 185:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 186:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 187:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 189:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 193:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 195:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 197:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 198:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 199:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 200:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 201:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               IPSR Register value
 204:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 205:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 207:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 208:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 209:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 211:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 212:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 213:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 214:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 215:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get APSR Register
 216:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               APSR Register value
 218:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 219:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 221:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 222:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 223:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 225:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 226:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 227:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 228:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 229:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               xPSR Register value
 232:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 233:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 235:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 236:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 237:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 239:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 240:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 241:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 242:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 243:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 246:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 247:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 249:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 250:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 251:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 253:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 254:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 255:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 256:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 258:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 261:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 262:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 264:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 265:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 266:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 268:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 269:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 270:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 271:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 272:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 273:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 277:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 279:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 281:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 282:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 283:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 285:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 289:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 291:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 293:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 294:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 295:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 296:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 297:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 300:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 301:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 303:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 304:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 305:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 307:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 308:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 309:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 310:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 312:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 315:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 316:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 318:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 319:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 320:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 322:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 323:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 324:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 325:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 326:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 327:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 331:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 333:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 335:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 336:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 337:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 339:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 343:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 345:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 347:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 348:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 349:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 350:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 352:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               SP Register value
 355:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 356:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 358:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 359:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 360:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 362:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 363:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 364:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 365:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 366:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 370:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 372:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 374:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 375:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 376:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 377:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 378:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 381:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 382:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 384:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 385:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 386:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 388:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 389:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 390:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 391:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 393:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 396:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 397:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 399:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 400:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 401:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 403:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 404:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 405:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 406:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 407:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 408:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 412:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 414:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 416:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 417:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 418:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 420:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 424:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 426:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 428:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 429:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 430:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 431:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 435:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Enable FIQ
 436:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 439:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 441:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 443:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 444:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 445:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 446:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Disable FIQ
 447:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 450:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 452:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 454:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 455:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 456:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 457:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority
 458:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 460:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 461:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 463:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 464:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 465:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 467:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 468:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 469:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 470:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 472:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 475:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 476:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 478:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 479:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 480:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 482:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 483:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 484:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 485:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 486:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 487:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority
 488:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 491:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 493:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 495:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 496:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 497:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 499:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 503:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 505:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 507:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 508:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 509:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 510:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 511:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 516:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 518:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 520:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 521:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 522:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 523:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 526:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 527:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 529:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 530:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 531:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 533:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 534:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 535:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 536:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 538:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 541:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 542:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 544:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 545:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 546:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 548:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 549:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 550:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 551:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 552:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 553:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 557:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 559:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 561:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 562:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 563:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 565:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 569:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 571:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 573:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 574:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 575:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 579:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 580:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 583:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 584:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   mode.
 588:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   
 589:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 592:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 594:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return 0U;
 598:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 599:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 600:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return result;
 602:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 603:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 604:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 605:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 607:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 611:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 614:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 616:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return 0U;
 619:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 620:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 621:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return result;
 623:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 624:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 625:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 626:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 627:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 628:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 629:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   mode.
 633:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   
 634:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 637:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 639:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 644:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 646:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 647:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 648:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 649:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 651:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 655:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 658:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 660:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 664:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 666:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 667:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 668:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 669:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 670:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 671:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   mode.
 675:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 676:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 679:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 681:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return 0U;
 685:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 686:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 687:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return result;
 689:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 690:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 691:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 692:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 693:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 695:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 699:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 702:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 704:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return 0U;
 707:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 708:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 709:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return result;
 711:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 712:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 713:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 714:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 715:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 716:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 717:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   mode.
 721:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 722:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 725:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 727:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 732:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 734:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 735:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 736:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 737:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 739:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 743:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 746:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 748:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 752:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 754:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 755:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 756:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 757:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 760:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 761:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 762:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Get FPSCR
 763:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 766:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 768:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 776:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   uint32_t result;
 777:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 778:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(result);
 780:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 781:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 782:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   return(0U);
 783:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 784:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 785:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 786:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 787:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 788:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Set FPSCR
 789:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 792:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 794:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 802:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 804:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 805:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   (void)fpscr;
 806:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 807:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 808:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 809:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 810:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 812:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 813:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   Access to dedicated instructions
 816:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   @{
 817:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** */
 818:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 819:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #else
 827:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #endif
 831:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 832:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 833:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   No Operation
 834:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 836:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 838:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 839:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 842:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 844:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 845:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 846:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Wait For Event
 847:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 850:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 852:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 853:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 854:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Send Event
 855:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 857:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 859:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 860:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 861:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            after the instruction has been completed.
 865:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 866:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 868:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** }
 870:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 871:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** 
 872:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** /**
 873:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****  */
 877:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  38              		.loc 2 877 27 view .LVU2
  39              	.LBB7:
 878:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
 879:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  40              		.loc 2 879 3 view .LVU3
  41              		.syntax unified
  42              	@ 879 "/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h" 1
  43 0000 BFF34F8F 		dsb 0xF
  44              	@ 0 "" 2
  45              		.thumb
  46              		.syntax unified
  47              	.LBE7:
  48              	.LBE6:
1942:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                                                                        buffered write are completed
1943:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
  49              		.loc 1 1943 3 view .LVU4
1944:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  50              		.loc 1 1944 32 is_stmt 0 view .LVU5
  51 0004 0549     		ldr	r1, .L3
1943:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  52              		.loc 1 1943 17 view .LVU6
  53 0006 064B     		ldr	r3, .L3+4
  54              		.loc 1 1944 32 view .LVU7
  55 0008 CA68     		ldr	r2, [r1, #12]
  56              		.loc 1 1944 40 view .LVU8
  57 000a 02F4E062 		and	r2, r2, #1792
1943:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  58              		.loc 1 1943 17 view .LVU9
  59 000e 1343     		orrs	r3, r3, r2
1943:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  60              		.loc 1 1943 15 view .LVU10
  61 0010 CB60     		str	r3, [r1, #12]
1945:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1946:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
  62              		.loc 1 1946 3 is_stmt 1 view .LVU11
  63              	.LBB8:
  64              	.LBI8:
 877:/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h **** {
  65              		.loc 2 877 27 view .LVU12
  66              	.LBB9:
  67              		.loc 2 879 3 view .LVU13
  68              		.syntax unified
  69              	@ 879 "/project/stm32f4x_iolib/include/cmsis/cmsis_gcc.h" 1
  70 0012 BFF34F8F 		dsb 0xF
  71              	@ 0 "" 2
  72              		.thumb
  73              		.syntax unified
  74              	.L2:
  75              	.LBE9:
  76              	.LBE8:
1947:/project/stm32f4x_iolib/include/cmsis/core_cm4.h **** 
1948:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   for(;;)                                                           /* wait until reset */
  77              		.loc 1 1948 3 discriminator 1 view .LVU14
1949:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
1950:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****     __NOP();
  78              		.loc 1 1950 5 discriminator 1 view .LVU15
  79              		.syntax unified
  80              	@ 1950 "/project/stm32f4x_iolib/include/cmsis/core_cm4.h" 1
  81 0016 00BF     		nop
  82              	@ 0 "" 2
1948:/project/stm32f4x_iolib/include/cmsis/core_cm4.h ****   {
  83              		.loc 1 1948 8 discriminator 1 view .LVU16
  84              		.thumb
  85              		.syntax unified
  86 0018 FDE7     		b	.L2
  87              	.L4:
  88 001a 00BF     		.align	2
  89              	.L3:
  90 001c 00ED00E0 		.word	-536810240
  91 0020 0400FA05 		.word	100270084
  92              		.cfi_endproc
  93              	.LFE120:
  95              		.section	.text.flash_read,"ax",%progbits
  96              		.align	1
  97              		.global	flash_read
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	flash_read:
 103              	.LFB133:
 104              		.file 3 "serial.c"
   1:serial.c      **** /********************************************************************************/
   2:serial.c      **** /* serial.c                                                                     */
   3:serial.c      **** /* STM32F407ZGT6                                                                */
   4:serial.c      **** /* (Lee ChangWoo HL2IRW  hl2irw@daum.net 010-8573-6860)                 	*/
   5:serial.c      **** /* stm32f4x_test								*/
   6:serial.c      **** /********************************************************************************/
   7:serial.c      **** #include <stdint.h>
   8:serial.c      **** #include <stdio.h>
   9:serial.c      **** #include <stdarg.h>
  10:serial.c      **** #include <stdlib.h>
  11:serial.c      **** #include <string.h>
  12:serial.c      **** #include "hwdefs.h"
  13:serial.c      **** 
  14:serial.c      **** #define SOH				0x01
  15:serial.c      **** #define STX				0x02
  16:serial.c      **** #define ETX				0x03
  17:serial.c      **** #define EOT				0x04
  18:serial.c      **** #define ENQ				0x05
  19:serial.c      **** #define ACK				0x06
  20:serial.c      **** #define NAK				0x15
  21:serial.c      **** 
  22:serial.c      **** volatile unsigned short rxcnt1,txcnt1,maxtx1,rxcnt2,txcnt2,maxtx2,rxcnt3,txcnt3,maxtx3;
  23:serial.c      **** volatile unsigned char rxck1,rxck2,rxck3,rx_led,tx_led,this_id,tx1_busy,tx2_busy,tx3_busy;
  24:serial.c      **** volatile unsigned int flash_address;
  25:serial.c      **** volatile unsigned int flash_para[64];
  26:serial.c      **** 
  27:serial.c      **** 
  28:serial.c      **** char rxbuff1[256],txbuff1[256],rxbuff2[256],txbuff2[256],rxbuff3[256],txbuff3[256];
  29:serial.c      **** unsigned char USART1_PORT,USART3_PORT;
  30:serial.c      **** char sbuff[256];
  31:serial.c      **** 
  32:serial.c      **** extern void wm8978_volset (unsigned char vol);
  33:serial.c      **** 
  34:serial.c      **** 
  35:serial.c      **** 
  36:serial.c      **** void flash_read (void)
  37:serial.c      **** {
 105              		.loc 3 37 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
  38:serial.c      ****       unsigned int idx;
 109              		.loc 3 38 7 view .LVU18
  39:serial.c      ****       FLASH_Unlock();
 110              		.loc 3 39 7 view .LVU19
  37:serial.c      ****       unsigned int idx;
 111              		.loc 3 37 1 is_stmt 0 view .LVU20
 112 0000 08B5     		push	{r3, lr}
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 3, -8
 115              		.cfi_offset 14, -4
 116              		.loc 3 39 7 view .LVU21
 117 0002 FFF7FEFF 		bl	FLASH_Unlock
 118              	.LVL0:
  40:serial.c      ****       flash_address = (unsigned int)0x08004000;
 119              		.loc 3 40 7 is_stmt 1 view .LVU22
 120              		.loc 3 40 21 is_stmt 0 view .LVU23
 121 0006 084A     		ldr	r2, .L8
 122 0008 084B     		ldr	r3, .L8+4
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
  42:serial.c      ****           flash_para[idx] = (*(volatile unsigned int *)(flash_address + (idx * 4)));
 123              		.loc 3 42 27 view .LVU24
 124 000a 0949     		ldr	r1, .L8+8
  40:serial.c      ****       flash_address = (unsigned int)0x08004000;
 125              		.loc 3 40 21 view .LVU25
 126 000c 1360     		str	r3, [r2]
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 127              		.loc 3 41 7 is_stmt 1 view .LVU26
 128              	.LVL1:
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 129              		.loc 3 41 18 view .LVU27
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 130              		.loc 3 41 15 is_stmt 0 view .LVU28
 131 000e 0023     		movs	r3, #0
 132              	.LVL2:
 133              	.L6:
 134              		.loc 3 42 11 is_stmt 1 discriminator 3 view .LVU29
 135              		.loc 3 42 71 is_stmt 0 discriminator 3 view .LVU30
 136 0010 1068     		ldr	r0, [r2]
 137              		.loc 3 42 30 discriminator 3 view .LVU31
 138 0012 50F82300 		ldr	r0, [r0, r3, lsl #2]
 139              		.loc 3 42 27 discriminator 3 view .LVU32
 140 0016 41F82300 		str	r0, [r1, r3, lsl #2]
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 141              		.loc 3 41 25 is_stmt 1 discriminator 3 view .LVU33
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 142              		.loc 3 41 28 is_stmt 0 discriminator 3 view .LVU34
 143 001a 0133     		adds	r3, r3, #1
 144              	.LVL3:
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 145              		.loc 3 41 18 is_stmt 1 discriminator 3 view .LVU35
  41:serial.c      ****       for (idx=0;idx<64;idx++) {
 146              		.loc 3 41 7 is_stmt 0 discriminator 3 view .LVU36
 147 001c 402B     		cmp	r3, #64
 148 001e F7D1     		bne	.L6
  43:serial.c      ****       }
  44:serial.c      ****       FLASH_Lock();
 149              		.loc 3 44 7 is_stmt 1 view .LVU37
  45:serial.c      **** }
 150              		.loc 3 45 1 is_stmt 0 view .LVU38
 151 0020 BDE80840 		pop	{r3, lr}
 152              		.cfi_restore 14
 153              		.cfi_restore 3
 154              		.cfi_def_cfa_offset 0
 155              	.LVL4:
  44:serial.c      **** }
 156              		.loc 3 44 7 view .LVU39
 157 0024 FFF7FEBF 		b	FLASH_Lock
 158              	.LVL5:
 159              	.L9:
 160              		.align	2
 161              	.L8:
 162 0028 00000000 		.word	.LANCHOR0
 163 002c 00400008 		.word	134234112
 164 0030 00000000 		.word	.LANCHOR1
 165              		.cfi_endproc
 166              	.LFE133:
 168              		.section	.text.USART1_IRQHandler,"ax",%progbits
 169              		.align	1
 170              		.global	USART1_IRQHandler
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	USART1_IRQHandler:
 176              	.LFB134:
  46:serial.c      **** 
  47:serial.c      **** 
  48:serial.c      **** void USART1_IRQHandler (void)
  49:serial.c      **** {
 177              		.loc 3 49 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
  50:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 181              		.loc 3 50 7 view .LVU41
  49:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 182              		.loc 3 49 1 is_stmt 0 view .LVU42
 183 0000 10B5     		push	{r4, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187              		.loc 3 50 11 view .LVU43
 188 0002 3248     		ldr	r0, .L27
 189 0004 40F22551 		movw	r1, #1317
 190 0008 FFF7FEFF 		bl	USART_GetITStatus
 191              	.LVL6:
 192              		.loc 3 50 10 view .LVU44
 193 000c C8B1     		cbz	r0, .L11
  51:serial.c      ****          /* Read one byte from the receive data register */
  52:serial.c      ****          rxbuff1[rxcnt1] = USART_ReceiveData(USART1);
 194              		.loc 3 52 10 is_stmt 1 view .LVU45
 195              		.loc 3 52 28 is_stmt 0 view .LVU46
 196 000e 2F48     		ldr	r0, .L27
 197 0010 FFF7FEFF 		bl	USART_ReceiveData
 198              	.LVL7:
 199              		.loc 3 52 17 view .LVU47
 200 0014 2E4A     		ldr	r2, .L27+4
 201              		.loc 3 52 26 view .LVU48
 202 0016 2F49     		ldr	r1, .L27+8
 203              		.loc 3 52 17 view .LVU49
 204 0018 1388     		ldrh	r3, [r2]
 205 001a 9BB2     		uxth	r3, r3
 206              		.loc 3 52 26 view .LVU50
 207 001c C854     		strb	r0, [r1, r3]
  53:serial.c      ****          if (rxbuff1[0] == STX) {
 208              		.loc 3 53 10 is_stmt 1 view .LVU51
 209              		.loc 3 53 13 is_stmt 0 view .LVU52
 210 001e 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 211 0020 022B     		cmp	r3, #2
 212 0022 43D1     		bne	.L12
  54:serial.c      ****             rxcnt1++;
 213              		.loc 3 54 13 is_stmt 1 view .LVU53
 214              		.loc 3 54 19 is_stmt 0 view .LVU54
 215 0024 1388     		ldrh	r3, [r2]
 216 0026 0133     		adds	r3, r3, #1
 217 0028 9BB2     		uxth	r3, r3
 218 002a 1380     		strh	r3, [r2]	@ movhi
  55:serial.c      ****             rx_led = 1;
 219              		.loc 3 55 13 is_stmt 1 view .LVU55
 220              		.loc 3 55 20 is_stmt 0 view .LVU56
 221 002c 2A4B     		ldr	r3, .L27+12
 222 002e 0122     		movs	r2, #1
 223 0030 1A70     		strb	r2, [r3]
 224              	.L13:
  56:serial.c      ****          } else {
  57:serial.c      ****             rxcnt1 = 0;
  58:serial.c      ****          }
  59:serial.c      ****          rxck1 = 0;
 225              		.loc 3 59 10 is_stmt 1 view .LVU57
 226              		.loc 3 59 16 is_stmt 0 view .LVU58
 227 0032 2A4B     		ldr	r3, .L27+16
  60:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 228              		.loc 3 60 10 view .LVU59
 229 0034 2548     		ldr	r0, .L27
  59:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 230              		.loc 3 59 16 view .LVU60
 231 0036 0022     		movs	r2, #0
 232              		.loc 3 60 10 view .LVU61
 233 0038 40F22551 		movw	r1, #1317
  59:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 234              		.loc 3 59 16 view .LVU62
 235 003c 1A70     		strb	r2, [r3]
 236              		.loc 3 60 10 is_stmt 1 view .LVU63
 237 003e FFF7FEFF 		bl	USART_ClearITPendingBit
 238              	.LVL8:
 239              	.L11:
  61:serial.c      ****       }
  62:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
 240              		.loc 3 62 7 view .LVU64
 241              		.loc 3 62 11 is_stmt 0 view .LVU65
 242 0042 2248     		ldr	r0, .L27
 243 0044 40F22771 		movw	r1, #1831
 244 0048 FFF7FEFF 		bl	USART_GetITStatus
 245              	.LVL9:
 246              		.loc 3 62 10 view .LVU66
 247 004c B8B1     		cbz	r0, .L14
  63:serial.c      ****          /* Write one byte to the transmit data register */
  64:serial.c      ****       	 if (txcnt1 < maxtx1) {
 248              		.loc 3 64 9 is_stmt 1 view .LVU67
 249              		.loc 3 64 20 is_stmt 0 view .LVU68
 250 004e 244C     		ldr	r4, .L27+20
 251 0050 244B     		ldr	r3, .L27+24
 252 0052 2288     		ldrh	r2, [r4]
 253 0054 1B88     		ldrh	r3, [r3]
 254 0056 92B2     		uxth	r2, r2
 255 0058 9BB2     		uxth	r3, r3
 256              		.loc 3 64 12 view .LVU69
 257 005a 9A42     		cmp	r2, r3
 258 005c 29D2     		bcs	.L15
  65:serial.c      ****             USART_SendData(USART1, txbuff1[txcnt1]);
 259              		.loc 3 65 13 is_stmt 1 view .LVU70
 260              		.loc 3 65 43 is_stmt 0 view .LVU71
 261 005e 2388     		ldrh	r3, [r4]
 262              		.loc 3 65 13 view .LVU72
 263 0060 214A     		ldr	r2, .L27+28
 264 0062 1A48     		ldr	r0, .L27
 265              		.loc 3 65 43 view .LVU73
 266 0064 9BB2     		uxth	r3, r3
 267              		.loc 3 65 13 view .LVU74
 268 0066 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 269 0068 FFF7FEFF 		bl	USART_SendData
 270              	.LVL10:
  66:serial.c      ****       	    txcnt1++;
 271              		.loc 3 66 12 is_stmt 1 view .LVU75
 272              		.loc 3 66 18 is_stmt 0 view .LVU76
 273 006c 2388     		ldrh	r3, [r4]
 274 006e 0133     		adds	r3, r3, #1
 275 0070 9BB2     		uxth	r3, r3
 276 0072 2380     		strh	r3, [r4]	@ movhi
 277              	.L16:
  67:serial.c      ****       	 } else {
  68:serial.c      ****       	    /* Disable the USART1 Transmit interrupt */
  69:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
  70:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
  71:serial.c      ****       	 }
  72:serial.c      ****       	 USART_ClearITPendingBit(USART1, USART_IT_TXE);
 278              		.loc 3 72 9 is_stmt 1 view .LVU77
 279 0074 1548     		ldr	r0, .L27
 280 0076 40F22771 		movw	r1, #1831
 281 007a FFF7FEFF 		bl	USART_ClearITPendingBit
 282              	.LVL11:
 283              	.L14:
  73:serial.c      ****       }
  74:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_TC) != RESET) {
 284              		.loc 3 74 7 view .LVU78
 285              		.loc 3 74 11 is_stmt 0 view .LVU79
 286 007e 1348     		ldr	r0, .L27
 287 0080 40F22661 		movw	r1, #1574
 288 0084 FFF7FEFF 		bl	USART_GetITStatus
 289              	.LVL12:
 290              		.loc 3 74 10 view .LVU80
 291 0088 78B1     		cbz	r0, .L10
  75:serial.c      ****       	 USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 292              		.loc 3 75 9 is_stmt 1 view .LVU81
 293 008a 0022     		movs	r2, #0
 294 008c 0F48     		ldr	r0, .L27
 295 008e 40F22661 		movw	r1, #1574
 296 0092 FFF7FEFF 		bl	USART_ITConfig
 297              	.LVL13:
  76:serial.c      ****       	 USART_ClearITPendingBit(USART1, USART_IT_TC);
 298              		.loc 3 76 9 view .LVU82
 299 0096 0D48     		ldr	r0, .L27
 300 0098 40F22661 		movw	r1, #1574
 301 009c FFF7FEFF 		bl	USART_ClearITPendingBit
 302              	.LVL14:
  77:serial.c      ****          tx_led = 0;
 303              		.loc 3 77 10 view .LVU83
 304              		.loc 3 77 17 is_stmt 0 view .LVU84
 305 00a0 124A     		ldr	r2, .L27+32
 306 00a2 0023     		movs	r3, #0
 307 00a4 1370     		strb	r3, [r2]
  78:serial.c      ****          tx1_busy = 0;
 308              		.loc 3 78 10 is_stmt 1 view .LVU85
 309              		.loc 3 78 19 is_stmt 0 view .LVU86
 310 00a6 124A     		ldr	r2, .L27+36
 311 00a8 1370     		strb	r3, [r2]
 312              	.L10:
  79:serial.c      ****       }
  80:serial.c      **** }
 313              		.loc 3 80 1 view .LVU87
 314 00aa 10BD     		pop	{r4, pc}
 315              	.L12:
  57:serial.c      ****          }
 316              		.loc 3 57 13 is_stmt 1 view .LVU88
  57:serial.c      ****          }
 317              		.loc 3 57 20 is_stmt 0 view .LVU89
 318 00ac 0023     		movs	r3, #0
 319 00ae 1380     		strh	r3, [r2]	@ movhi
 320 00b0 BFE7     		b	.L13
 321              	.L15:
  69:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 322              		.loc 3 69 12 is_stmt 1 view .LVU90
 323 00b2 0648     		ldr	r0, .L27
 324 00b4 0022     		movs	r2, #0
 325 00b6 40F22771 		movw	r1, #1831
 326 00ba FFF7FEFF 		bl	USART_ITConfig
 327              	.LVL15:
  70:serial.c      ****       	 }
 328              		.loc 3 70 12 view .LVU91
 329 00be 0348     		ldr	r0, .L27
 330 00c0 0122     		movs	r2, #1
 331 00c2 40F22661 		movw	r1, #1574
 332 00c6 FFF7FEFF 		bl	USART_ITConfig
 333              	.LVL16:
 334 00ca D3E7     		b	.L16
 335              	.L28:
 336              		.align	2
 337              	.L27:
 338 00cc 00100140 		.word	1073811456
 339 00d0 00000000 		.word	.LANCHOR2
 340 00d4 00000000 		.word	.LANCHOR3
 341 00d8 00000000 		.word	.LANCHOR4
 342 00dc 00000000 		.word	.LANCHOR5
 343 00e0 00000000 		.word	.LANCHOR6
 344 00e4 00000000 		.word	.LANCHOR7
 345 00e8 00000000 		.word	.LANCHOR8
 346 00ec 00000000 		.word	.LANCHOR9
 347 00f0 00000000 		.word	.LANCHOR10
 348              		.cfi_endproc
 349              	.LFE134:
 351              		.section	.text.USART2_IRQHandler,"ax",%progbits
 352              		.align	1
 353              		.global	USART2_IRQHandler
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 358              	USART2_IRQHandler:
 359              	.LFB135:
  81:serial.c      **** 
  82:serial.c      **** 
  83:serial.c      **** void USART2_IRQHandler (void)
  84:serial.c      **** {
 360              		.loc 3 84 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
  85:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 364              		.loc 3 85 7 view .LVU93
  84:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 365              		.loc 3 84 1 is_stmt 0 view .LVU94
 366 0000 10B5     		push	{r4, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 4, -8
 369              		.cfi_offset 14, -4
 370              		.loc 3 85 11 view .LVU95
 371 0002 3448     		ldr	r0, .L46
 372 0004 40F22551 		movw	r1, #1317
 373 0008 FFF7FEFF 		bl	USART_GetITStatus
 374              	.LVL17:
 375              		.loc 3 85 10 view .LVU96
 376 000c C8B1     		cbz	r0, .L30
  86:serial.c      ****          /* Read one byte from the receive data register */
  87:serial.c      ****          rxbuff2[rxcnt2] = USART_ReceiveData(USART2);
 377              		.loc 3 87 10 is_stmt 1 view .LVU97
 378              		.loc 3 87 28 is_stmt 0 view .LVU98
 379 000e 3148     		ldr	r0, .L46
 380 0010 FFF7FEFF 		bl	USART_ReceiveData
 381              	.LVL18:
 382              		.loc 3 87 17 view .LVU99
 383 0014 304A     		ldr	r2, .L46+4
 384              		.loc 3 87 26 view .LVU100
 385 0016 3149     		ldr	r1, .L46+8
 386              		.loc 3 87 17 view .LVU101
 387 0018 1388     		ldrh	r3, [r2]
 388 001a 9BB2     		uxth	r3, r3
 389              		.loc 3 87 26 view .LVU102
 390 001c C854     		strb	r0, [r1, r3]
  88:serial.c      ****          if (rxbuff2[0] == STX) {
 391              		.loc 3 88 10 is_stmt 1 view .LVU103
 392              		.loc 3 88 13 is_stmt 0 view .LVU104
 393 001e 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 394 0020 022B     		cmp	r3, #2
 395 0022 46D1     		bne	.L31
  89:serial.c      ****             rxcnt2++;
 396              		.loc 3 89 13 is_stmt 1 view .LVU105
 397              		.loc 3 89 19 is_stmt 0 view .LVU106
 398 0024 1388     		ldrh	r3, [r2]
 399 0026 0133     		adds	r3, r3, #1
 400 0028 9BB2     		uxth	r3, r3
 401 002a 1380     		strh	r3, [r2]	@ movhi
  90:serial.c      ****             rx_led = 1;
 402              		.loc 3 90 13 is_stmt 1 view .LVU107
 403              		.loc 3 90 20 is_stmt 0 view .LVU108
 404 002c 2C4B     		ldr	r3, .L46+12
 405 002e 0122     		movs	r2, #1
 406 0030 1A70     		strb	r2, [r3]
 407              	.L32:
  91:serial.c      ****          } else {
  92:serial.c      ****             rxcnt2 = 0;
  93:serial.c      ****          }
  94:serial.c      ****          rxck2 = 0;
 408              		.loc 3 94 10 is_stmt 1 view .LVU109
 409              		.loc 3 94 16 is_stmt 0 view .LVU110
 410 0032 2C4B     		ldr	r3, .L46+16
  95:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 411              		.loc 3 95 10 view .LVU111
 412 0034 2748     		ldr	r0, .L46
  94:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 413              		.loc 3 94 16 view .LVU112
 414 0036 0022     		movs	r2, #0
 415              		.loc 3 95 10 view .LVU113
 416 0038 40F22551 		movw	r1, #1317
  94:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 417              		.loc 3 94 16 view .LVU114
 418 003c 1A70     		strb	r2, [r3]
 419              		.loc 3 95 10 is_stmt 1 view .LVU115
 420 003e FFF7FEFF 		bl	USART_ClearITPendingBit
 421              	.LVL19:
 422              	.L30:
  96:serial.c      ****       }
  97:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
 423              		.loc 3 97 7 view .LVU116
 424              		.loc 3 97 11 is_stmt 0 view .LVU117
 425 0042 2448     		ldr	r0, .L46
 426 0044 40F22771 		movw	r1, #1831
 427 0048 FFF7FEFF 		bl	USART_GetITStatus
 428              	.LVL20:
 429              		.loc 3 97 10 view .LVU118
 430 004c B8B1     		cbz	r0, .L33
  98:serial.c      ****          /* Write one byte to the transmit data register */
  99:serial.c      ****       	 if (txcnt2 < maxtx2) {
 431              		.loc 3 99 9 is_stmt 1 view .LVU119
 432              		.loc 3 99 20 is_stmt 0 view .LVU120
 433 004e 264C     		ldr	r4, .L46+20
 434 0050 264B     		ldr	r3, .L46+24
 435 0052 2288     		ldrh	r2, [r4]
 436 0054 1B88     		ldrh	r3, [r3]
 437 0056 92B2     		uxth	r2, r2
 438 0058 9BB2     		uxth	r3, r3
 439              		.loc 3 99 12 view .LVU121
 440 005a 9A42     		cmp	r2, r3
 441 005c 2CD2     		bcs	.L34
 100:serial.c      ****             USART_SendData(USART2, txbuff2[txcnt2]);
 442              		.loc 3 100 13 is_stmt 1 view .LVU122
 443              		.loc 3 100 43 is_stmt 0 view .LVU123
 444 005e 2388     		ldrh	r3, [r4]
 445              		.loc 3 100 13 view .LVU124
 446 0060 234A     		ldr	r2, .L46+28
 447 0062 1C48     		ldr	r0, .L46
 448              		.loc 3 100 43 view .LVU125
 449 0064 9BB2     		uxth	r3, r3
 450              		.loc 3 100 13 view .LVU126
 451 0066 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 452 0068 FFF7FEFF 		bl	USART_SendData
 453              	.LVL21:
 101:serial.c      ****       	    txcnt2++;
 454              		.loc 3 101 12 is_stmt 1 view .LVU127
 455              		.loc 3 101 18 is_stmt 0 view .LVU128
 456 006c 2388     		ldrh	r3, [r4]
 457 006e 0133     		adds	r3, r3, #1
 458 0070 9BB2     		uxth	r3, r3
 459 0072 2380     		strh	r3, [r4]	@ movhi
 460              	.L35:
 102:serial.c      ****       	 } else {
 103:serial.c      ****       	    /* Disable the USART2 Transmit interrupt */
 104:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 105:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 106:serial.c      ****       	 }
 107:serial.c      ****       	 USART_ClearITPendingBit(USART2, USART_IT_TXE);
 461              		.loc 3 107 9 is_stmt 1 view .LVU129
 462 0074 1748     		ldr	r0, .L46
 463 0076 40F22771 		movw	r1, #1831
 464 007a FFF7FEFF 		bl	USART_ClearITPendingBit
 465              	.LVL22:
 466              	.L33:
 108:serial.c      ****       }
 109:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_TC) != RESET) {
 467              		.loc 3 109 7 view .LVU130
 468              		.loc 3 109 11 is_stmt 0 view .LVU131
 469 007e 1548     		ldr	r0, .L46
 470 0080 40F22661 		movw	r1, #1574
 471 0084 FFF7FEFF 		bl	USART_GetITStatus
 472              	.LVL23:
 473              		.loc 3 109 10 view .LVU132
 474 0088 90B1     		cbz	r0, .L29
 110:serial.c      ****       	 USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 475              		.loc 3 110 9 is_stmt 1 view .LVU133
 476 008a 0022     		movs	r2, #0
 477 008c 1148     		ldr	r0, .L46
 478 008e 40F22661 		movw	r1, #1574
 479 0092 FFF7FEFF 		bl	USART_ITConfig
 480              	.LVL24:
 111:serial.c      ****       	 USART_ClearITPendingBit(USART2, USART_IT_TC);
 481              		.loc 3 111 9 view .LVU134
 482 0096 0F48     		ldr	r0, .L46
 483 0098 40F22661 		movw	r1, #1574
 484 009c FFF7FEFF 		bl	USART_ClearITPendingBit
 485              	.LVL25:
 112:serial.c      ****          tx_led = 0;
 486              		.loc 3 112 10 view .LVU135
 487              		.loc 3 112 17 is_stmt 0 view .LVU136
 488 00a0 144A     		ldr	r2, .L46+32
 489 00a2 0023     		movs	r3, #0
 490 00a4 1370     		strb	r3, [r2]
 113:serial.c      ****          TXEN_485 = 0;
 491              		.loc 3 113 10 is_stmt 1 view .LVU137
 492              		.loc 3 113 19 is_stmt 0 view .LVU138
 493 00a6 144A     		ldr	r2, .L46+36
 494 00a8 C2F8A032 		str	r3, [r2, #672]
 114:serial.c      ****          tx2_busy = 0;
 495              		.loc 3 114 10 is_stmt 1 view .LVU139
 496              		.loc 3 114 19 is_stmt 0 view .LVU140
 497 00ac 134A     		ldr	r2, .L46+40
 498 00ae 1370     		strb	r3, [r2]
 499              	.L29:
 115:serial.c      ****       }
 116:serial.c      **** }
 500              		.loc 3 116 1 view .LVU141
 501 00b0 10BD     		pop	{r4, pc}
 502              	.L31:
  92:serial.c      ****          }
 503              		.loc 3 92 13 is_stmt 1 view .LVU142
  92:serial.c      ****          }
 504              		.loc 3 92 20 is_stmt 0 view .LVU143
 505 00b2 0023     		movs	r3, #0
 506 00b4 1380     		strh	r3, [r2]	@ movhi
 507 00b6 BCE7     		b	.L32
 508              	.L34:
 104:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 509              		.loc 3 104 12 is_stmt 1 view .LVU144
 510 00b8 0648     		ldr	r0, .L46
 511 00ba 0022     		movs	r2, #0
 512 00bc 40F22771 		movw	r1, #1831
 513 00c0 FFF7FEFF 		bl	USART_ITConfig
 514              	.LVL26:
 105:serial.c      ****       	 }
 515              		.loc 3 105 12 view .LVU145
 516 00c4 0348     		ldr	r0, .L46
 517 00c6 0122     		movs	r2, #1
 518 00c8 40F22661 		movw	r1, #1574
 519 00cc FFF7FEFF 		bl	USART_ITConfig
 520              	.LVL27:
 521 00d0 D0E7     		b	.L35
 522              	.L47:
 523 00d2 00BF     		.align	2
 524              	.L46:
 525 00d4 00440040 		.word	1073759232
 526 00d8 00000000 		.word	.LANCHOR11
 527 00dc 00000000 		.word	.LANCHOR12
 528 00e0 00000000 		.word	.LANCHOR4
 529 00e4 00000000 		.word	.LANCHOR13
 530 00e8 00000000 		.word	.LANCHOR14
 531 00ec 00000000 		.word	.LANCHOR15
 532 00f0 00000000 		.word	.LANCHOR16
 533 00f4 00000000 		.word	.LANCHOR9
 534 00f8 00004342 		.word	1111687168
 535 00fc 00000000 		.word	.LANCHOR17
 536              		.cfi_endproc
 537              	.LFE135:
 539              		.section	.text.USART3_IRQHandler,"ax",%progbits
 540              		.align	1
 541              		.global	USART3_IRQHandler
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 546              	USART3_IRQHandler:
 547              	.LFB136:
 117:serial.c      **** 
 118:serial.c      **** 
 119:serial.c      **** void USART3_IRQHandler (void)
 120:serial.c      **** {
 548              		.loc 3 120 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 121:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 552              		.loc 3 121 7 view .LVU147
 120:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 553              		.loc 3 120 1 is_stmt 0 view .LVU148
 554 0000 10B5     		push	{r4, lr}
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 4, -8
 557              		.cfi_offset 14, -4
 558              		.loc 3 121 11 view .LVU149
 559 0002 3248     		ldr	r0, .L65
 560 0004 40F22551 		movw	r1, #1317
 561 0008 FFF7FEFF 		bl	USART_GetITStatus
 562              	.LVL28:
 563              		.loc 3 121 10 view .LVU150
 564 000c C8B1     		cbz	r0, .L49
 122:serial.c      ****          /* Read one byte from the receive data register */
 123:serial.c      ****          rxbuff3[rxcnt3] = USART_ReceiveData(USART3);
 565              		.loc 3 123 10 is_stmt 1 view .LVU151
 566              		.loc 3 123 28 is_stmt 0 view .LVU152
 567 000e 2F48     		ldr	r0, .L65
 568 0010 FFF7FEFF 		bl	USART_ReceiveData
 569              	.LVL29:
 570              		.loc 3 123 17 view .LVU153
 571 0014 2E4A     		ldr	r2, .L65+4
 572              		.loc 3 123 26 view .LVU154
 573 0016 2F49     		ldr	r1, .L65+8
 574              		.loc 3 123 17 view .LVU155
 575 0018 1388     		ldrh	r3, [r2]
 576 001a 9BB2     		uxth	r3, r3
 577              		.loc 3 123 26 view .LVU156
 578 001c C854     		strb	r0, [r1, r3]
 124:serial.c      ****          if (rxbuff3[0] == STX) {
 579              		.loc 3 124 10 is_stmt 1 view .LVU157
 580              		.loc 3 124 13 is_stmt 0 view .LVU158
 581 001e 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 582 0020 022B     		cmp	r3, #2
 583 0022 43D1     		bne	.L50
 125:serial.c      ****             rxcnt3++;
 584              		.loc 3 125 13 is_stmt 1 view .LVU159
 585              		.loc 3 125 19 is_stmt 0 view .LVU160
 586 0024 1388     		ldrh	r3, [r2]
 587 0026 0133     		adds	r3, r3, #1
 588 0028 9BB2     		uxth	r3, r3
 589 002a 1380     		strh	r3, [r2]	@ movhi
 126:serial.c      ****             rx_led = 1;
 590              		.loc 3 126 13 is_stmt 1 view .LVU161
 591              		.loc 3 126 20 is_stmt 0 view .LVU162
 592 002c 2A4B     		ldr	r3, .L65+12
 593 002e 0122     		movs	r2, #1
 594 0030 1A70     		strb	r2, [r3]
 595              	.L51:
 127:serial.c      ****          } else {
 128:serial.c      ****             rxcnt3 = 0;
 129:serial.c      ****          }
 130:serial.c      ****          rxck3 = 0;
 596              		.loc 3 130 10 is_stmt 1 view .LVU163
 597              		.loc 3 130 16 is_stmt 0 view .LVU164
 598 0032 2A4B     		ldr	r3, .L65+16
 131:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 599              		.loc 3 131 10 view .LVU165
 600 0034 2548     		ldr	r0, .L65
 130:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 601              		.loc 3 130 16 view .LVU166
 602 0036 0022     		movs	r2, #0
 603              		.loc 3 131 10 view .LVU167
 604 0038 40F22551 		movw	r1, #1317
 130:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 605              		.loc 3 130 16 view .LVU168
 606 003c 1A70     		strb	r2, [r3]
 607              		.loc 3 131 10 is_stmt 1 view .LVU169
 608 003e FFF7FEFF 		bl	USART_ClearITPendingBit
 609              	.LVL30:
 610              	.L49:
 132:serial.c      ****       }
 133:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_TXE) != RESET) {
 611              		.loc 3 133 7 view .LVU170
 612              		.loc 3 133 11 is_stmt 0 view .LVU171
 613 0042 2248     		ldr	r0, .L65
 614 0044 40F22771 		movw	r1, #1831
 615 0048 FFF7FEFF 		bl	USART_GetITStatus
 616              	.LVL31:
 617              		.loc 3 133 10 view .LVU172
 618 004c B8B1     		cbz	r0, .L52
 134:serial.c      ****          /* Write one byte to the transmit data register */
 135:serial.c      ****       	 if (txcnt3 < maxtx3) {
 619              		.loc 3 135 9 is_stmt 1 view .LVU173
 620              		.loc 3 135 20 is_stmt 0 view .LVU174
 621 004e 244C     		ldr	r4, .L65+20
 622 0050 244B     		ldr	r3, .L65+24
 623 0052 2288     		ldrh	r2, [r4]
 624 0054 1B88     		ldrh	r3, [r3]
 625 0056 92B2     		uxth	r2, r2
 626 0058 9BB2     		uxth	r3, r3
 627              		.loc 3 135 12 view .LVU175
 628 005a 9A42     		cmp	r2, r3
 629 005c 29D2     		bcs	.L53
 136:serial.c      ****             USART_SendData(USART3, txbuff3[txcnt3]);
 630              		.loc 3 136 13 is_stmt 1 view .LVU176
 631              		.loc 3 136 43 is_stmt 0 view .LVU177
 632 005e 2388     		ldrh	r3, [r4]
 633              		.loc 3 136 13 view .LVU178
 634 0060 214A     		ldr	r2, .L65+28
 635 0062 1A48     		ldr	r0, .L65
 636              		.loc 3 136 43 view .LVU179
 637 0064 9BB2     		uxth	r3, r3
 638              		.loc 3 136 13 view .LVU180
 639 0066 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 640 0068 FFF7FEFF 		bl	USART_SendData
 641              	.LVL32:
 137:serial.c      ****       	    txcnt3++;
 642              		.loc 3 137 12 is_stmt 1 view .LVU181
 643              		.loc 3 137 18 is_stmt 0 view .LVU182
 644 006c 2388     		ldrh	r3, [r4]
 645 006e 0133     		adds	r3, r3, #1
 646 0070 9BB2     		uxth	r3, r3
 647 0072 2380     		strh	r3, [r4]	@ movhi
 648              	.L54:
 138:serial.c      ****       	 } else {
 139:serial.c      ****       	    /* Disable the USART3 Transmit interrupt */
 140:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
 141:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
 142:serial.c      ****       	 }
 143:serial.c      ****       	 USART_ClearITPendingBit(USART3, USART_IT_TXE);
 649              		.loc 3 143 9 is_stmt 1 view .LVU183
 650 0074 1548     		ldr	r0, .L65
 651 0076 40F22771 		movw	r1, #1831
 652 007a FFF7FEFF 		bl	USART_ClearITPendingBit
 653              	.LVL33:
 654              	.L52:
 144:serial.c      ****       }
 145:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_TC) != RESET) {
 655              		.loc 3 145 7 view .LVU184
 656              		.loc 3 145 11 is_stmt 0 view .LVU185
 657 007e 1348     		ldr	r0, .L65
 658 0080 40F22661 		movw	r1, #1574
 659 0084 FFF7FEFF 		bl	USART_GetITStatus
 660              	.LVL34:
 661              		.loc 3 145 10 view .LVU186
 662 0088 78B1     		cbz	r0, .L48
 146:serial.c      ****       	 USART_ITConfig(USART3, USART_IT_TC, DISABLE);
 663              		.loc 3 146 9 is_stmt 1 view .LVU187
 664 008a 0022     		movs	r2, #0
 665 008c 0F48     		ldr	r0, .L65
 666 008e 40F22661 		movw	r1, #1574
 667 0092 FFF7FEFF 		bl	USART_ITConfig
 668              	.LVL35:
 147:serial.c      ****       	 USART_ClearITPendingBit(USART3, USART_IT_TC);
 669              		.loc 3 147 9 view .LVU188
 670 0096 0D48     		ldr	r0, .L65
 671 0098 40F22661 		movw	r1, #1574
 672 009c FFF7FEFF 		bl	USART_ClearITPendingBit
 673              	.LVL36:
 148:serial.c      ****          tx_led = 0;
 674              		.loc 3 148 10 view .LVU189
 675              		.loc 3 148 17 is_stmt 0 view .LVU190
 676 00a0 124A     		ldr	r2, .L65+32
 677 00a2 0023     		movs	r3, #0
 678 00a4 1370     		strb	r3, [r2]
 149:serial.c      ****          tx3_busy = 0;
 679              		.loc 3 149 10 is_stmt 1 view .LVU191
 680              		.loc 3 149 19 is_stmt 0 view .LVU192
 681 00a6 124A     		ldr	r2, .L65+36
 682 00a8 1370     		strb	r3, [r2]
 683              	.L48:
 150:serial.c      ****       }
 151:serial.c      **** }
 684              		.loc 3 151 1 view .LVU193
 685 00aa 10BD     		pop	{r4, pc}
 686              	.L50:
 128:serial.c      ****          }
 687              		.loc 3 128 13 is_stmt 1 view .LVU194
 128:serial.c      ****          }
 688              		.loc 3 128 20 is_stmt 0 view .LVU195
 689 00ac 0023     		movs	r3, #0
 690 00ae 1380     		strh	r3, [r2]	@ movhi
 691 00b0 BFE7     		b	.L51
 692              	.L53:
 140:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
 693              		.loc 3 140 12 is_stmt 1 view .LVU196
 694 00b2 0648     		ldr	r0, .L65
 695 00b4 0022     		movs	r2, #0
 696 00b6 40F22771 		movw	r1, #1831
 697 00ba FFF7FEFF 		bl	USART_ITConfig
 698              	.LVL37:
 141:serial.c      ****       	 }
 699              		.loc 3 141 12 view .LVU197
 700 00be 0348     		ldr	r0, .L65
 701 00c0 0122     		movs	r2, #1
 702 00c2 40F22661 		movw	r1, #1574
 703 00c6 FFF7FEFF 		bl	USART_ITConfig
 704              	.LVL38:
 705 00ca D3E7     		b	.L54
 706              	.L66:
 707              		.align	2
 708              	.L65:
 709 00cc 00480040 		.word	1073760256
 710 00d0 00000000 		.word	.LANCHOR18
 711 00d4 00000000 		.word	.LANCHOR19
 712 00d8 00000000 		.word	.LANCHOR4
 713 00dc 00000000 		.word	.LANCHOR20
 714 00e0 00000000 		.word	.LANCHOR21
 715 00e4 00000000 		.word	.LANCHOR22
 716 00e8 00000000 		.word	.LANCHOR23
 717 00ec 00000000 		.word	.LANCHOR9
 718 00f0 00000000 		.word	.LANCHOR24
 719              		.cfi_endproc
 720              	.LFE136:
 722              		.section	.text.tx_enable1,"ax",%progbits
 723              		.align	1
 724              		.global	tx_enable1
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 729              	tx_enable1:
 730              	.LVL39:
 731              	.LFB137:
 152:serial.c      **** 
 153:serial.c      **** 
 154:serial.c      **** void tx_enable1 (unsigned char max)
 155:serial.c      **** {
 732              		.loc 3 155 1 view -0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 156:serial.c      ****       maxtx1 = max;
 736              		.loc 3 156 7 view .LVU199
 155:serial.c      ****       maxtx1 = max;
 737              		.loc 3 155 1 is_stmt 0 view .LVU200
 738 0000 08B5     		push	{r3, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 3, -8
 741              		.cfi_offset 14, -4
 742              		.loc 3 156 14 view .LVU201
 743 0002 084B     		ldr	r3, .L68
 744 0004 1880     		strh	r0, [r3]	@ movhi
 157:serial.c      ****       txcnt1 = 0;
 745              		.loc 3 157 7 is_stmt 1 view .LVU202
 746              		.loc 3 157 14 is_stmt 0 view .LVU203
 747 0006 084B     		ldr	r3, .L68+4
 158:serial.c      ****       USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 748              		.loc 3 158 7 view .LVU204
 749 0008 0848     		ldr	r0, .L68+8
 750              	.LVL40:
 157:serial.c      ****       txcnt1 = 0;
 751              		.loc 3 157 14 view .LVU205
 752 000a 0022     		movs	r2, #0
 753 000c 1A80     		strh	r2, [r3]	@ movhi
 754              		.loc 3 158 7 is_stmt 1 view .LVU206
 755 000e 40F22771 		movw	r1, #1831
 756 0012 0122     		movs	r2, #1
 757 0014 FFF7FEFF 		bl	USART_ITConfig
 758              	.LVL41:
 159:serial.c      ****       tx_led = 1;
 759              		.loc 3 159 7 view .LVU207
 760              		.loc 3 159 14 is_stmt 0 view .LVU208
 761 0018 054A     		ldr	r2, .L68+12
 762 001a 0123     		movs	r3, #1
 763 001c 1370     		strb	r3, [r2]
 160:serial.c      ****       tx1_busy = 1;
 764              		.loc 3 160 7 is_stmt 1 view .LVU209
 765              		.loc 3 160 16 is_stmt 0 view .LVU210
 766 001e 054A     		ldr	r2, .L68+16
 767 0020 1370     		strb	r3, [r2]
 161:serial.c      **** }
 768              		.loc 3 161 1 view .LVU211
 769 0022 08BD     		pop	{r3, pc}
 770              	.L69:
 771              		.align	2
 772              	.L68:
 773 0024 00000000 		.word	.LANCHOR7
 774 0028 00000000 		.word	.LANCHOR6
 775 002c 00100140 		.word	1073811456
 776 0030 00000000 		.word	.LANCHOR9
 777 0034 00000000 		.word	.LANCHOR10
 778              		.cfi_endproc
 779              	.LFE137:
 781              		.section	.text.tx_enable2,"ax",%progbits
 782              		.align	1
 783              		.global	tx_enable2
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 788              	tx_enable2:
 789              	.LVL42:
 790              	.LFB138:
 162:serial.c      **** 
 163:serial.c      **** 
 164:serial.c      **** void tx_enable2 (unsigned char max)
 165:serial.c      **** {
 791              		.loc 3 165 1 is_stmt 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 166:serial.c      ****       TXEN_485 = 1;
 795              		.loc 3 166 7 view .LVU213
 796              		.loc 3 166 16 is_stmt 0 view .LVU214
 797 0000 0A4B     		ldr	r3, .L71
 165:serial.c      ****       TXEN_485 = 1;
 798              		.loc 3 165 1 view .LVU215
 799 0002 10B5     		push	{r4, lr}
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 4, -8
 802              		.cfi_offset 14, -4
 803              		.loc 3 166 16 view .LVU216
 804 0004 0124     		movs	r4, #1
 805 0006 C3F8A042 		str	r4, [r3, #672]
 167:serial.c      ****       maxtx2 = max;
 806              		.loc 3 167 7 is_stmt 1 view .LVU217
 807              		.loc 3 167 14 is_stmt 0 view .LVU218
 808 000a 094B     		ldr	r3, .L71+4
 809 000c 1880     		strh	r0, [r3]	@ movhi
 168:serial.c      ****       txcnt2 = 0;
 810              		.loc 3 168 7 is_stmt 1 view .LVU219
 811              		.loc 3 168 14 is_stmt 0 view .LVU220
 812 000e 094B     		ldr	r3, .L71+8
 169:serial.c      ****       USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 813              		.loc 3 169 7 view .LVU221
 814 0010 0948     		ldr	r0, .L71+12
 815              	.LVL43:
 168:serial.c      ****       txcnt2 = 0;
 816              		.loc 3 168 14 view .LVU222
 817 0012 0022     		movs	r2, #0
 818 0014 1A80     		strh	r2, [r3]	@ movhi
 819              		.loc 3 169 7 is_stmt 1 view .LVU223
 820 0016 40F22771 		movw	r1, #1831
 821 001a 2246     		mov	r2, r4
 822 001c FFF7FEFF 		bl	USART_ITConfig
 823              	.LVL44:
 170:serial.c      ****       tx_led = 1;
 824              		.loc 3 170 7 view .LVU224
 825              		.loc 3 170 14 is_stmt 0 view .LVU225
 826 0020 064B     		ldr	r3, .L71+16
 827 0022 1C70     		strb	r4, [r3]
 171:serial.c      ****       tx2_busy = 1;
 828              		.loc 3 171 7 is_stmt 1 view .LVU226
 829              		.loc 3 171 16 is_stmt 0 view .LVU227
 830 0024 064B     		ldr	r3, .L71+20
 831 0026 1C70     		strb	r4, [r3]
 172:serial.c      **** }
 832              		.loc 3 172 1 view .LVU228
 833 0028 10BD     		pop	{r4, pc}
 834              	.L72:
 835 002a 00BF     		.align	2
 836              	.L71:
 837 002c 00004342 		.word	1111687168
 838 0030 00000000 		.word	.LANCHOR15
 839 0034 00000000 		.word	.LANCHOR14
 840 0038 00440040 		.word	1073759232
 841 003c 00000000 		.word	.LANCHOR9
 842 0040 00000000 		.word	.LANCHOR17
 843              		.cfi_endproc
 844              	.LFE138:
 846              		.section	.text.tx_enable3,"ax",%progbits
 847              		.align	1
 848              		.global	tx_enable3
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 853              	tx_enable3:
 854              	.LVL45:
 855              	.LFB139:
 173:serial.c      **** 
 174:serial.c      **** 
 175:serial.c      **** void tx_enable3 (unsigned char max)
 176:serial.c      **** {
 856              		.loc 3 176 1 is_stmt 1 view -0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 177:serial.c      ****       maxtx3 = max;
 860              		.loc 3 177 7 view .LVU230
 176:serial.c      ****       maxtx3 = max;
 861              		.loc 3 176 1 is_stmt 0 view .LVU231
 862 0000 08B5     		push	{r3, lr}
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 3, -8
 865              		.cfi_offset 14, -4
 866              		.loc 3 177 14 view .LVU232
 867 0002 084B     		ldr	r3, .L74
 868 0004 1880     		strh	r0, [r3]	@ movhi
 178:serial.c      ****       txcnt3 = 0;
 869              		.loc 3 178 7 is_stmt 1 view .LVU233
 870              		.loc 3 178 14 is_stmt 0 view .LVU234
 871 0006 084B     		ldr	r3, .L74+4
 179:serial.c      ****       USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
 872              		.loc 3 179 7 view .LVU235
 873 0008 0848     		ldr	r0, .L74+8
 874              	.LVL46:
 178:serial.c      ****       txcnt3 = 0;
 875              		.loc 3 178 14 view .LVU236
 876 000a 0022     		movs	r2, #0
 877 000c 1A80     		strh	r2, [r3]	@ movhi
 878              		.loc 3 179 7 is_stmt 1 view .LVU237
 879 000e 40F22771 		movw	r1, #1831
 880 0012 0122     		movs	r2, #1
 881 0014 FFF7FEFF 		bl	USART_ITConfig
 882              	.LVL47:
 180:serial.c      ****       tx_led = 1;
 883              		.loc 3 180 7 view .LVU238
 884              		.loc 3 180 14 is_stmt 0 view .LVU239
 885 0018 054A     		ldr	r2, .L74+12
 886 001a 0123     		movs	r3, #1
 887 001c 1370     		strb	r3, [r2]
 181:serial.c      ****       tx3_busy = 1;
 888              		.loc 3 181 7 is_stmt 1 view .LVU240
 889              		.loc 3 181 16 is_stmt 0 view .LVU241
 890 001e 054A     		ldr	r2, .L74+16
 891 0020 1370     		strb	r3, [r2]
 182:serial.c      **** }
 892              		.loc 3 182 1 view .LVU242
 893 0022 08BD     		pop	{r3, pc}
 894              	.L75:
 895              		.align	2
 896              	.L74:
 897 0024 00000000 		.word	.LANCHOR22
 898 0028 00000000 		.word	.LANCHOR21
 899 002c 00480040 		.word	1073760256
 900 0030 00000000 		.word	.LANCHOR9
 901 0034 00000000 		.word	.LANCHOR24
 902              		.cfi_endproc
 903              	.LFE139:
 905              		.section	.text.receive_check1,"ax",%progbits
 906              		.align	1
 907              		.global	receive_check1
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 912              	receive_check1:
 913              	.LFB140:
 183:serial.c      **** 
 184:serial.c      **** 
 185:serial.c      **** void receive_check1 (void)
 186:serial.c      **** {
 914              		.loc 3 186 1 is_stmt 1 view -0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 187:serial.c      ****       unsigned char bcc,idx;
 918              		.loc 3 187 7 view .LVU244
 188:serial.c      ****       if (rxcnt1) {
 919              		.loc 3 188 7 view .LVU245
 186:serial.c      ****       unsigned char bcc,idx;
 920              		.loc 3 186 1 is_stmt 0 view .LVU246
 921 0000 38B5     		push	{r3, r4, r5, lr}
 922              		.cfi_def_cfa_offset 16
 923              		.cfi_offset 3, -16
 924              		.cfi_offset 4, -12
 925              		.cfi_offset 5, -8
 926              		.cfi_offset 14, -4
 927              		.loc 3 188 11 view .LVU247
 928 0002 1A4C     		ldr	r4, .L83
 929 0004 2388     		ldrh	r3, [r4]
 930 0006 9BB2     		uxth	r3, r3
 931              		.loc 3 188 10 view .LVU248
 932 0008 5BB3     		cbz	r3, .L77
 189:serial.c      ****          if ((rxbuff1[0] == STX) && (rxbuff1[5] == ETX) && ((rxbuff1[1] == this_id) || (rxbuff1[1] 
 933              		.loc 3 189 10 is_stmt 1 view .LVU249
 934              		.loc 3 189 22 is_stmt 0 view .LVU250
 935 000a 194A     		ldr	r2, .L83+4
 936              		.loc 3 189 13 view .LVU251
 937 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 938 000e 022B     		cmp	r3, #2
 939 0010 1FD1     		bne	.L78
 940              		.loc 3 189 34 discriminator 1 view .LVU252
 941 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 942 0014 032B     		cmp	r3, #3
 943 0016 1CD1     		bne	.L78
 944              		.loc 3 189 73 discriminator 2 view .LVU253
 945 0018 1649     		ldr	r1, .L83+8
 946              		.loc 3 189 69 discriminator 2 view .LVU254
 947 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 948              		.loc 3 189 73 discriminator 2 view .LVU255
 949 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 950              		.loc 3 189 57 discriminator 2 view .LVU256
 951 001e 8B42     		cmp	r3, r1
 952 0020 01D0     		beq	.L79
 953              		.loc 3 189 85 discriminator 3 view .LVU257
 954 0022 212B     		cmp	r3, #33
 955 0024 15D1     		bne	.L78
 956              	.L79:
 957              	.LVL48:
 190:serial.c      **** 	    bcc = rxbuff1[0];
 191:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 958              		.loc 3 191 30 is_stmt 1 view .LVU258
 959              		.loc 3 191 49 is_stmt 0 view .LVU259
 960 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 961 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 962 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 192:serial.c      ****             if (bcc == rxbuff1[6]) {
 963              		.loc 3 192 16 view .LVU260
 964 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 965              		.loc 3 191 34 view .LVU261
 966 002e 83F00203 		eor	r3, r3, #2
 967              	.LVL49:
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 968              		.loc 3 191 23 is_stmt 1 view .LVU262
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 969              		.loc 3 191 17 view .LVU263
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 970              		.loc 3 191 30 view .LVU264
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 971              		.loc 3 191 34 is_stmt 0 view .LVU265
 972 0032 4340     		eors	r3, r3, r0
 973              	.LVL50:
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 974              		.loc 3 191 23 is_stmt 1 view .LVU266
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 975              		.loc 3 191 17 view .LVU267
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 976              		.loc 3 191 30 view .LVU268
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 977              		.loc 3 191 34 is_stmt 0 view .LVU269
 978 0034 6B40     		eors	r3, r3, r5
 979              	.LVL51:
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 980              		.loc 3 191 23 is_stmt 1 view .LVU270
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 981              		.loc 3 191 17 view .LVU271
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 982              		.loc 3 191 30 view .LVU272
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 983              		.loc 3 191 34 is_stmt 0 view .LVU273
 984 0036 4B40     		eors	r3, r3, r1
 985              	.LVL52:
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 986              		.loc 3 191 23 is_stmt 1 view .LVU274
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 987              		.loc 3 191 17 view .LVU275
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 988              		.loc 3 191 30 view .LVU276
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 989              		.loc 3 191 23 view .LVU277
 191:serial.c      ****             if (bcc == rxbuff1[6]) {
 990              		.loc 3 191 17 view .LVU278
 991              		.loc 3 192 13 view .LVU279
 992              		.loc 3 192 16 is_stmt 0 view .LVU280
 993 0038 83F00303 		eor	r3, r3, #3
 994              	.LVL53:
 995              		.loc 3 192 16 view .LVU281
 996 003c 9A42     		cmp	r2, r3
 997 003e 08D1     		bne	.L78
 193:serial.c      **** 	       if ((rxbuff1[2] == 0xFF) && (rxbuff1[3] == 0xFF) && (rxbuff1[4] == 0xFF)) {
 998              		.loc 3 193 9 is_stmt 1 view .LVU282
 999              		.loc 3 193 58 is_stmt 0 view .LVU283
 1000 0040 2840     		ands	r0, r0, r5
 1001 0042 0140     		ands	r1, r1, r0
 1002 0044 FF29     		cmp	r1, #255
 1003 0046 04D1     		bne	.L78
 194:serial.c      **** 	       	  wm8978_volset(0);
 1004              		.loc 3 194 12 is_stmt 1 view .LVU284
 1005 0048 0020     		movs	r0, #0
 1006 004a FFF7FEFF 		bl	wm8978_volset
 1007              	.LVL54:
 195:serial.c      **** 	       	  NVIC_SystemReset();
 1008              		.loc 3 195 12 view .LVU285
 1009 004e FFF7FEFF 		bl	__NVIC_SystemReset
 1010              	.LVL55:
 1011              	.L78:
 196:serial.c      **** 	       }
 197:serial.c      **** 	    }
 198:serial.c      ****          }
 199:serial.c      ****          bzero(rxbuff1,rxcnt1);
 1012              		.loc 3 199 10 view .LVU286
 1013 0052 2288     		ldrh	r2, [r4]
 1014 0054 0648     		ldr	r0, .L83+4
 1015 0056 92B2     		uxth	r2, r2
 1016 0058 0021     		movs	r1, #0
 1017 005a FFF7FEFF 		bl	memset
 1018              	.LVL56:
 200:serial.c      ****          rxcnt1 = 0;
 1019              		.loc 3 200 10 view .LVU287
 1020              		.loc 3 200 17 is_stmt 0 view .LVU288
 1021 005e 0023     		movs	r3, #0
 1022 0060 2380     		strh	r3, [r4]	@ movhi
 1023              	.L77:
 201:serial.c      ****       }
 202:serial.c      ****       rx_led = 0;
 1024              		.loc 3 202 7 is_stmt 1 view .LVU289
 1025              		.loc 3 202 14 is_stmt 0 view .LVU290
 1026 0062 054B     		ldr	r3, .L83+12
 1027 0064 0022     		movs	r2, #0
 1028 0066 1A70     		strb	r2, [r3]
 203:serial.c      **** }
 1029              		.loc 3 203 1 view .LVU291
 1030 0068 38BD     		pop	{r3, r4, r5, pc}
 1031              	.L84:
 1032 006a 00BF     		.align	2
 1033              	.L83:
 1034 006c 00000000 		.word	.LANCHOR2
 1035 0070 00000000 		.word	.LANCHOR3
 1036 0074 00000000 		.word	.LANCHOR25
 1037 0078 00000000 		.word	.LANCHOR4
 1038              		.cfi_endproc
 1039              	.LFE140:
 1041              		.section	.text.receive_check2,"ax",%progbits
 1042              		.align	1
 1043              		.global	receive_check2
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1048              	receive_check2:
 1049              	.LFB141:
 204:serial.c      **** 
 205:serial.c      **** 
 206:serial.c      **** void receive_check2 (void)
 207:serial.c      **** {
 1050              		.loc 3 207 1 is_stmt 1 view -0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 208:serial.c      ****       unsigned char bcc,idx;
 1054              		.loc 3 208 7 view .LVU293
 209:serial.c      ****       if (rxcnt2) {
 1055              		.loc 3 209 7 view .LVU294
 207:serial.c      ****       unsigned char bcc,idx;
 1056              		.loc 3 207 1 is_stmt 0 view .LVU295
 1057 0000 38B5     		push	{r3, r4, r5, lr}
 1058              		.cfi_def_cfa_offset 16
 1059              		.cfi_offset 3, -16
 1060              		.cfi_offset 4, -12
 1061              		.cfi_offset 5, -8
 1062              		.cfi_offset 14, -4
 1063              		.loc 3 209 11 view .LVU296
 1064 0002 1A4C     		ldr	r4, .L92
 1065 0004 2388     		ldrh	r3, [r4]
 1066 0006 9BB2     		uxth	r3, r3
 1067              		.loc 3 209 10 view .LVU297
 1068 0008 5BB3     		cbz	r3, .L86
 210:serial.c      ****          if ((rxbuff2[0] == STX) && (rxbuff2[5] == ETX) && ((rxbuff2[1] == this_id) || (rxbuff2[1] 
 1069              		.loc 3 210 10 is_stmt 1 view .LVU298
 1070              		.loc 3 210 22 is_stmt 0 view .LVU299
 1071 000a 194A     		ldr	r2, .L92+4
 1072              		.loc 3 210 13 view .LVU300
 1073 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1074 000e 022B     		cmp	r3, #2
 1075 0010 1FD1     		bne	.L87
 1076              		.loc 3 210 34 discriminator 1 view .LVU301
 1077 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 1078 0014 032B     		cmp	r3, #3
 1079 0016 1CD1     		bne	.L87
 1080              		.loc 3 210 73 discriminator 2 view .LVU302
 1081 0018 1649     		ldr	r1, .L92+8
 1082              		.loc 3 210 69 discriminator 2 view .LVU303
 1083 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1084              		.loc 3 210 73 discriminator 2 view .LVU304
 1085 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1086              		.loc 3 210 57 discriminator 2 view .LVU305
 1087 001e 8B42     		cmp	r3, r1
 1088 0020 01D0     		beq	.L88
 1089              		.loc 3 210 85 discriminator 3 view .LVU306
 1090 0022 212B     		cmp	r3, #33
 1091 0024 15D1     		bne	.L87
 1092              	.L88:
 1093              	.LVL57:
 211:serial.c      **** 	    bcc = rxbuff2[0];
 212:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 1094              		.loc 3 212 30 is_stmt 1 view .LVU307
 1095              		.loc 3 212 49 is_stmt 0 view .LVU308
 1096 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 1097 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 1098 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 213:serial.c      ****             if (bcc == rxbuff2[6]) {
 1099              		.loc 3 213 16 view .LVU309
 1100 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1101              		.loc 3 212 34 view .LVU310
 1102 002e 83F00203 		eor	r3, r3, #2
 1103              	.LVL58:
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1104              		.loc 3 212 23 is_stmt 1 view .LVU311
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1105              		.loc 3 212 17 view .LVU312
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1106              		.loc 3 212 30 view .LVU313
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1107              		.loc 3 212 34 is_stmt 0 view .LVU314
 1108 0032 4340     		eors	r3, r3, r0
 1109              	.LVL59:
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1110              		.loc 3 212 23 is_stmt 1 view .LVU315
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1111              		.loc 3 212 17 view .LVU316
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1112              		.loc 3 212 30 view .LVU317
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1113              		.loc 3 212 34 is_stmt 0 view .LVU318
 1114 0034 6B40     		eors	r3, r3, r5
 1115              	.LVL60:
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1116              		.loc 3 212 23 is_stmt 1 view .LVU319
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1117              		.loc 3 212 17 view .LVU320
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1118              		.loc 3 212 30 view .LVU321
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1119              		.loc 3 212 34 is_stmt 0 view .LVU322
 1120 0036 4B40     		eors	r3, r3, r1
 1121              	.LVL61:
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1122              		.loc 3 212 23 is_stmt 1 view .LVU323
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1123              		.loc 3 212 17 view .LVU324
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1124              		.loc 3 212 30 view .LVU325
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1125              		.loc 3 212 23 view .LVU326
 212:serial.c      ****             if (bcc == rxbuff2[6]) {
 1126              		.loc 3 212 17 view .LVU327
 1127              		.loc 3 213 13 view .LVU328
 1128              		.loc 3 213 16 is_stmt 0 view .LVU329
 1129 0038 83F00303 		eor	r3, r3, #3
 1130              	.LVL62:
 1131              		.loc 3 213 16 view .LVU330
 1132 003c 9A42     		cmp	r2, r3
 1133 003e 08D1     		bne	.L87
 214:serial.c      **** 	       if ((rxbuff2[2] == 0xFF) && (rxbuff2[3] == 0xFF) && (rxbuff2[4] == 0xFF)) {
 1134              		.loc 3 214 9 is_stmt 1 view .LVU331
 1135              		.loc 3 214 58 is_stmt 0 view .LVU332
 1136 0040 2840     		ands	r0, r0, r5
 1137 0042 0140     		ands	r1, r1, r0
 1138 0044 FF29     		cmp	r1, #255
 1139 0046 04D1     		bne	.L87
 215:serial.c      **** 	       	  wm8978_volset(0);
 1140              		.loc 3 215 12 is_stmt 1 view .LVU333
 1141 0048 0020     		movs	r0, #0
 1142 004a FFF7FEFF 		bl	wm8978_volset
 1143              	.LVL63:
 216:serial.c      **** 	       	  NVIC_SystemReset();
 1144              		.loc 3 216 12 view .LVU334
 1145 004e FFF7FEFF 		bl	__NVIC_SystemReset
 1146              	.LVL64:
 1147              	.L87:
 217:serial.c      **** 	       }
 218:serial.c      **** 	    }
 219:serial.c      ****          }
 220:serial.c      ****          bzero(rxbuff2,rxcnt2);
 1148              		.loc 3 220 10 view .LVU335
 1149 0052 2288     		ldrh	r2, [r4]
 1150 0054 0648     		ldr	r0, .L92+4
 1151 0056 92B2     		uxth	r2, r2
 1152 0058 0021     		movs	r1, #0
 1153 005a FFF7FEFF 		bl	memset
 1154              	.LVL65:
 221:serial.c      ****          rxcnt2 = 0;
 1155              		.loc 3 221 10 view .LVU336
 1156              		.loc 3 221 17 is_stmt 0 view .LVU337
 1157 005e 0023     		movs	r3, #0
 1158 0060 2380     		strh	r3, [r4]	@ movhi
 1159              	.L86:
 222:serial.c      ****       }
 223:serial.c      ****       rx_led = 0;
 1160              		.loc 3 223 7 is_stmt 1 view .LVU338
 1161              		.loc 3 223 14 is_stmt 0 view .LVU339
 1162 0062 054B     		ldr	r3, .L92+12
 1163 0064 0022     		movs	r2, #0
 1164 0066 1A70     		strb	r2, [r3]
 224:serial.c      **** }
 1165              		.loc 3 224 1 view .LVU340
 1166 0068 38BD     		pop	{r3, r4, r5, pc}
 1167              	.L93:
 1168 006a 00BF     		.align	2
 1169              	.L92:
 1170 006c 00000000 		.word	.LANCHOR11
 1171 0070 00000000 		.word	.LANCHOR12
 1172 0074 00000000 		.word	.LANCHOR25
 1173 0078 00000000 		.word	.LANCHOR4
 1174              		.cfi_endproc
 1175              	.LFE141:
 1177              		.section	.text.receive_check3,"ax",%progbits
 1178              		.align	1
 1179              		.global	receive_check3
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1184              	receive_check3:
 1185              	.LFB142:
 225:serial.c      **** 
 226:serial.c      **** 
 227:serial.c      **** void receive_check3 (void)
 228:serial.c      **** {
 1186              		.loc 3 228 1 is_stmt 1 view -0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 229:serial.c      ****       unsigned char bcc,idx;
 1190              		.loc 3 229 7 view .LVU342
 230:serial.c      ****       if (rxcnt3) {
 1191              		.loc 3 230 7 view .LVU343
 228:serial.c      ****       unsigned char bcc,idx;
 1192              		.loc 3 228 1 is_stmt 0 view .LVU344
 1193 0000 38B5     		push	{r3, r4, r5, lr}
 1194              		.cfi_def_cfa_offset 16
 1195              		.cfi_offset 3, -16
 1196              		.cfi_offset 4, -12
 1197              		.cfi_offset 5, -8
 1198              		.cfi_offset 14, -4
 1199              		.loc 3 230 11 view .LVU345
 1200 0002 1A4C     		ldr	r4, .L101
 1201 0004 2388     		ldrh	r3, [r4]
 1202 0006 9BB2     		uxth	r3, r3
 1203              		.loc 3 230 10 view .LVU346
 1204 0008 5BB3     		cbz	r3, .L95
 231:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[5] == ETX) && ((rxbuff3[1] == this_id) || (rxbuff3[1] 
 1205              		.loc 3 231 10 is_stmt 1 view .LVU347
 1206              		.loc 3 231 22 is_stmt 0 view .LVU348
 1207 000a 194A     		ldr	r2, .L101+4
 1208              		.loc 3 231 13 view .LVU349
 1209 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1210 000e 022B     		cmp	r3, #2
 1211 0010 1FD1     		bne	.L96
 1212              		.loc 3 231 34 discriminator 1 view .LVU350
 1213 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 1214 0014 032B     		cmp	r3, #3
 1215 0016 1CD1     		bne	.L96
 1216              		.loc 3 231 73 discriminator 2 view .LVU351
 1217 0018 1649     		ldr	r1, .L101+8
 1218              		.loc 3 231 69 discriminator 2 view .LVU352
 1219 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1220              		.loc 3 231 73 discriminator 2 view .LVU353
 1221 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1222              		.loc 3 231 57 discriminator 2 view .LVU354
 1223 001e 8B42     		cmp	r3, r1
 1224 0020 01D0     		beq	.L97
 1225              		.loc 3 231 85 discriminator 3 view .LVU355
 1226 0022 212B     		cmp	r3, #33
 1227 0024 15D1     		bne	.L96
 1228              	.L97:
 1229              	.LVL66:
 232:serial.c      **** 	    bcc = rxbuff3[0];
 233:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff3[idx];
 1230              		.loc 3 233 30 is_stmt 1 view .LVU356
 1231              		.loc 3 233 49 is_stmt 0 view .LVU357
 1232 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 1233 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 1234 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 234:serial.c      ****             if (bcc == rxbuff3[6]) {
 1235              		.loc 3 234 16 view .LVU358
 1236 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1237              		.loc 3 233 34 view .LVU359
 1238 002e 83F00203 		eor	r3, r3, #2
 1239              	.LVL67:
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1240              		.loc 3 233 23 is_stmt 1 view .LVU360
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1241              		.loc 3 233 17 view .LVU361
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1242              		.loc 3 233 30 view .LVU362
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1243              		.loc 3 233 34 is_stmt 0 view .LVU363
 1244 0032 4340     		eors	r3, r3, r0
 1245              	.LVL68:
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1246              		.loc 3 233 23 is_stmt 1 view .LVU364
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1247              		.loc 3 233 17 view .LVU365
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1248              		.loc 3 233 30 view .LVU366
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1249              		.loc 3 233 34 is_stmt 0 view .LVU367
 1250 0034 6B40     		eors	r3, r3, r5
 1251              	.LVL69:
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1252              		.loc 3 233 23 is_stmt 1 view .LVU368
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1253              		.loc 3 233 17 view .LVU369
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1254              		.loc 3 233 30 view .LVU370
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1255              		.loc 3 233 34 is_stmt 0 view .LVU371
 1256 0036 4B40     		eors	r3, r3, r1
 1257              	.LVL70:
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1258              		.loc 3 233 23 is_stmt 1 view .LVU372
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1259              		.loc 3 233 17 view .LVU373
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1260              		.loc 3 233 30 view .LVU374
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1261              		.loc 3 233 23 view .LVU375
 233:serial.c      ****             if (bcc == rxbuff3[6]) {
 1262              		.loc 3 233 17 view .LVU376
 1263              		.loc 3 234 13 view .LVU377
 1264              		.loc 3 234 16 is_stmt 0 view .LVU378
 1265 0038 83F00303 		eor	r3, r3, #3
 1266              	.LVL71:
 1267              		.loc 3 234 16 view .LVU379
 1268 003c 9A42     		cmp	r2, r3
 1269 003e 08D1     		bne	.L96
 235:serial.c      **** 	       if ((rxbuff3[2] == 0xFF) && (rxbuff3[3] == 0xFF) && (rxbuff3[4] == 0xFF)) {
 1270              		.loc 3 235 9 is_stmt 1 view .LVU380
 1271              		.loc 3 235 58 is_stmt 0 view .LVU381
 1272 0040 2840     		ands	r0, r0, r5
 1273 0042 0140     		ands	r1, r1, r0
 1274 0044 FF29     		cmp	r1, #255
 1275 0046 04D1     		bne	.L96
 236:serial.c      **** 	       	  wm8978_volset(0);
 1276              		.loc 3 236 12 is_stmt 1 view .LVU382
 1277 0048 0020     		movs	r0, #0
 1278 004a FFF7FEFF 		bl	wm8978_volset
 1279              	.LVL72:
 237:serial.c      **** 	       	  NVIC_SystemReset();
 1280              		.loc 3 237 12 view .LVU383
 1281 004e FFF7FEFF 		bl	__NVIC_SystemReset
 1282              	.LVL73:
 1283              	.L96:
 238:serial.c      **** 	       }
 239:serial.c      **** 	    }
 240:serial.c      ****          }
 241:serial.c      ****          bzero(rxbuff3,rxcnt3);
 1284              		.loc 3 241 10 view .LVU384
 1285 0052 2288     		ldrh	r2, [r4]
 1286 0054 0648     		ldr	r0, .L101+4
 1287 0056 92B2     		uxth	r2, r2
 1288 0058 0021     		movs	r1, #0
 1289 005a FFF7FEFF 		bl	memset
 1290              	.LVL74:
 242:serial.c      ****          rxcnt3 = 0;
 1291              		.loc 3 242 10 view .LVU385
 1292              		.loc 3 242 17 is_stmt 0 view .LVU386
 1293 005e 0023     		movs	r3, #0
 1294 0060 2380     		strh	r3, [r4]	@ movhi
 1295              	.L95:
 243:serial.c      ****       }
 244:serial.c      ****       rx_led = 0;
 1296              		.loc 3 244 7 is_stmt 1 view .LVU387
 1297              		.loc 3 244 14 is_stmt 0 view .LVU388
 1298 0062 054B     		ldr	r3, .L101+12
 1299 0064 0022     		movs	r2, #0
 1300 0066 1A70     		strb	r2, [r3]
 245:serial.c      **** }
 1301              		.loc 3 245 1 view .LVU389
 1302 0068 38BD     		pop	{r3, r4, r5, pc}
 1303              	.L102:
 1304 006a 00BF     		.align	2
 1305              	.L101:
 1306 006c 00000000 		.word	.LANCHOR18
 1307 0070 00000000 		.word	.LANCHOR19
 1308 0074 00000000 		.word	.LANCHOR25
 1309 0078 00000000 		.word	.LANCHOR4
 1310              		.cfi_endproc
 1311              	.LFE142:
 1313              		.section	.text.uasrt_send,"ax",%progbits
 1314              		.align	1
 1315              		.global	uasrt_send
 1316              		.syntax unified
 1317              		.thumb
 1318              		.thumb_func
 1320              	uasrt_send:
 1321              	.LVL75:
 1322              	.LFB143:
 246:serial.c      **** 
 247:serial.c      **** 
 248:serial.c      **** void uasrt_send (unsigned char ch,char *buff,int length)
 249:serial.c      **** {
 1323              		.loc 3 249 1 is_stmt 1 view -0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 250:serial.c      ****       switch (ch) {
 1327              		.loc 3 250 7 view .LVU391
 1328 0000 0228     		cmp	r0, #2
 249:serial.c      ****       switch (ch) {
 1329              		.loc 3 249 1 is_stmt 0 view .LVU392
 1330 0002 38B5     		push	{r3, r4, r5, lr}
 1331              		.cfi_def_cfa_offset 16
 1332              		.cfi_offset 3, -16
 1333              		.cfi_offset 4, -12
 1334              		.cfi_offset 5, -8
 1335              		.cfi_offset 14, -4
 249:serial.c      ****       switch (ch) {
 1336              		.loc 3 249 1 view .LVU393
 1337 0004 0D46     		mov	r5, r1
 1338 0006 1446     		mov	r4, r2
 1339              		.loc 3 250 7 view .LVU394
 1340 0008 14D1     		bne	.L113
 251:serial.c      ****       	 case 1:
 252:serial.c      ****            while (tx1_busy);
 253:serial.c      ****            bzero(txbuff1,256);
 254:serial.c      ****            memcpy(txbuff1,buff,length);
 255:serial.c      ****            tx_enable1(length);
 256:serial.c      ****            break;
 257:serial.c      ****       	 case 2:
 258:serial.c      ****            while (tx2_busy);
 1341              		.loc 3 258 19 view .LVU395
 1342 000a 224A     		ldr	r2, .L115
 1343              	.LVL76:
 1344              	.L104:
 1345              		.loc 3 258 28 is_stmt 1 discriminator 1 view .LVU396
 1346              		.loc 3 258 18 discriminator 1 view .LVU397
 1347              		.loc 3 258 19 is_stmt 0 discriminator 1 view .LVU398
 1348 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1349              		.loc 3 258 18 discriminator 1 view .LVU399
 1350 000e 03F0FF01 		and	r1, r3, #255
 1351 0012 002B     		cmp	r3, #0
 1352 0014 FAD1     		bne	.L104
 259:serial.c      ****            bzero(txbuff2,256);
 1353              		.loc 3 259 12 is_stmt 1 view .LVU400
 1354 0016 4FF48072 		mov	r2, #256
 1355 001a 1F48     		ldr	r0, .L115+4
 1356              	.LVL77:
 1357              		.loc 3 259 12 is_stmt 0 view .LVU401
 1358 001c FFF7FEFF 		bl	memset
 1359              	.LVL78:
 260:serial.c      ****            memcpy(txbuff2,buff,length);
 1360              		.loc 3 260 12 is_stmt 1 view .LVU402
 1361 0020 2246     		mov	r2, r4
 1362 0022 2946     		mov	r1, r5
 1363 0024 1C48     		ldr	r0, .L115+4
 1364 0026 FFF7FEFF 		bl	memcpy
 1365              	.LVL79:
 261:serial.c      ****            tx_enable2(length);
 1366              		.loc 3 261 12 view .LVU403
 1367 002a E0B2     		uxtb	r0, r4
 262:serial.c      ****            break;
 263:serial.c      ****       	 case 3:
 264:serial.c      ****            while (tx3_busy);
 265:serial.c      ****            bzero(txbuff3,256);
 266:serial.c      ****            memcpy(txbuff3,buff,length);
 267:serial.c      ****            tx_enable3(length);
 268:serial.c      ****            break;
 269:serial.c      ****       	 case 0:
 270:serial.c      ****       	 default:
 271:serial.c      ****            return;
 272:serial.c      ****            break;
 273:serial.c      ****       }
 274:serial.c      **** }
 1368              		.loc 3 274 1 is_stmt 0 view .LVU404
 1369 002c BDE83840 		pop	{r3, r4, r5, lr}
 1370              		.cfi_remember_state
 1371              		.cfi_restore 14
 1372              		.cfi_restore 5
 1373              		.cfi_restore 4
 1374              		.cfi_restore 3
 1375              		.cfi_def_cfa_offset 0
 1376              	.LVL80:
 261:serial.c      ****            tx_enable2(length);
 1377              		.loc 3 261 12 view .LVU405
 1378 0030 FFF7FEBF 		b	tx_enable2
 1379              	.LVL81:
 1380              	.L113:
 1381              		.cfi_restore_state
 250:serial.c      ****       	 case 1:
 1382              		.loc 3 250 7 view .LVU406
 1383 0034 0328     		cmp	r0, #3
 1384 0036 14D1     		bne	.L114
 264:serial.c      ****            bzero(txbuff3,256);
 1385              		.loc 3 264 19 view .LVU407
 1386 0038 184A     		ldr	r2, .L115+8
 1387              	.LVL82:
 1388              	.L105:
 264:serial.c      ****            bzero(txbuff3,256);
 1389              		.loc 3 264 28 is_stmt 1 discriminator 1 view .LVU408
 264:serial.c      ****            bzero(txbuff3,256);
 1390              		.loc 3 264 18 discriminator 1 view .LVU409
 264:serial.c      ****            bzero(txbuff3,256);
 1391              		.loc 3 264 19 is_stmt 0 discriminator 1 view .LVU410
 1392 003a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 264:serial.c      ****            bzero(txbuff3,256);
 1393              		.loc 3 264 18 discriminator 1 view .LVU411
 1394 003c 03F0FF01 		and	r1, r3, #255
 1395 0040 002B     		cmp	r3, #0
 1396 0042 FAD1     		bne	.L105
 265:serial.c      ****            memcpy(txbuff3,buff,length);
 1397              		.loc 3 265 12 is_stmt 1 view .LVU412
 1398 0044 4FF48072 		mov	r2, #256
 1399 0048 1548     		ldr	r0, .L115+12
 1400              	.LVL83:
 265:serial.c      ****            memcpy(txbuff3,buff,length);
 1401              		.loc 3 265 12 is_stmt 0 view .LVU413
 1402 004a FFF7FEFF 		bl	memset
 1403              	.LVL84:
 266:serial.c      ****            tx_enable3(length);
 1404              		.loc 3 266 12 is_stmt 1 view .LVU414
 1405 004e 2246     		mov	r2, r4
 1406 0050 2946     		mov	r1, r5
 1407 0052 1348     		ldr	r0, .L115+12
 1408 0054 FFF7FEFF 		bl	memcpy
 1409              	.LVL85:
 267:serial.c      ****            break;
 1410              		.loc 3 267 12 view .LVU415
 1411 0058 E0B2     		uxtb	r0, r4
 1412              		.loc 3 274 1 is_stmt 0 view .LVU416
 1413 005a BDE83840 		pop	{r3, r4, r5, lr}
 1414              		.cfi_remember_state
 1415              		.cfi_restore 14
 1416              		.cfi_restore 5
 1417              		.cfi_restore 4
 1418              		.cfi_restore 3
 1419              		.cfi_def_cfa_offset 0
 1420              	.LVL86:
 267:serial.c      ****            break;
 1421              		.loc 3 267 12 view .LVU417
 1422 005e FFF7FEBF 		b	tx_enable3
 1423              	.LVL87:
 1424              	.L114:
 1425              		.cfi_restore_state
 250:serial.c      ****       	 case 1:
 1426              		.loc 3 250 7 view .LVU418
 1427 0062 0128     		cmp	r0, #1
 1428 0064 14D1     		bne	.L103
 252:serial.c      ****            bzero(txbuff1,256);
 1429              		.loc 3 252 19 view .LVU419
 1430 0066 0F4A     		ldr	r2, .L115+16
 1431              	.LVL88:
 1432              	.L107:
 252:serial.c      ****            bzero(txbuff1,256);
 1433              		.loc 3 252 28 is_stmt 1 discriminator 1 view .LVU420
 252:serial.c      ****            bzero(txbuff1,256);
 1434              		.loc 3 252 18 discriminator 1 view .LVU421
 252:serial.c      ****            bzero(txbuff1,256);
 1435              		.loc 3 252 19 is_stmt 0 discriminator 1 view .LVU422
 1436 0068 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 252:serial.c      ****            bzero(txbuff1,256);
 1437              		.loc 3 252 18 discriminator 1 view .LVU423
 1438 006a 03F0FF01 		and	r1, r3, #255
 1439 006e 002B     		cmp	r3, #0
 1440 0070 FAD1     		bne	.L107
 253:serial.c      ****            memcpy(txbuff1,buff,length);
 1441              		.loc 3 253 12 is_stmt 1 view .LVU424
 1442 0072 4FF48072 		mov	r2, #256
 1443 0076 0C48     		ldr	r0, .L115+20
 1444              	.LVL89:
 253:serial.c      ****            memcpy(txbuff1,buff,length);
 1445              		.loc 3 253 12 is_stmt 0 view .LVU425
 1446 0078 FFF7FEFF 		bl	memset
 1447              	.LVL90:
 254:serial.c      ****            tx_enable1(length);
 1448              		.loc 3 254 12 is_stmt 1 view .LVU426
 1449 007c 2246     		mov	r2, r4
 1450 007e 2946     		mov	r1, r5
 1451 0080 0948     		ldr	r0, .L115+20
 1452 0082 FFF7FEFF 		bl	memcpy
 1453              	.LVL91:
 255:serial.c      ****            break;
 1454              		.loc 3 255 12 view .LVU427
 1455 0086 E0B2     		uxtb	r0, r4
 1456              		.loc 3 274 1 is_stmt 0 view .LVU428
 1457 0088 BDE83840 		pop	{r3, r4, r5, lr}
 1458              		.cfi_remember_state
 1459              		.cfi_restore 14
 1460              		.cfi_restore 5
 1461              		.cfi_restore 4
 1462              		.cfi_restore 3
 1463              		.cfi_def_cfa_offset 0
 1464              	.LVL92:
 255:serial.c      ****            break;
 1465              		.loc 3 255 12 view .LVU429
 1466 008c FFF7FEBF 		b	tx_enable1
 1467              	.LVL93:
 1468              	.L103:
 1469              		.cfi_restore_state
 1470              		.loc 3 274 1 view .LVU430
 1471 0090 38BD     		pop	{r3, r4, r5, pc}
 1472              	.L116:
 1473 0092 00BF     		.align	2
 1474              	.L115:
 1475 0094 00000000 		.word	.LANCHOR17
 1476 0098 00000000 		.word	.LANCHOR16
 1477 009c 00000000 		.word	.LANCHOR24
 1478 00a0 00000000 		.word	.LANCHOR23
 1479 00a4 00000000 		.word	.LANCHOR10
 1480 00a8 00000000 		.word	.LANCHOR8
 1481              		.cfi_endproc
 1482              	.LFE143:
 1484              		.section	.text.s_printf,"ax",%progbits
 1485              		.align	1
 1486              		.global	s_printf
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1491              	s_printf:
 1492              	.LVL94:
 1493              	.LFB144:
 275:serial.c      **** 
 276:serial.c      **** 
 277:serial.c      **** void s_printf (unsigned char ch,char *form,...)
 278:serial.c      **** {
 1494              		.loc 3 278 1 is_stmt 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 4, pretend = 12, frame = 8
 1497              		@ frame_needed = 0, uses_anonymous_args = 1
 279:serial.c      ****       va_list argptr;
 1498              		.loc 3 279 7 view .LVU432
 280:serial.c      ****       va_start(argptr,form);
 1499              		.loc 3 280 7 view .LVU433
 278:serial.c      ****       va_list argptr;
 1500              		.loc 3 278 1 is_stmt 0 view .LVU434
 1501 0000 0EB4     		push	{r1, r2, r3}
 1502              		.cfi_def_cfa_offset 12
 1503              		.cfi_offset 1, -12
 1504              		.cfi_offset 2, -8
 1505              		.cfi_offset 3, -4
 1506 0002 33B5     		push	{r0, r1, r4, r5, lr}
 1507              		.cfi_def_cfa_offset 32
 1508              		.cfi_offset 4, -24
 1509              		.cfi_offset 5, -20
 1510              		.cfi_offset 14, -16
 281:serial.c      ****       vsprintf(sbuff,form,argptr);
 1511              		.loc 3 281 7 view .LVU435
 1512 0004 0A4D     		ldr	r5, .L118
 278:serial.c      ****       va_list argptr;
 1513              		.loc 3 278 1 view .LVU436
 1514 0006 05AA     		add	r2, sp, #20
 1515 0008 0446     		mov	r4, r0
 1516 000a 52F8041B 		ldr	r1, [r2], #4
 280:serial.c      ****       va_start(argptr,form);
 1517              		.loc 3 280 7 view .LVU437
 1518 000e 0192     		str	r2, [sp, #4]
 1519              		.loc 3 281 7 is_stmt 1 view .LVU438
 1520 0010 2846     		mov	r0, r5
 1521              	.LVL95:
 1522              		.loc 3 281 7 is_stmt 0 view .LVU439
 1523 0012 FFF7FEFF 		bl	vsprintf
 1524              	.LVL96:
 282:serial.c      ****       uasrt_send(ch,sbuff,strlen(sbuff));
 1525              		.loc 3 282 7 is_stmt 1 view .LVU440
 1526              		.loc 3 282 27 is_stmt 0 view .LVU441
 1527 0016 2846     		mov	r0, r5
 1528 0018 FFF7FEFF 		bl	strlen
 1529              	.LVL97:
 1530              		.loc 3 282 7 view .LVU442
 1531 001c 2946     		mov	r1, r5
 1532              		.loc 3 282 27 view .LVU443
 1533 001e 0246     		mov	r2, r0
 1534              		.loc 3 282 7 view .LVU444
 1535 0020 2046     		mov	r0, r4
 1536 0022 FFF7FEFF 		bl	uasrt_send
 1537              	.LVL98:
 283:serial.c      ****       va_end(argptr);
 1538              		.loc 3 283 7 is_stmt 1 view .LVU445
 284:serial.c      **** }
 1539              		.loc 3 284 1 is_stmt 0 view .LVU446
 1540 0026 02B0     		add	sp, sp, #8
 1541              		.cfi_def_cfa_offset 24
 1542              		@ sp needed
 1543 0028 BDE83040 		pop	{r4, r5, lr}
 1544              		.cfi_restore 14
 1545              		.cfi_restore 5
 1546              		.cfi_restore 4
 1547              		.cfi_def_cfa_offset 12
 1548 002c 03B0     		add	sp, sp, #12
 1549              		.cfi_restore 3
 1550              		.cfi_restore 2
 1551              		.cfi_restore 1
 1552              		.cfi_def_cfa_offset 0
 1553 002e 7047     		bx	lr
 1554              	.L119:
 1555              		.align	2
 1556              	.L118:
 1557 0030 00000000 		.word	.LANCHOR26
 1558              		.cfi_endproc
 1559              	.LFE144:
 1561              		.section	.text.serial_check,"ax",%progbits
 1562              		.align	1
 1563              		.global	serial_check
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1568              	serial_check:
 1569              	.LFB145:
 285:serial.c      **** 
 286:serial.c      **** 
 287:serial.c      **** void serial_check (void)
 288:serial.c      **** {
 1570              		.loc 3 288 1 is_stmt 1 view -0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 0
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 289:serial.c      ****       if ((rxcnt1 != 0) && (rxck1 >= 3)) {
 1574              		.loc 3 289 7 view .LVU448
 288:serial.c      ****       if ((rxcnt1 != 0) && (rxck1 >= 3)) {
 1575              		.loc 3 288 1 is_stmt 0 view .LVU449
 1576 0000 08B5     		push	{r3, lr}
 1577              		.cfi_def_cfa_offset 8
 1578              		.cfi_offset 3, -8
 1579              		.cfi_offset 14, -4
 1580              		.loc 3 289 19 view .LVU450
 1581 0002 134B     		ldr	r3, .L133
 1582 0004 1B88     		ldrh	r3, [r3]
 1583 0006 9BB2     		uxth	r3, r3
 1584              		.loc 3 289 10 view .LVU451
 1585 0008 3BB1     		cbz	r3, .L121
 1586              		.loc 3 289 35 discriminator 1 view .LVU452
 1587 000a 124B     		ldr	r3, .L133+4
 1588 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1589              		.loc 3 289 25 discriminator 1 view .LVU453
 1590 000e 022A     		cmp	r2, #2
 1591 0010 03D9     		bls	.L121
 290:serial.c      ****          rxck1 = 0;
 1592              		.loc 3 290 10 is_stmt 1 view .LVU454
 1593              		.loc 3 290 16 is_stmt 0 view .LVU455
 1594 0012 0022     		movs	r2, #0
 1595 0014 1A70     		strb	r2, [r3]
 291:serial.c      ****          receive_check1();
 1596              		.loc 3 291 10 is_stmt 1 view .LVU456
 1597 0016 FFF7FEFF 		bl	receive_check1
 1598              	.LVL99:
 1599              	.L121:
 292:serial.c      ****       }
 293:serial.c      ****       if ((rxcnt2 != 0) && (rxck2 >= 3)) {
 1600              		.loc 3 293 7 view .LVU457
 1601              		.loc 3 293 19 is_stmt 0 view .LVU458
 1602 001a 0F4B     		ldr	r3, .L133+8
 1603 001c 1B88     		ldrh	r3, [r3]
 1604 001e 9BB2     		uxth	r3, r3
 1605              		.loc 3 293 10 view .LVU459
 1606 0020 3BB1     		cbz	r3, .L122
 1607              		.loc 3 293 35 discriminator 1 view .LVU460
 1608 0022 0E4B     		ldr	r3, .L133+12
 1609 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1610              		.loc 3 293 25 discriminator 1 view .LVU461
 1611 0026 022A     		cmp	r2, #2
 1612 0028 03D9     		bls	.L122
 294:serial.c      ****          rxck2 = 0;
 1613              		.loc 3 294 10 is_stmt 1 view .LVU462
 1614              		.loc 3 294 16 is_stmt 0 view .LVU463
 1615 002a 0022     		movs	r2, #0
 1616 002c 1A70     		strb	r2, [r3]
 295:serial.c      ****          receive_check2();
 1617              		.loc 3 295 10 is_stmt 1 view .LVU464
 1618 002e FFF7FEFF 		bl	receive_check2
 1619              	.LVL100:
 1620              	.L122:
 296:serial.c      ****       }
 297:serial.c      ****       if ((rxcnt3 != 0) && (rxck3 >= 3)) {
 1621              		.loc 3 297 7 view .LVU465
 1622              		.loc 3 297 19 is_stmt 0 view .LVU466
 1623 0032 0B4B     		ldr	r3, .L133+16
 1624 0034 1B88     		ldrh	r3, [r3]
 1625 0036 9BB2     		uxth	r3, r3
 1626              		.loc 3 297 10 view .LVU467
 1627 0038 4BB1     		cbz	r3, .L120
 1628              		.loc 3 297 35 discriminator 1 view .LVU468
 1629 003a 0A4B     		ldr	r3, .L133+20
 1630 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1631              		.loc 3 297 25 discriminator 1 view .LVU469
 1632 003e 022A     		cmp	r2, #2
 1633 0040 05D9     		bls	.L120
 298:serial.c      ****          rxck3 = 0;
 1634              		.loc 3 298 10 is_stmt 1 view .LVU470
 1635              		.loc 3 298 16 is_stmt 0 view .LVU471
 1636 0042 0022     		movs	r2, #0
 1637 0044 1A70     		strb	r2, [r3]
 299:serial.c      ****          receive_check3();
 1638              		.loc 3 299 10 is_stmt 1 view .LVU472
 300:serial.c      ****       }
 301:serial.c      **** }
 1639              		.loc 3 301 1 is_stmt 0 view .LVU473
 1640 0046 BDE80840 		pop	{r3, lr}
 1641              		.cfi_remember_state
 1642              		.cfi_restore 14
 1643              		.cfi_restore 3
 1644              		.cfi_def_cfa_offset 0
 299:serial.c      ****          receive_check3();
 1645              		.loc 3 299 10 view .LVU474
 1646 004a FFF7FEBF 		b	receive_check3
 1647              	.LVL101:
 1648              	.L120:
 1649              		.cfi_restore_state
 1650              		.loc 3 301 1 view .LVU475
 1651 004e 08BD     		pop	{r3, pc}
 1652              	.L134:
 1653              		.align	2
 1654              	.L133:
 1655 0050 00000000 		.word	.LANCHOR2
 1656 0054 00000000 		.word	.LANCHOR5
 1657 0058 00000000 		.word	.LANCHOR11
 1658 005c 00000000 		.word	.LANCHOR13
 1659 0060 00000000 		.word	.LANCHOR18
 1660 0064 00000000 		.word	.LANCHOR20
 1661              		.cfi_endproc
 1662              	.LFE145:
 1664              		.section	.text.serial_init,"ax",%progbits
 1665              		.align	1
 1666              		.global	serial_init
 1667              		.syntax unified
 1668              		.thumb
 1669              		.thumb_func
 1671              	serial_init:
 1672              	.LFB146:
 302:serial.c      **** 
 303:serial.c      **** 
 304:serial.c      **** void serial_init (void)
 305:serial.c      **** {
 1673              		.loc 3 305 1 is_stmt 1 view -0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 24
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
 306:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 1677              		.loc 3 306 7 view .LVU477
 307:serial.c      ****       NVIC_InitTypeDef NVIC_InitStructure;
 1678              		.loc 3 307 7 view .LVU478
 308:serial.c      ****       USART1_PORT = 0;
 1679              		.loc 3 308 7 view .LVU479
 309:serial.c      ****       USART3_PORT = 0;
 310:serial.c      ****       rxcnt1 = 0;
 1680              		.loc 3 310 14 is_stmt 0 view .LVU480
 1681 0000 944A     		ldr	r2, .L144
 308:serial.c      ****       USART1_PORT = 0;
 1682              		.loc 3 308 19 view .LVU481
 1683 0002 0023     		movs	r3, #0
 305:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 1684              		.loc 3 305 1 view .LVU482
 1685 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 1686              		.cfi_def_cfa_offset 20
 1687              		.cfi_offset 4, -20
 1688              		.cfi_offset 5, -16
 1689              		.cfi_offset 6, -12
 1690              		.cfi_offset 7, -8
 1691              		.cfi_offset 14, -4
 1692              		.loc 3 310 14 view .LVU483
 1693 0006 1380     		strh	r3, [r2]	@ movhi
 311:serial.c      ****       txcnt1 = 0;
 1694              		.loc 3 311 14 view .LVU484
 1695 0008 934A     		ldr	r2, .L144+4
 308:serial.c      ****       USART3_PORT = 0;
 1696              		.loc 3 308 19 view .LVU485
 1697 000a 944C     		ldr	r4, .L144+8
 1698              		.loc 3 311 14 view .LVU486
 1699 000c 1380     		strh	r3, [r2]	@ movhi
 312:serial.c      ****       maxtx1 = 0;
 1700              		.loc 3 312 14 view .LVU487
 1701 000e 944A     		ldr	r2, .L144+12
 309:serial.c      ****       rxcnt1 = 0;
 1702              		.loc 3 309 19 view .LVU488
 1703 0010 944D     		ldr	r5, .L144+16
 1704              		.loc 3 312 14 view .LVU489
 1705 0012 1380     		strh	r3, [r2]	@ movhi
 313:serial.c      ****       rxcnt2 = 0;
 1706              		.loc 3 313 14 view .LVU490
 1707 0014 944A     		ldr	r2, .L144+20
 308:serial.c      ****       USART3_PORT = 0;
 1708              		.loc 3 308 19 view .LVU491
 1709 0016 2370     		strb	r3, [r4]
 309:serial.c      ****       rxcnt1 = 0;
 1710              		.loc 3 309 7 is_stmt 1 view .LVU492
 1711              		.loc 3 313 14 is_stmt 0 view .LVU493
 1712 0018 1380     		strh	r3, [r2]	@ movhi
 314:serial.c      ****       txcnt2 = 0;
 1713              		.loc 3 314 14 view .LVU494
 1714 001a 944A     		ldr	r2, .L144+24
 309:serial.c      ****       rxcnt1 = 0;
 1715              		.loc 3 309 19 view .LVU495
 1716 001c 2B70     		strb	r3, [r5]
 310:serial.c      ****       txcnt1 = 0;
 1717              		.loc 3 310 7 is_stmt 1 view .LVU496
 311:serial.c      ****       maxtx1 = 0;
 1718              		.loc 3 311 7 view .LVU497
 312:serial.c      ****       rxcnt2 = 0;
 1719              		.loc 3 312 7 view .LVU498
 313:serial.c      ****       txcnt2 = 0;
 1720              		.loc 3 313 7 view .LVU499
 1721              		.loc 3 314 7 view .LVU500
 1722              		.loc 3 314 14 is_stmt 0 view .LVU501
 1723 001e 1380     		strh	r3, [r2]	@ movhi
 315:serial.c      ****       maxtx2 = 0;
 1724              		.loc 3 315 7 is_stmt 1 view .LVU502
 1725              		.loc 3 315 14 is_stmt 0 view .LVU503
 1726 0020 934A     		ldr	r2, .L144+28
 1727 0022 1380     		strh	r3, [r2]	@ movhi
 316:serial.c      ****       rxcnt3 = 0;
 1728              		.loc 3 316 7 is_stmt 1 view .LVU504
 1729              		.loc 3 316 14 is_stmt 0 view .LVU505
 1730 0024 934A     		ldr	r2, .L144+32
 1731 0026 1380     		strh	r3, [r2]	@ movhi
 317:serial.c      ****       txcnt3 = 0;
 1732              		.loc 3 317 7 is_stmt 1 view .LVU506
 1733              		.loc 3 317 14 is_stmt 0 view .LVU507
 1734 0028 934A     		ldr	r2, .L144+36
 1735 002a 1380     		strh	r3, [r2]	@ movhi
 318:serial.c      ****       maxtx3 = 0;
 1736              		.loc 3 318 7 is_stmt 1 view .LVU508
 1737              		.loc 3 318 14 is_stmt 0 view .LVU509
 1738 002c 934A     		ldr	r2, .L144+40
 305:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 1739              		.loc 3 305 1 view .LVU510
 1740 002e 87B0     		sub	sp, sp, #28
 1741              		.cfi_def_cfa_offset 48
 1742              		.loc 3 318 14 view .LVU511
 1743 0030 1380     		strh	r3, [r2]	@ movhi
 319:serial.c      ****       /* Enable the USART1 Interrupt */
 320:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 1744              		.loc 3 320 7 is_stmt 1 view .LVU512
 1745              		.loc 3 320 42 is_stmt 0 view .LVU513
 1746 0032 2522     		movs	r2, #37
 1747 0034 8DF80420 		strb	r2, [sp, #4]
 321:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1748              		.loc 3 321 7 is_stmt 1 view .LVU514
 322:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1749              		.loc 3 322 53 is_stmt 0 view .LVU515
 1750 0038 8DF80630 		strb	r3, [sp, #6]
 321:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1751              		.loc 3 321 60 view .LVU516
 1752 003c 0222     		movs	r2, #2
 323:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1753              		.loc 3 323 45 view .LVU517
 1754 003e 0123     		movs	r3, #1
 324:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1755              		.loc 3 324 7 view .LVU518
 1756 0040 01A8     		add	r0, sp, #4
 323:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1757              		.loc 3 323 45 view .LVU519
 1758 0042 8DF80730 		strb	r3, [sp, #7]
 321:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1759              		.loc 3 321 60 view .LVU520
 1760 0046 8DF80520 		strb	r2, [sp, #5]
 322:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1761              		.loc 3 322 7 is_stmt 1 view .LVU521
 323:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1762              		.loc 3 323 7 view .LVU522
 1763              		.loc 3 324 7 view .LVU523
 1764 004a FFF7FEFF 		bl	NVIC_Init
 1765              	.LVL102:
 325:serial.c      ****       switch (USART1_PORT) {
 1766              		.loc 3 325 7 view .LVU524
 1767 004e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1768 0050 002B     		cmp	r3, #0
 1769 0052 00F0A380 		beq	.L136
 1770 0056 012B     		cmp	r3, #1
 1771 0058 00F0B980 		beq	.L137
 1772              	.L138:
 326:serial.c      ****          case 0:
 327:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 328:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 329:serial.c      ****            GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 330:serial.c      ****            GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 331:serial.c      ****            break;
 332:serial.c      ****          case 1:
 333:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
 334:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
 335:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 336:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 337:serial.c      ****            break;
 338:serial.c      ****       }
 339:serial.c      ****       /* Enable the USART2 Interrupt */
 340:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 1773              		.loc 3 340 7 view .LVU525
 1774              		.loc 3 340 42 is_stmt 0 view .LVU526
 1775 005c 2623     		movs	r3, #38
 341:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1776              		.loc 3 341 60 view .LVU527
 1777 005e 0224     		movs	r4, #2
 342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 343:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1778              		.loc 3 343 45 view .LVU528
 1779 0060 0126     		movs	r6, #1
 342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1780              		.loc 3 342 53 view .LVU529
 1781 0062 0027     		movs	r7, #0
 344:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1782              		.loc 3 344 7 view .LVU530
 1783 0064 01A8     		add	r0, sp, #4
 340:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1784              		.loc 3 340 42 view .LVU531
 1785 0066 8DF80430 		strb	r3, [sp, #4]
 341:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1786              		.loc 3 341 7 is_stmt 1 view .LVU532
 341:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1787              		.loc 3 341 60 is_stmt 0 view .LVU533
 1788 006a 8DF80540 		strb	r4, [sp, #5]
 342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1789              		.loc 3 342 7 is_stmt 1 view .LVU534
 342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1790              		.loc 3 342 53 is_stmt 0 view .LVU535
 1791 006e 8DF80670 		strb	r7, [sp, #6]
 343:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1792              		.loc 3 343 7 is_stmt 1 view .LVU536
 343:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1793              		.loc 3 343 45 is_stmt 0 view .LVU537
 1794 0072 8DF80760 		strb	r6, [sp, #7]
 1795              		.loc 3 344 7 is_stmt 1 view .LVU538
 1796 0076 FFF7FEFF 		bl	NVIC_Init
 1797              	.LVL103:
 345:serial.c      ****       GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 1798              		.loc 3 345 7 view .LVU539
 1799 007a 8148     		ldr	r0, .L144+44
 1800 007c 0722     		movs	r2, #7
 1801 007e 2146     		mov	r1, r4
 1802 0080 FFF7FEFF 		bl	GPIO_PinAFConfig
 1803              	.LVL104:
 346:serial.c      ****       GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 1804              		.loc 3 346 7 view .LVU540
 1805 0084 7E48     		ldr	r0, .L144+44
 1806 0086 0722     		movs	r2, #7
 1807 0088 0321     		movs	r1, #3
 1808 008a FFF7FEFF 		bl	GPIO_PinAFConfig
 1809              	.LVL105:
 347:serial.c      ****       GPIO_Init_Pin(GPIOA,TXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1810              		.loc 3 347 7 view .LVU541
 1811 008e 7C48     		ldr	r0, .L144+44
 1812 0090 1223     		movs	r3, #18
 1813 0092 0322     		movs	r2, #3
 1814 0094 0421     		movs	r1, #4
 1815 0096 FFF7FEFF 		bl	GPIO_Init_Pin
 1816              	.LVL106:
 348:serial.c      ****       GPIO_Init_Pin(GPIOA,RXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1817              		.loc 3 348 7 view .LVU542
 1818 009a 7948     		ldr	r0, .L144+44
 1819 009c 1223     		movs	r3, #18
 1820 009e 0322     		movs	r2, #3
 1821 00a0 0821     		movs	r1, #8
 1822 00a2 FFF7FEFF 		bl	GPIO_Init_Pin
 1823              	.LVL107:
 349:serial.c      ****       /* Enable the USART3 Interrupt */
 350:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 1824              		.loc 3 350 7 view .LVU543
 1825              		.loc 3 350 42 is_stmt 0 view .LVU544
 1826 00a6 2723     		movs	r3, #39
 351:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 352:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 353:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 354:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1827              		.loc 3 354 7 view .LVU545
 1828 00a8 01A8     		add	r0, sp, #4
 350:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1829              		.loc 3 350 42 view .LVU546
 1830 00aa 8DF80430 		strb	r3, [sp, #4]
 351:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1831              		.loc 3 351 7 is_stmt 1 view .LVU547
 351:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 1832              		.loc 3 351 60 is_stmt 0 view .LVU548
 1833 00ae 8DF80540 		strb	r4, [sp, #5]
 352:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1834              		.loc 3 352 7 is_stmt 1 view .LVU549
 352:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1835              		.loc 3 352 53 is_stmt 0 view .LVU550
 1836 00b2 8DF80670 		strb	r7, [sp, #6]
 353:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1837              		.loc 3 353 7 is_stmt 1 view .LVU551
 353:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 1838              		.loc 3 353 45 is_stmt 0 view .LVU552
 1839 00b6 8DF80760 		strb	r6, [sp, #7]
 1840              		.loc 3 354 7 is_stmt 1 view .LVU553
 1841 00ba FFF7FEFF 		bl	NVIC_Init
 1842              	.LVL108:
 355:serial.c      ****       switch (USART3_PORT) {
 1843              		.loc 3 355 7 view .LVU554
 1844 00be 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1845 00c0 B342     		cmp	r3, r6
 1846 00c2 00F09980 		beq	.L139
 1847 00c6 A342     		cmp	r3, r4
 1848 00c8 00F0AD80 		beq	.L140
 1849 00cc BBB9     		cbnz	r3, .L141
 356:serial.c      ****       	 case 0:
 357:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 1850              		.loc 3 357 12 view .LVU555
 1851 00ce 6D48     		ldr	r0, .L144+48
 1852 00d0 0722     		movs	r2, #7
 1853 00d2 0A21     		movs	r1, #10
 1854 00d4 FFF7FEFF 		bl	GPIO_PinAFConfig
 1855              	.LVL109:
 358:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
 1856              		.loc 3 358 12 view .LVU556
 1857 00d8 6A48     		ldr	r0, .L144+48
 1858 00da 0722     		movs	r2, #7
 1859 00dc 0B21     		movs	r1, #11
 1860 00de FFF7FEFF 		bl	GPIO_PinAFConfig
 1861              	.LVL110:
 359:serial.c      ****            /* Configure USART3 TX (PB10) */
 360:serial.c      ****            GPIO_Init_Pin(GPIOB,TXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1862              		.loc 3 360 12 view .LVU557
 1863 00e2 6848     		ldr	r0, .L144+48
 1864 00e4 1223     		movs	r3, #18
 1865 00e6 0322     		movs	r2, #3
 1866 00e8 4FF48061 		mov	r1, #1024
 1867 00ec FFF7FEFF 		bl	GPIO_Init_Pin
 1868              	.LVL111:
 361:serial.c      ****            /* Configure USART3 TX (PB10) */
 362:serial.c      ****            GPIO_Init_Pin(GPIOB,RXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1869              		.loc 3 362 12 view .LVU558
 1870 00f0 6448     		ldr	r0, .L144+48
 1871 00f2 1223     		movs	r3, #18
 1872 00f4 0322     		movs	r2, #3
 1873 00f6 4FF40061 		mov	r1, #2048
 1874              	.L143:
 363:serial.c      ****            break;
 364:serial.c      ****          case 1:
 365:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3);
 366:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3);
 367:serial.c      ****            /* Configure USART3 TX (PC10) */
 368:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 369:serial.c      ****            /* Configure USART3 RX (PC11) */
 370:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 371:serial.c      ****            break;
 372:serial.c      ****          case 2:
 373:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
 374:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
 375:serial.c      ****            /* Configure USART3 TX (PD8) */
 376:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 377:serial.c      ****            /* Configure USART3 RX (PD9) */
 378:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1875              		.loc 3 378 12 is_stmt 0 view .LVU559
 1876 00fa FFF7FEFF 		bl	GPIO_Init_Pin
 1877              	.LVL112:
 379:serial.c      ****            break;
 1878              		.loc 3 379 12 is_stmt 1 view .LVU560
 1879              	.L141:
 380:serial.c      ****       }
 381:serial.c      ****       USART_InitStructure.USART_BaudRate = 2000000;
 1880              		.loc 3 381 7 view .LVU561
 382:serial.c      ****       USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1881              		.loc 3 382 7 view .LVU562
 383:serial.c      ****       USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1882              		.loc 3 383 7 view .LVU563
 384:serial.c      ****       USART_InitStructure.USART_Parity = USART_Parity_No;
 1883              		.loc 3 384 7 view .LVU564
 385:serial.c      ****       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1884              		.loc 3 385 7 view .LVU565
 386:serial.c      ****       USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1885              		.loc 3 386 7 view .LVU566
 382:serial.c      ****       USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1886              		.loc 3 382 44 is_stmt 0 view .LVU567
 1887 00fe 624A     		ldr	r2, .L144+52
 387:serial.c      ****       USART_DeInit(USART1);
 1888              		.loc 3 387 7 view .LVU568
 1889 0100 6248     		ldr	r0, .L144+56
 382:serial.c      ****       USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1890              		.loc 3 382 44 view .LVU569
 1891 0102 0023     		movs	r3, #0
 1892 0104 CDE90223 		strd	r2, r3, [sp, #8]
 384:serial.c      ****       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1893              		.loc 3 384 40 view .LVU570
 1894 0108 4FF44022 		mov	r2, #786432
 385:serial.c      ****       USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1895              		.loc 3 385 53 view .LVU571
 1896 010c ADF81430 		strh	r3, [sp, #20]	@ movhi
 1897              		.loc 3 387 7 is_stmt 1 view .LVU572
 384:serial.c      ****       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1898              		.loc 3 384 40 is_stmt 0 view .LVU573
 1899 0110 0492     		str	r2, [sp, #16]
 1900              		.loc 3 387 7 view .LVU574
 1901 0112 FFF7FEFF 		bl	USART_DeInit
 1902              	.LVL113:
 388:serial.c      ****       /* Enable USART1 clock */
 389:serial.c      ****       RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 1903              		.loc 3 389 7 is_stmt 1 view .LVU575
 1904 0116 0121     		movs	r1, #1
 1905 0118 1020     		movs	r0, #16
 1906 011a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 1907              	.LVL114:
 390:serial.c      ****       /* Configure USART1 */
 391:serial.c      ****       USART_Init(USART1, &USART_InitStructure);
 1908              		.loc 3 391 7 view .LVU576
 1909 011e 02A9     		add	r1, sp, #8
 1910 0120 5A48     		ldr	r0, .L144+56
 1911 0122 FFF7FEFF 		bl	USART_Init
 1912              	.LVL115:
 392:serial.c      ****       /* Enable USART1 Receive and Transmit interrupts */
 393:serial.c      ****       USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 1913              		.loc 3 393 7 view .LVU577
 1914 0126 0122     		movs	r2, #1
 1915 0128 5848     		ldr	r0, .L144+56
 1916 012a 40F22551 		movw	r1, #1317
 1917 012e FFF7FEFF 		bl	USART_ITConfig
 1918              	.LVL116:
 394:serial.c      ****       /* Enable the USART1 */
 395:serial.c      ****       USART_Cmd(USART1, ENABLE);
 1919              		.loc 3 395 7 view .LVU578
 1920 0132 0121     		movs	r1, #1
 1921 0134 5548     		ldr	r0, .L144+56
 1922 0136 FFF7FEFF 		bl	USART_Cmd
 1923              	.LVL117:
 396:serial.c      ****       USART_DeInit(USART2);
 1924              		.loc 3 396 7 view .LVU579
 1925 013a 5548     		ldr	r0, .L144+60
 1926 013c FFF7FEFF 		bl	USART_DeInit
 1927              	.LVL118:
 397:serial.c      ****       /* Enable USART2 clock */
 398:serial.c      ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 1928              		.loc 3 398 7 view .LVU580
 1929 0140 0121     		movs	r1, #1
 1930 0142 4FF40030 		mov	r0, #131072
 1931 0146 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1932              	.LVL119:
 399:serial.c      ****       /* Configure USART2 */
 400:serial.c      ****       USART_Init(USART2, &USART_InitStructure);
 1933              		.loc 3 400 7 view .LVU581
 1934 014a 02A9     		add	r1, sp, #8
 1935 014c 5048     		ldr	r0, .L144+60
 1936 014e FFF7FEFF 		bl	USART_Init
 1937              	.LVL120:
 401:serial.c      ****       /* Enable USART2 Receive and Transmit interrupts */
 402:serial.c      ****       USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 1938              		.loc 3 402 7 view .LVU582
 1939 0152 0122     		movs	r2, #1
 1940 0154 4E48     		ldr	r0, .L144+60
 1941 0156 40F22551 		movw	r1, #1317
 1942 015a FFF7FEFF 		bl	USART_ITConfig
 1943              	.LVL121:
 403:serial.c      ****       /* Enable the USART2 */
 404:serial.c      ****       USART_Cmd(USART2, ENABLE);
 1944              		.loc 3 404 7 view .LVU583
 1945 015e 0121     		movs	r1, #1
 1946 0160 4B48     		ldr	r0, .L144+60
 1947 0162 FFF7FEFF 		bl	USART_Cmd
 1948              	.LVL122:
 405:serial.c      ****       USART_DeInit(USART3);
 1949              		.loc 3 405 7 view .LVU584
 1950 0166 4B48     		ldr	r0, .L144+64
 1951 0168 FFF7FEFF 		bl	USART_DeInit
 1952              	.LVL123:
 406:serial.c      ****       /* Enable USART3 clock */
 407:serial.c      ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 1953              		.loc 3 407 7 view .LVU585
 1954 016c 0121     		movs	r1, #1
 1955 016e 4FF48020 		mov	r0, #262144
 1956 0172 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1957              	.LVL124:
 408:serial.c      ****       /* Configure USART3 */
 409:serial.c      ****       USART_Init(USART3, &USART_InitStructure);
 1958              		.loc 3 409 7 view .LVU586
 1959 0176 02A9     		add	r1, sp, #8
 1960 0178 4648     		ldr	r0, .L144+64
 1961 017a FFF7FEFF 		bl	USART_Init
 1962              	.LVL125:
 410:serial.c      ****       /* Enable USART3 Receive and Transmit interrupts */
 411:serial.c      ****       USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 1963              		.loc 3 411 7 view .LVU587
 1964 017e 0122     		movs	r2, #1
 1965 0180 4448     		ldr	r0, .L144+64
 1966 0182 40F22551 		movw	r1, #1317
 1967 0186 FFF7FEFF 		bl	USART_ITConfig
 1968              	.LVL126:
 412:serial.c      ****       /* Enable the USART3 */
 413:serial.c      ****       USART_Cmd(USART3, ENABLE);
 1969              		.loc 3 413 7 view .LVU588
 1970 018a 4248     		ldr	r0, .L144+64
 1971 018c 0121     		movs	r1, #1
 1972 018e FFF7FEFF 		bl	USART_Cmd
 1973              	.LVL127:
 414:serial.c      ****       this_id = 1;
 1974              		.loc 3 414 7 view .LVU589
 1975              		.loc 3 414 15 is_stmt 0 view .LVU590
 1976 0192 414B     		ldr	r3, .L144+68
 1977 0194 0122     		movs	r2, #1
 1978 0196 1A70     		strb	r2, [r3]
 415:serial.c      **** }...
 1979              		.loc 3 415 1 view .LVU591
 1980 0198 07B0     		add	sp, sp, #28
 1981              		.cfi_remember_state
 1982              		.cfi_def_cfa_offset 20
 1983              		@ sp needed
 1984 019a F0BD     		pop	{r4, r5, r6, r7, pc}
 1985              	.L136:
 1986              		.cfi_restore_state
 327:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 1987              		.loc 3 327 12 is_stmt 1 view .LVU592
 1988 019c 3848     		ldr	r0, .L144+44
 1989 019e 0722     		movs	r2, #7
 1990 01a0 0921     		movs	r1, #9
 1991 01a2 FFF7FEFF 		bl	GPIO_PinAFConfig
 1992              	.LVL128:
 328:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 1993              		.loc 3 328 12 view .LVU593
 1994 01a6 3648     		ldr	r0, .L144+44
 1995 01a8 0722     		movs	r2, #7
 1996 01aa 0A21     		movs	r1, #10
 1997 01ac FFF7FEFF 		bl	GPIO_PinAFConfig
 1998              	.LVL129:
 329:serial.c      ****            GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 1999              		.loc 3 329 12 view .LVU594
 2000 01b0 3348     		ldr	r0, .L144+44
 2001 01b2 1223     		movs	r3, #18
 2002 01b4 0322     		movs	r2, #3
 2003 01b6 4FF40071 		mov	r1, #512
 2004 01ba FFF7FEFF 		bl	GPIO_Init_Pin
 2005              	.LVL130:
 330:serial.c      ****            GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2006              		.loc 3 330 12 view .LVU595
 2007 01be 3048     		ldr	r0, .L144+44
 2008 01c0 1223     		movs	r3, #18
 2009 01c2 0322     		movs	r2, #3
 2010 01c4 4FF48061 		mov	r1, #1024
 2011              	.L142:
 336:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2012              		.loc 3 336 12 is_stmt 0 view .LVU596
 2013 01c8 FFF7FEFF 		bl	GPIO_Init_Pin
 2014              	.LVL131:
 337:serial.c      ****            break;
 2015              		.loc 3 337 12 is_stmt 1 view .LVU597
 2016 01cc 46E7     		b	.L138
 2017              	.L137:
 333:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
 2018              		.loc 3 333 12 view .LVU598
 2019 01ce 2D48     		ldr	r0, .L144+48
 2020 01d0 0722     		movs	r2, #7
 2021 01d2 0621     		movs	r1, #6
 2022 01d4 FFF7FEFF 		bl	GPIO_PinAFConfig
 2023              	.LVL132:
 334:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
 2024              		.loc 3 334 12 view .LVU599
 2025 01d8 0722     		movs	r2, #7
 2026 01da 1146     		mov	r1, r2
 2027 01dc 2948     		ldr	r0, .L144+48
 2028 01de FFF7FEFF 		bl	GPIO_PinAFConfig
 2029              	.LVL133:
 335:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2030              		.loc 3 335 12 view .LVU600
 2031 01e2 2848     		ldr	r0, .L144+48
 2032 01e4 1223     		movs	r3, #18
 2033 01e6 0322     		movs	r2, #3
 2034 01e8 4021     		movs	r1, #64
 2035 01ea FFF7FEFF 		bl	GPIO_Init_Pin
 2036              	.LVL134:
 336:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2037              		.loc 3 336 12 view .LVU601
 2038 01ee 2548     		ldr	r0, .L144+48
 2039 01f0 1223     		movs	r3, #18
 2040 01f2 0322     		movs	r2, #3
 2041 01f4 8021     		movs	r1, #128
 2042 01f6 E7E7     		b	.L142
 2043              	.L139:
 365:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3);
 2044              		.loc 3 365 12 view .LVU602
 2045 01f8 2848     		ldr	r0, .L144+72
 2046 01fa 0722     		movs	r2, #7
 2047 01fc 0A21     		movs	r1, #10
 2048 01fe FFF7FEFF 		bl	GPIO_PinAFConfig
 2049              	.LVL135:
 366:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3);
 2050              		.loc 3 366 12 view .LVU603
 2051 0202 2648     		ldr	r0, .L144+72
 2052 0204 0722     		movs	r2, #7
 2053 0206 0B21     		movs	r1, #11
 2054 0208 FFF7FEFF 		bl	GPIO_PinAFConfig
 2055              	.LVL136:
 368:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2056              		.loc 3 368 12 view .LVU604
 2057 020c 2348     		ldr	r0, .L144+72
 2058 020e 1223     		movs	r3, #18
 2059 0210 0322     		movs	r2, #3
 2060 0212 4FF48061 		mov	r1, #1024
 2061 0216 FFF7FEFF 		bl	GPIO_Init_Pin
 2062              	.LVL137:
 370:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2063              		.loc 3 370 12 view .LVU605
 2064 021a 2048     		ldr	r0, .L144+72
 2065 021c 1223     		movs	r3, #18
 2066 021e 0322     		movs	r2, #3
 2067 0220 4FF40061 		mov	r1, #2048
 2068 0224 69E7     		b	.L143
 2069              	.L140:
 373:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
 2070              		.loc 3 373 12 view .LVU606
 2071 0226 1E48     		ldr	r0, .L144+76
 2072 0228 0722     		movs	r2, #7
 2073 022a 0821     		movs	r1, #8
 2074 022c FFF7FEFF 		bl	GPIO_PinAFConfig
 2075              	.LVL138:
 374:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
 2076              		.loc 3 374 12 view .LVU607
 2077 0230 1B48     		ldr	r0, .L144+76
 2078 0232 0722     		movs	r2, #7
 2079 0234 0921     		movs	r1, #9
 2080 0236 FFF7FEFF 		bl	GPIO_PinAFConfig
 2081              	.LVL139:
 376:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2082              		.loc 3 376 12 view .LVU608
 2083 023a 1948     		ldr	r0, .L144+76
 2084 023c 1223     		movs	r3, #18
 2085 023e 0322     		movs	r2, #3
 2086 0240 4FF48071 		mov	r1, #256
 2087 0244 FFF7FEFF 		bl	GPIO_Init_Pin
 2088              	.LVL140:
 378:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 2089              		.loc 3 378 12 view .LVU609
 2090 0248 1548     		ldr	r0, .L144+76
 2091 024a 1223     		movs	r3, #18
 2092 024c 0322     		movs	r2, #3
 2093 024e 4FF40071 		mov	r1, #512
 2094 0252 52E7     		b	.L143
 2095              	.L145:
 2096              		.align	2
 2097              	.L144:
 2098 0254 00000000 		.word	.LANCHOR2
 2099 0258 00000000 		.word	.LANCHOR6
 2100 025c 00000000 		.word	.LANCHOR27
 2101 0260 00000000 		.word	.LANCHOR7
 2102 0264 00000000 		.word	.LANCHOR28
 2103 0268 00000000 		.word	.LANCHOR11
 2104 026c 00000000 		.word	.LANCHOR14
 2105 0270 00000000 		.word	.LANCHOR15
 2106 0274 00000000 		.word	.LANCHOR18
 2107 0278 00000000 		.word	.LANCHOR21
 2108 027c 00000000 		.word	.LANCHOR22
 2109 0280 00000240 		.word	1073872896
 2110 0284 00040240 		.word	1073873920
 2111 0288 80841E00 		.word	2000000
 2112 028c 00100140 		.word	1073811456
 2113 0290 00440040 		.word	1073759232
 2114 0294 00480040 		.word	1073760256
 2115 0298 00000000 		.word	.LANCHOR25
 2116 029c 00080240 		.word	1073874944
 2117 02a0 000C0240 		.word	1073875968
 2118              		.cfi_endproc
 2119              	.LFE146:
 2121              		.global	sbuff
 2122              		.global	USART3_PORT
 2123              		.global	USART1_PORT
 2124              		.global	txbuff3
 2125              		.global	rxbuff3
 2126              		.global	txbuff2
 2127              		.global	rxbuff2
 2128              		.global	txbuff1
 2129              		.global	rxbuff1
 2130              		.global	flash_para
 2131              		.global	flash_address
 2132              		.global	tx3_busy
 2133              		.global	tx2_busy
 2134              		.global	tx1_busy
 2135              		.global	this_id
 2136              		.global	tx_led
 2137              		.global	rx_led
 2138              		.global	rxck3
 2139              		.global	rxck2
 2140              		.global	rxck1
 2141              		.global	maxtx3
 2142              		.global	txcnt3
 2143              		.global	rxcnt3
 2144              		.global	maxtx2
 2145              		.global	txcnt2
 2146              		.global	rxcnt2
 2147              		.global	maxtx1
 2148              		.global	txcnt1
 2149              		.global	rxcnt1
 2150              		.section	.bss.USART1_PORT,"aw",%nobits
 2151              		.set	.LANCHOR27,. + 0
 2154              	USART1_PORT:
 2155 0000 00       		.space	1
 2156              		.section	.bss.USART3_PORT,"aw",%nobits
 2157              		.set	.LANCHOR28,. + 0
 2160              	USART3_PORT:
 2161 0000 00       		.space	1
 2162              		.section	.bss.flash_address,"aw",%nobits
 2163              		.align	2
 2164              		.set	.LANCHOR0,. + 0
 2167              	flash_address:
 2168 0000 00000000 		.space	4
 2169              		.section	.bss.flash_para,"aw",%nobits
 2170              		.align	2
 2171              		.set	.LANCHOR1,. + 0
 2174              	flash_para:
 2175 0000 00000000 		.space	256
 2175      00000000 
 2175      00000000 
 2175      00000000 
 2175      00000000 
 2176              		.section	.bss.maxtx1,"aw",%nobits
 2177              		.align	1
 2178              		.set	.LANCHOR7,. + 0
 2181              	maxtx1:
 2182 0000 0000     		.space	2
 2183              		.section	.bss.maxtx2,"aw",%nobits
 2184              		.align	1
 2185              		.set	.LANCHOR15,. + 0
 2188              	maxtx2:
 2189 0000 0000     		.space	2
 2190              		.section	.bss.maxtx3,"aw",%nobits
 2191              		.align	1
 2192              		.set	.LANCHOR22,. + 0
 2195              	maxtx3:
 2196 0000 0000     		.space	2
 2197              		.section	.bss.rx_led,"aw",%nobits
 2198              		.set	.LANCHOR4,. + 0
 2201              	rx_led:
 2202 0000 00       		.space	1
 2203              		.section	.bss.rxbuff1,"aw",%nobits
 2204              		.set	.LANCHOR3,. + 0
 2207              	rxbuff1:
 2208 0000 00000000 		.space	256
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2208      00000000 
 2209              		.section	.bss.rxbuff2,"aw",%nobits
 2210              		.set	.LANCHOR12,. + 0
 2213              	rxbuff2:
 2214 0000 00000000 		.space	256
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2214      00000000 
 2215              		.section	.bss.rxbuff3,"aw",%nobits
 2216              		.set	.LANCHOR19,. + 0
 2219              	rxbuff3:
 2220 0000 00000000 		.space	256
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2220      00000000 
 2221              		.section	.bss.rxck1,"aw",%nobits
 2222              		.set	.LANCHOR5,. + 0
 2225              	rxck1:
 2226 0000 00       		.space	1
 2227              		.section	.bss.rxck2,"aw",%nobits
 2228              		.set	.LANCHOR13,. + 0
 2231              	rxck2:
 2232 0000 00       		.space	1
 2233              		.section	.bss.rxck3,"aw",%nobits
 2234              		.set	.LANCHOR20,. + 0
 2237              	rxck3:
 2238 0000 00       		.space	1
 2239              		.section	.bss.rxcnt1,"aw",%nobits
 2240              		.align	1
 2241              		.set	.LANCHOR2,. + 0
 2244              	rxcnt1:
 2245 0000 0000     		.space	2
 2246              		.section	.bss.rxcnt2,"aw",%nobits
 2247              		.align	1
 2248              		.set	.LANCHOR11,. + 0
 2251              	rxcnt2:
 2252 0000 0000     		.space	2
 2253              		.section	.bss.rxcnt3,"aw",%nobits
 2254              		.align	1
 2255              		.set	.LANCHOR18,. + 0
 2258              	rxcnt3:
 2259 0000 0000     		.space	2
 2260              		.section	.bss.sbuff,"aw",%nobits
 2261              		.set	.LANCHOR26,. + 0
 2264              	sbuff:
 2265 0000 00000000 		.space	256
 2265      00000000 
 2265      00000000 
 2265      00000000 
 2265      00000000 
 2266              		.section	.bss.this_id,"aw",%nobits
 2267              		.set	.LANCHOR25,. + 0
 2270              	this_id:
 2271 0000 00       		.space	1
 2272              		.section	.bss.tx1_busy,"aw",%nobits
 2273              		.set	.LANCHOR10,. + 0
 2276              	tx1_busy:
 2277 0000 00       		.space	1
 2278              		.section	.bss.tx2_busy,"aw",%nobits
 2279              		.set	.LANCHOR17,. + 0
 2282              	tx2_busy:
 2283 0000 00       		.space	1
 2284              		.section	.bss.tx3_busy,"aw",%nobits
 2285              		.set	.LANCHOR24,. + 0
 2288              	tx3_busy:
 2289 0000 00       		.space	1
 2290              		.section	.bss.tx_led,"aw",%nobits
 2291              		.set	.LANCHOR9,. + 0
 2294              	tx_led:
 2295 0000 00       		.space	1
 2296              		.section	.bss.txbuff1,"aw",%nobits
 2297              		.set	.LANCHOR8,. + 0
 2300              	txbuff1:
 2301 0000 00000000 		.space	256
 2301      00000000 
 2301      00000000 
 2301      00000000 
 2301      00000000 
 2302              		.section	.bss.txbuff2,"aw",%nobits
 2303              		.set	.LANCHOR16,. + 0
 2306              	txbuff2:
 2307 0000 00000000 		.space	256
 2307      00000000 
 2307      00000000 
 2307      00000000 
 2307      00000000 
 2308              		.section	.bss.txbuff3,"aw",%nobits
 2309              		.set	.LANCHOR23,. + 0
 2312              	txbuff3:
 2313 0000 00000000 		.space	256
 2313      00000000 
 2313      00000000 
 2313      00000000 
 2313      00000000 
 2314              		.section	.bss.txcnt1,"aw",%nobits
 2315              		.align	1
 2316              		.set	.LANCHOR6,. + 0
 2319              	txcnt1:
 2320 0000 0000     		.space	2
 2321              		.section	.bss.txcnt2,"aw",%nobits
 2322              		.align	1
 2323              		.set	.LANCHOR14,. + 0
 2326              	txcnt2:
 2327 0000 0000     		.space	2
 2328              		.section	.bss.txcnt3,"aw",%nobits
 2329              		.align	1
 2330              		.set	.LANCHOR21,. + 0
 2333              	txcnt3:
 2334 0000 0000     		.space	2
 2335              		.text
 2336              	.Letext0:
 2337              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2338              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2339              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 2340              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2341              		.file 8 "/project/stm32f4x_iolib/include/cmsis/stm32f4xx.h"
 2342              		.file 9 "/project/stm32f4x_iolib/include/misc.h"
 2343              		.file 10 "/project/stm32f4x_iolib/include/stm32f4xx_gpio.h"
 2344              		.file 11 "/project/stm32f4x_iolib/include/stm32f4xx_usart.h"
 2345              		.file 12 "/project/stm32f4x_iolib/include/fundefs.h"
 2346              		.file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
 2347              		.file 14 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 serial.c
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:20     .text.__NVIC_SystemReset:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:25     .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:90     .text.__NVIC_SystemReset:0000001c $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:96     .text.flash_read:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:102    .text.flash_read:00000000 flash_read
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:162    .text.flash_read:00000028 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:169    .text.USART1_IRQHandler:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:175    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:338    .text.USART1_IRQHandler:000000cc $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:352    .text.USART2_IRQHandler:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:358    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:525    .text.USART2_IRQHandler:000000d4 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:540    .text.USART3_IRQHandler:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:546    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:709    .text.USART3_IRQHandler:000000cc $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:723    .text.tx_enable1:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:729    .text.tx_enable1:00000000 tx_enable1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:773    .text.tx_enable1:00000024 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:782    .text.tx_enable2:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:788    .text.tx_enable2:00000000 tx_enable2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:837    .text.tx_enable2:0000002c $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:847    .text.tx_enable3:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:853    .text.tx_enable3:00000000 tx_enable3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:897    .text.tx_enable3:00000024 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:906    .text.receive_check1:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:912    .text.receive_check1:00000000 receive_check1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1034   .text.receive_check1:0000006c $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1042   .text.receive_check2:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1048   .text.receive_check2:00000000 receive_check2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1170   .text.receive_check2:0000006c $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1178   .text.receive_check3:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1184   .text.receive_check3:00000000 receive_check3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1306   .text.receive_check3:0000006c $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1314   .text.uasrt_send:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1320   .text.uasrt_send:00000000 uasrt_send
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1475   .text.uasrt_send:00000094 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1485   .text.s_printf:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1491   .text.s_printf:00000000 s_printf
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1557   .text.s_printf:00000030 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1562   .text.serial_check:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1568   .text.serial_check:00000000 serial_check
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1655   .text.serial_check:00000050 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1665   .text.serial_init:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:1671   .text.serial_init:00000000 serial_init
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2098   .text.serial_init:00000254 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2264   .bss.sbuff:00000000 sbuff
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2160   .bss.USART3_PORT:00000000 USART3_PORT
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2154   .bss.USART1_PORT:00000000 USART1_PORT
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2312   .bss.txbuff3:00000000 txbuff3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2219   .bss.rxbuff3:00000000 rxbuff3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2306   .bss.txbuff2:00000000 txbuff2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2213   .bss.rxbuff2:00000000 rxbuff2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2300   .bss.txbuff1:00000000 txbuff1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2207   .bss.rxbuff1:00000000 rxbuff1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2174   .bss.flash_para:00000000 flash_para
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2167   .bss.flash_address:00000000 flash_address
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2288   .bss.tx3_busy:00000000 tx3_busy
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2282   .bss.tx2_busy:00000000 tx2_busy
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2276   .bss.tx1_busy:00000000 tx1_busy
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2270   .bss.this_id:00000000 this_id
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2294   .bss.tx_led:00000000 tx_led
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2201   .bss.rx_led:00000000 rx_led
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2237   .bss.rxck3:00000000 rxck3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2231   .bss.rxck2:00000000 rxck2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2225   .bss.rxck1:00000000 rxck1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2195   .bss.maxtx3:00000000 maxtx3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2333   .bss.txcnt3:00000000 txcnt3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2258   .bss.rxcnt3:00000000 rxcnt3
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2188   .bss.maxtx2:00000000 maxtx2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2326   .bss.txcnt2:00000000 txcnt2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2251   .bss.rxcnt2:00000000 rxcnt2
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2181   .bss.maxtx1:00000000 maxtx1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2319   .bss.txcnt1:00000000 txcnt1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2244   .bss.rxcnt1:00000000 rxcnt1
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2155   .bss.USART1_PORT:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2161   .bss.USART3_PORT:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2163   .bss.flash_address:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2170   .bss.flash_para:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2177   .bss.maxtx1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2184   .bss.maxtx2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2191   .bss.maxtx3:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2202   .bss.rx_led:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2208   .bss.rxbuff1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2214   .bss.rxbuff2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2220   .bss.rxbuff3:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2226   .bss.rxck1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2232   .bss.rxck2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2238   .bss.rxck3:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2240   .bss.rxcnt1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2247   .bss.rxcnt2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2254   .bss.rxcnt3:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2265   .bss.sbuff:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2271   .bss.this_id:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2277   .bss.tx1_busy:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2283   .bss.tx2_busy:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2289   .bss.tx3_busy:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2295   .bss.tx_led:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2301   .bss.txbuff1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2307   .bss.txbuff2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2313   .bss.txbuff3:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2315   .bss.txcnt1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2322   .bss.txcnt2:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchZDWz0.s:2329   .bss.txcnt3:00000000 $d

UNDEFINED SYMBOLS
FLASH_Unlock
FLASH_Lock
USART_GetITStatus
USART_ReceiveData
USART_ClearITPendingBit
USART_SendData
USART_ITConfig
wm8978_volset
memset
memcpy
vsprintf
strlen
NVIC_Init
GPIO_PinAFConfig
GPIO_Init_Pin
USART_DeInit
RCC_APB2PeriphClockCmd
USART_Init
USART_Cmd
RCC_APB1PeriphClockCmd
