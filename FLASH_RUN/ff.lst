   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"ff.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.mem_cpy,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	mem_cpy:
  26              	.LVL0:
  27              	.LFB130:
  28              		.file 1 "source\\fatfs\\ff.c"
   1:source\fatfs/ff.c **** /*----------------------------------------------------------------------------/
   2:source\fatfs/ff.c **** /  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
   3:source\fatfs/ff.c **** /-----------------------------------------------------------------------------/
   4:source\fatfs/ff.c **** / FatFs module is a free software that opened under license policy of
   5:source\fatfs/ff.c **** / following conditions.
   6:source\fatfs/ff.c **** /
   7:source\fatfs/ff.c **** / Copyright (C) 2015, ChaN, all right reserved.
   8:source\fatfs/ff.c **** /
   9:source\fatfs/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  10:source\fatfs/ff.c **** /    this condition and the following disclaimer.
  11:source\fatfs/ff.c **** /
  12:source\fatfs/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  13:source\fatfs/ff.c **** / and any warranties related to this software are DISCLAIMED.
  14:source\fatfs/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  15:source\fatfs/ff.c **** / by use of this software.
  16:source\fatfs/ff.c **** /-----------------------------------------------------------------------------/
  17:source\fatfs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  18:source\fatfs/ff.c **** /
  19:source\fatfs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  20:source\fatfs/ff.c **** /
  21:source\fatfs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  22:source\fatfs/ff.c **** /                   Removed unbuffered mode.
  23:source\fatfs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  24:source\fatfs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  25:source\fatfs/ff.c **** /
  26:source\fatfs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  27:source\fatfs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  28:source\fatfs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  29:source\fatfs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  30:source\fatfs/ff.c **** /
  31:source\fatfs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  32:source\fatfs/ff.c **** /                   Changed some interfaces for multiple drive system.
  33:source\fatfs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  34:source\fatfs/ff.c **** /                   Added f_mkfs().
  35:source\fatfs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  36:source\fatfs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  37:source\fatfs/ff.c **** /                   Added minimization level 3.
  38:source\fatfs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  39:source\fatfs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  40:source\fatfs/ff.c **** /                   Added FSINFO support.
  41:source\fatfs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  42:source\fatfs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  43:source\fatfs/ff.c **** /
  44:source\fatfs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  45:source\fatfs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSINFO.
  46:source\fatfs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  47:source\fatfs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  48:source\fatfs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  49:source\fatfs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  50:source\fatfs/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  51:source\fatfs/ff.c **** /
  52:source\fatfs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:source\fatfs/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  54:source\fatfs/ff.c **** /
  55:source\fatfs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  56:source\fatfs/ff.c **** /                   Added long file name feature.
  57:source\fatfs/ff.c **** /                   Added multiple code page feature.
  58:source\fatfs/ff.c **** /                   Added re-entrancy for multitask operation.
  59:source\fatfs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  60:source\fatfs/ff.c **** /                   Added rewind option to f_readdir().
  61:source\fatfs/ff.c **** /                   Changed result code of critical errors.
  62:source\fatfs/ff.c **** /                   Renamed string functions to avoid name collision.
  63:source\fatfs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  64:source\fatfs/ff.c **** /                   Added multiple sector size feature.
  65:source\fatfs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  66:source\fatfs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  67:source\fatfs/ff.c **** /                   Added relative path feature.
  68:source\fatfs/ff.c **** /                   Added f_chdir() and f_chdrive().
  69:source\fatfs/ff.c **** /                   Added proper case conversion to extended character.
  70:source\fatfs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  71:source\fatfs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-directory on _FS_RPATH.
  72:source\fatfs/ff.c **** /                   Fixed name matching error on the 13 character boundary.
  73:source\fatfs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  74:source\fatfs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  75:source\fatfs/ff.c **** /
  76:source\fatfs/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  77:source\fatfs/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  78:source\fatfs/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  79:source\fatfs/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  80:source\fatfs/ff.c **** /                   Changed .fname in the FILINFO structure on Unicode cfg.
  81:source\fatfs/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  82:source\fatfs/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd().
  83:source\fatfs/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  84:source\fatfs/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  85:source\fatfs/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  86:source\fatfs/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  87:source\fatfs/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  88:source\fatfs/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  89:source\fatfs/ff.c **** /                   Extended format syntax of f_printf().
  90:source\fatfs/ff.c **** /                   Ignores duplicated directory separators in given path name.
  91:source\fatfs/ff.c **** /
  92:source\fatfs/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to complete the multiple partition feature
  93:source\fatfs/ff.c **** /                   Added f_fdisk().
  94:source\fatfs/ff.c **** / Aug 27,'12 R0.09a Changed f_open() and f_opendir() reject null object pointer to avoid crash.
  95:source\fatfs/ff.c **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  96:source\fatfs/ff.c **** /                   Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  97:source\fatfs/ff.c **** / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel().
  98:source\fatfs/ff.c **** /
  99:source\fatfs/ff.c **** / Oct 02,'13 R0.10  Added selection of character encoding on the file. (_STRF_ENCODE)
 100:source\fatfs/ff.c **** /                   Added f_closedir().
 101:source\fatfs/ff.c **** /                   Added forced full FAT scan for f_getfree(). (_FS_NOFSINFO)
 102:source\fatfs/ff.c **** /                   Added forced mount feature with changes of f_mount().
 103:source\fatfs/ff.c **** /                   Improved behavior of volume auto detection.
 104:source\fatfs/ff.c **** /                   Improved write throughput of f_puts() and f_printf().
 105:source\fatfs/ff.c **** /                   Changed argument of f_chdrive(), f_mkfs(), disk_read() and disk_write().
 106:source\fatfs/ff.c **** /                   Fixed f_write() can be truncated when the file size is close to 4GB.
 107:source\fatfs/ff.c **** /                   Fixed f_open(), f_mkdir() and f_setlabel() can return incorrect error code.
 108:source\fatfs/ff.c **** / Jan 15,'14 R0.10a Added arbitrary strings as drive number in the path name. (_STR_VOLUME_ID)
 109:source\fatfs/ff.c **** /                   Added a configuration option of minimum sector size. (_MIN_SS)
 110:source\fatfs/ff.c **** /                   2nd argument of f_rename() can have a drive number and it will be ignored.
 111:source\fatfs/ff.c **** /                   Fixed f_mount() with forced mount fails when drive number is >= 1.
 112:source\fatfs/ff.c **** /                   Fixed f_close() invalidates the file object without volume lock.
 113:source\fatfs/ff.c **** /                   Fixed f_closedir() returns but the volume lock is left acquired.
 114:source\fatfs/ff.c **** /                   Fixed creation of an entry with LFN fails on too many SFN collisions.
 115:source\fatfs/ff.c **** / May 19,'14 R0.10b Fixed a hard error in the disk I/O layer can collapse the directory entry.
 116:source\fatfs/ff.c **** /                   Fixed LFN entry is not deleted on delete/rename an object with lossy converted 
 117:source\fatfs/ff.c **** / Nov  9,'14 R0.10c Added a configuration option for the platforms without RTC. (_FS_NORTC)
 118:source\fatfs/ff.c **** /                   Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel(). (
 119:source\fatfs/ff.c **** /                   Fixed a potential problem of FAT access that can appear on disk error.
 120:source\fatfs/ff.c **** /                   Fixed null pointer dereference on attempting to delete the root direcotry. (app
 121:source\fatfs/ff.c **** / Feb 02,'15 R0.11  Added f_findfirst() and f_findnext(). (_USE_FIND)
 122:source\fatfs/ff.c **** /                   Fixed f_unlink() does not remove cluster chain of the file. (appeared at R0.10c
 123:source\fatfs/ff.c **** /                   Fixed _FS_NORTC option does not work properly. (appeared at R0.10c)
 124:source\fatfs/ff.c **** /---------------------------------------------------------------------------*/
 125:source\fatfs/ff.c **** 
 126:source\fatfs/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
 127:source\fatfs/ff.c **** #include "diskio.h"		/* Declarations of disk I/O functions */
 128:source\fatfs/ff.c **** 
 129:source\fatfs/ff.c **** 
 130:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
 131:source\fatfs/ff.c **** 
 132:source\fatfs/ff.c ****    Module Private Definitions
 133:source\fatfs/ff.c **** 
 134:source\fatfs/ff.c **** ---------------------------------------------------------------------------*/
 135:source\fatfs/ff.c **** 
 136:source\fatfs/ff.c **** #if _FATFS != 32020	/* Revision ID */
 137:source\fatfs/ff.c **** #error Wrong include file (ff.h).
 138:source\fatfs/ff.c **** #endif
 139:source\fatfs/ff.c **** 
 140:source\fatfs/ff.c **** 
 141:source\fatfs/ff.c **** /* Reentrancy related */
 142:source\fatfs/ff.c **** #if _FS_REENTRANT
 143:source\fatfs/ff.c **** #if _USE_LFN == 1
 144:source\fatfs/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 145:source\fatfs/ff.c **** #endif
 146:source\fatfs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 147:source\fatfs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 148:source\fatfs/ff.c **** #else
 149:source\fatfs/ff.c **** #define	ENTER_FF(fs)
 150:source\fatfs/ff.c **** #define LEAVE_FF(fs, res)	return res
 151:source\fatfs/ff.c **** #endif
 152:source\fatfs/ff.c **** 
 153:source\fatfs/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 154:source\fatfs/ff.c **** 
 155:source\fatfs/ff.c **** 
 156:source\fatfs/ff.c **** /* Definitions of sector size */
 157:source\fatfs/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 158:source\fatfs/ff.c **** #error Wrong sector size configuration
 159:source\fatfs/ff.c **** #endif
 160:source\fatfs/ff.c **** #if _MAX_SS == _MIN_SS
 161:source\fatfs/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 162:source\fatfs/ff.c **** #else
 163:source\fatfs/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 164:source\fatfs/ff.c **** #endif
 165:source\fatfs/ff.c **** 
 166:source\fatfs/ff.c **** 
 167:source\fatfs/ff.c **** /* Timestamp feature */
 168:source\fatfs/ff.c **** #if _FS_NORTC == 1
 169:source\fatfs/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 170:source\fatfs/ff.c **** #error Invalid _FS_NORTC settings
 171:source\fatfs/ff.c **** #endif
 172:source\fatfs/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 173:source\fatfs/ff.c **** #else
 174:source\fatfs/ff.c **** #define GET_FATTIME()	get_fattime()
 175:source\fatfs/ff.c **** #endif
 176:source\fatfs/ff.c **** 
 177:source\fatfs/ff.c **** 
 178:source\fatfs/ff.c **** /* File access control feature */
 179:source\fatfs/ff.c **** #if _FS_LOCK
 180:source\fatfs/ff.c **** #if _FS_READONLY
 181:source\fatfs/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 182:source\fatfs/ff.c **** #endif
 183:source\fatfs/ff.c **** typedef struct {
 184:source\fatfs/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 185:source\fatfs/ff.c **** 	DWORD clu;		/* Object ID 2, directory (0:root) */
 186:source\fatfs/ff.c **** 	WORD idx;		/* Object ID 3, directory index */
 187:source\fatfs/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 188:source\fatfs/ff.c **** } FILESEM;
 189:source\fatfs/ff.c **** #endif
 190:source\fatfs/ff.c **** 
 191:source\fatfs/ff.c **** 
 192:source\fatfs/ff.c **** 
 193:source\fatfs/ff.c **** /* DBCS code ranges and SBCS extend character conversion table */
 194:source\fatfs/ff.c **** 
 195:source\fatfs/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 196:source\fatfs/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 197:source\fatfs/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 198:source\fatfs/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 199:source\fatfs/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 200:source\fatfs/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 201:source\fatfs/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 202:source\fatfs/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 203:source\fatfs/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 204:source\fatfs/ff.c **** 
 205:source\fatfs/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 206:source\fatfs/ff.c **** #define _DF1S	0x81
 207:source\fatfs/ff.c **** #define _DF1E	0xFE
 208:source\fatfs/ff.c **** #define _DS1S	0x40
 209:source\fatfs/ff.c **** #define _DS1E	0x7E
 210:source\fatfs/ff.c **** #define _DS2S	0x80
 211:source\fatfs/ff.c **** #define _DS2E	0xFE
 212:source\fatfs/ff.c **** 
 213:source\fatfs/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 214:source\fatfs/ff.c **** #define _DF1S	0x81
 215:source\fatfs/ff.c **** #define _DF1E	0xFE
 216:source\fatfs/ff.c **** #define _DS1S	0x41
 217:source\fatfs/ff.c **** #define _DS1E	0x5A
 218:source\fatfs/ff.c **** #define _DS2S	0x61
 219:source\fatfs/ff.c **** #define _DS2E	0x7A
 220:source\fatfs/ff.c **** #define _DS3S	0x81
 221:source\fatfs/ff.c **** #define _DS3E	0xFE
 222:source\fatfs/ff.c **** 
 223:source\fatfs/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 224:source\fatfs/ff.c **** #define _DF1S	0x81
 225:source\fatfs/ff.c **** #define _DF1E	0xFE
 226:source\fatfs/ff.c **** #define _DS1S	0x40
 227:source\fatfs/ff.c **** #define _DS1E	0x7E
 228:source\fatfs/ff.c **** #define _DS2S	0xA1
 229:source\fatfs/ff.c **** #define _DS2E	0xFE
 230:source\fatfs/ff.c **** 
 231:source\fatfs/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 232:source\fatfs/ff.c **** #define _DF1S	0
 233:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 234:source\fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 235:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 236:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 237:source\fatfs/ff.c **** 
 238:source\fatfs/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 239:source\fatfs/ff.c **** #define _DF1S	0
 240:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 241:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 242:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 243:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 244:source\fatfs/ff.c **** 
 245:source\fatfs/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 246:source\fatfs/ff.c **** #define _DF1S	0
 247:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 248:source\fatfs/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 249:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 250:source\fatfs/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 251:source\fatfs/ff.c **** 
 252:source\fatfs/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 253:source\fatfs/ff.c **** #define _DF1S	0
 254:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 255:source\fatfs/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 256:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 257:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 258:source\fatfs/ff.c **** 
 259:source\fatfs/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 260:source\fatfs/ff.c **** #define _DF1S	0
 261:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 262:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 263:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 264:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 265:source\fatfs/ff.c **** 
 266:source\fatfs/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 267:source\fatfs/ff.c **** #define _DF1S	0
 268:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 269:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 270:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 271:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 272:source\fatfs/ff.c **** 
 273:source\fatfs/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 274:source\fatfs/ff.c **** #define _DF1S	0
 275:source\fatfs/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 276:source\fatfs/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 277:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 278:source\fatfs/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 279:source\fatfs/ff.c **** 
 280:source\fatfs/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 281:source\fatfs/ff.c **** #define _DF1S	0
 282:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 283:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 284:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 285:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 286:source\fatfs/ff.c **** 
 287:source\fatfs/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 288:source\fatfs/ff.c **** #define _DF1S	0
 289:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 290:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 291:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 292:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 293:source\fatfs/ff.c **** 
 294:source\fatfs/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 295:source\fatfs/ff.c **** #define _DF1S	0
 296:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 297:source\fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 298:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 299:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 300:source\fatfs/ff.c **** 
 301:source\fatfs/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 302:source\fatfs/ff.c **** #define _DF1S	0
 303:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 304:source\fatfs/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 305:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 306:source\fatfs/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 307:source\fatfs/ff.c **** 
 308:source\fatfs/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 309:source\fatfs/ff.c **** #define _DF1S	0
 310:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 311:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 312:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 313:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 314:source\fatfs/ff.c **** 
 315:source\fatfs/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 316:source\fatfs/ff.c **** #define _DF1S	0
 317:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 318:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 319:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 320:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 321:source\fatfs/ff.c **** 
 322:source\fatfs/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 323:source\fatfs/ff.c **** #define _DF1S	0
 324:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 325:source\fatfs/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 326:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 327:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 328:source\fatfs/ff.c **** 
 329:source\fatfs/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 330:source\fatfs/ff.c **** #define _DF1S	0
 331:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 332:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 333:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 334:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 335:source\fatfs/ff.c **** 
 336:source\fatfs/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 337:source\fatfs/ff.c **** #define _DF1S	0
 338:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 339:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 340:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 341:source\fatfs/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 342:source\fatfs/ff.c **** 
 343:source\fatfs/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 344:source\fatfs/ff.c **** #define _DF1S	0
 345:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 346:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 347:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 348:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 349:source\fatfs/ff.c **** 
 350:source\fatfs/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 351:source\fatfs/ff.c **** #define _DF1S	0
 352:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 353:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 354:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 355:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 356:source\fatfs/ff.c **** 
 357:source\fatfs/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 358:source\fatfs/ff.c **** #define _DF1S	0
 359:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 360:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 361:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 362:source\fatfs/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 363:source\fatfs/ff.c **** 
 364:source\fatfs/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 365:source\fatfs/ff.c **** #define _DF1S	0
 366:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 367:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 368:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 369:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 370:source\fatfs/ff.c **** 
 371:source\fatfs/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 372:source\fatfs/ff.c **** #define _DF1S	0
 373:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 374:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 375:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 376:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 377:source\fatfs/ff.c **** 
 378:source\fatfs/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 379:source\fatfs/ff.c **** #if _USE_LFN
 380:source\fatfs/ff.c **** #error Cannot use LFN feature without valid code page.
 381:source\fatfs/ff.c **** #endif
 382:source\fatfs/ff.c **** #define _DF1S	0
 383:source\fatfs/ff.c **** 
 384:source\fatfs/ff.c **** #else
 385:source\fatfs/ff.c **** #error Unknown code page
 386:source\fatfs/ff.c **** 
 387:source\fatfs/ff.c **** #endif
 388:source\fatfs/ff.c **** 
 389:source\fatfs/ff.c **** 
 390:source\fatfs/ff.c **** /* Character code support macros */
 391:source\fatfs/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 392:source\fatfs/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 393:source\fatfs/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 394:source\fatfs/ff.c **** 
 395:source\fatfs/ff.c **** #if _DF1S		/* Code page is DBCS */
 396:source\fatfs/ff.c **** 
 397:source\fatfs/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 398:source\fatfs/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 399:source\fatfs/ff.c **** #else			/* One 1st byte area */
 400:source\fatfs/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 401:source\fatfs/ff.c **** #endif
 402:source\fatfs/ff.c **** 
 403:source\fatfs/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 404:source\fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 405:source\fatfs/ff.c **** #else			/* Two 2nd byte areas */
 406:source\fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 407:source\fatfs/ff.c **** #endif
 408:source\fatfs/ff.c **** 
 409:source\fatfs/ff.c **** #else			/* Code page is SBCS */
 410:source\fatfs/ff.c **** 
 411:source\fatfs/ff.c **** #define IsDBCS1(c)	0
 412:source\fatfs/ff.c **** #define IsDBCS2(c)	0
 413:source\fatfs/ff.c **** 
 414:source\fatfs/ff.c **** #endif /* _DF1S */
 415:source\fatfs/ff.c **** 
 416:source\fatfs/ff.c **** 
 417:source\fatfs/ff.c **** /* Name status flags */
 418:source\fatfs/ff.c **** #define NSFLAG		11		/* Index of name status byte in fn[] */
 419:source\fatfs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 420:source\fatfs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 421:source\fatfs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 422:source\fatfs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 423:source\fatfs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 424:source\fatfs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 425:source\fatfs/ff.c **** 
 426:source\fatfs/ff.c **** 
 427:source\fatfs/ff.c **** /* FAT sub-type boundaries (Differ from specs but correct for real DOS/Windows) */
 428:source\fatfs/ff.c **** #define MIN_FAT16	4086U	/* Minimum number of clusters as FAT16 */
 429:source\fatfs/ff.c **** #define	MIN_FAT32	65526U	/* Minimum number of clusters as FAT32 */
 430:source\fatfs/ff.c **** 
 431:source\fatfs/ff.c **** 
 432:source\fatfs/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 433:source\fatfs/ff.c **** / structure member because the structure is not binary compatible between
 434:source\fatfs/ff.c **** / different platforms */
 435:source\fatfs/ff.c **** 
 436:source\fatfs/ff.c **** #define BS_jmpBoot			0		/* x86 jump instruction (3) */
 437:source\fatfs/ff.c **** #define BS_OEMName			3		/* OEM name (8) */
 438:source\fatfs/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (2) */
 439:source\fatfs/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (1) */
 440:source\fatfs/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (2) */
 441:source\fatfs/ff.c **** #define BPB_NumFATs			16		/* Number of FAT copies (1) */
 442:source\fatfs/ff.c **** #define BPB_RootEntCnt		17		/* Number of root directory entries for FAT12/16 (2) */
 443:source\fatfs/ff.c **** #define BPB_TotSec16		19		/* Volume size [sector] (2) */
 444:source\fatfs/ff.c **** #define BPB_Media			21		/* Media descriptor (1) */
 445:source\fatfs/ff.c **** #define BPB_FATSz16			22		/* FAT size [sector] (2) */
 446:source\fatfs/ff.c **** #define BPB_SecPerTrk		24		/* Track size [sector] (2) */
 447:source\fatfs/ff.c **** #define BPB_NumHeads		26		/* Number of heads (2) */
 448:source\fatfs/ff.c **** #define BPB_HiddSec			28		/* Number of special hidden sectors (4) */
 449:source\fatfs/ff.c **** #define BPB_TotSec32		32		/* Volume size [sector] (4) */
 450:source\fatfs/ff.c **** #define BS_DrvNum			36		/* Physical drive number (2) */
 451:source\fatfs/ff.c **** #define BS_BootSig			38		/* Extended boot signature (1) */
 452:source\fatfs/ff.c **** #define BS_VolID			39		/* Volume serial number (4) */
 453:source\fatfs/ff.c **** #define BS_VolLab			43		/* Volume label (8) */
 454:source\fatfs/ff.c **** #define BS_FilSysType		54		/* File system type (1) */
 455:source\fatfs/ff.c **** #define BPB_FATSz32			36		/* FAT size [sector] (4) */
 456:source\fatfs/ff.c **** #define BPB_ExtFlags		40		/* Extended flags (2) */
 457:source\fatfs/ff.c **** #define BPB_FSVer			42		/* File system version (2) */
 458:source\fatfs/ff.c **** #define BPB_RootClus		44		/* Root directory first cluster (4) */
 459:source\fatfs/ff.c **** #define BPB_FSInfo			48		/* Offset of FSINFO sector (2) */
 460:source\fatfs/ff.c **** #define BPB_BkBootSec		50		/* Offset of backup boot sector (2) */
 461:source\fatfs/ff.c **** #define BS_DrvNum32			64		/* Physical drive number (2) */
 462:source\fatfs/ff.c **** #define BS_BootSig32		66		/* Extended boot signature (1) */
 463:source\fatfs/ff.c **** #define BS_VolID32			67		/* Volume serial number (4) */
 464:source\fatfs/ff.c **** #define BS_VolLab32			71		/* Volume label (8) */
 465:source\fatfs/ff.c **** #define BS_FilSysType32		82		/* File system type (1) */
 466:source\fatfs/ff.c **** #define	FSI_LeadSig			0		/* FSI: Leading signature (4) */
 467:source\fatfs/ff.c **** #define	FSI_StrucSig		484		/* FSI: Structure signature (4) */
 468:source\fatfs/ff.c **** #define	FSI_Free_Count		488		/* FSI: Number of free clusters (4) */
 469:source\fatfs/ff.c **** #define	FSI_Nxt_Free		492		/* FSI: Last allocated cluster (4) */
 470:source\fatfs/ff.c **** #define MBR_Table			446		/* MBR: Partition table offset (2) */
 471:source\fatfs/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 472:source\fatfs/ff.c **** #define BS_55AA				510		/* Signature word (2) */
 473:source\fatfs/ff.c **** 
 474:source\fatfs/ff.c **** #define	DIR_Name			0		/* Short file name (11) */
 475:source\fatfs/ff.c **** #define	DIR_Attr			11		/* Attribute (1) */
 476:source\fatfs/ff.c **** #define	DIR_NTres			12		/* Lower case flag (1) */
 477:source\fatfs/ff.c **** #define DIR_CrtTimeTenth	13		/* Created time sub-second (1) */
 478:source\fatfs/ff.c **** #define	DIR_CrtTime			14		/* Created time (2) */
 479:source\fatfs/ff.c **** #define	DIR_CrtDate			16		/* Created date (2) */
 480:source\fatfs/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (2) */
 481:source\fatfs/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (2) */
 482:source\fatfs/ff.c **** #define	DIR_WrtTime			22		/* Modified time (2) */
 483:source\fatfs/ff.c **** #define	DIR_WrtDate			24		/* Modified date (2) */
 484:source\fatfs/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (2) */
 485:source\fatfs/ff.c **** #define	DIR_FileSize		28		/* File size (4) */
 486:source\fatfs/ff.c **** #define	LDIR_Ord			0		/* LFN entry order and LLE flag (1) */
 487:source\fatfs/ff.c **** #define	LDIR_Attr			11		/* LFN attribute (1) */
 488:source\fatfs/ff.c **** #define	LDIR_Type			12		/* LFN type (1) */
 489:source\fatfs/ff.c **** #define	LDIR_Chksum			13		/* Sum of corresponding SFN entry */
 490:source\fatfs/ff.c **** #define	LDIR_FstClusLO		26		/* Must be zero (0) */
 491:source\fatfs/ff.c **** #define	SZ_DIRE				32		/* Size of a directory entry */
 492:source\fatfs/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 493:source\fatfs/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark at DIR_Name[0] */
 494:source\fatfs/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 495:source\fatfs/ff.c **** 
 496:source\fatfs/ff.c **** 
 497:source\fatfs/ff.c **** 
 498:source\fatfs/ff.c **** 
 499:source\fatfs/ff.c **** /*------------------------------------------------------------*/
 500:source\fatfs/ff.c **** /* Module private work area                                   */
 501:source\fatfs/ff.c **** /*------------------------------------------------------------*/
 502:source\fatfs/ff.c **** /* Remark: Uninitialized variables with static duration are
 503:source\fatfs/ff.c **** /  guaranteed zero/null at start-up. If not, either the linker
 504:source\fatfs/ff.c **** /  or start-up routine being used is out of ANSI-C standard.
 505:source\fatfs/ff.c **** */
 506:source\fatfs/ff.c **** 
 507:source\fatfs/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 9
 508:source\fatfs/ff.c **** #error Wrong _VOLUMES setting
 509:source\fatfs/ff.c **** #endif
 510:source\fatfs/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 511:source\fatfs/ff.c **** static WORD Fsid;				/* File system mount ID */
 512:source\fatfs/ff.c **** 
 513:source\fatfs/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
 514:source\fatfs/ff.c **** static BYTE CurrVol;			/* Current drive */
 515:source\fatfs/ff.c **** #endif
 516:source\fatfs/ff.c **** 
 517:source\fatfs/ff.c **** #if _FS_LOCK
 518:source\fatfs/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 519:source\fatfs/ff.c **** #endif
 520:source\fatfs/ff.c **** 
 521:source\fatfs/ff.c **** #if _USE_LFN == 0			/* Non LFN feature */
 522:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]
 523:source\fatfs/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 524:source\fatfs/ff.c **** #define	FREE_BUF()
 525:source\fatfs/ff.c **** #else
 526:source\fatfs/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 527:source\fatfs/ff.c **** #error Wrong _MAX_LFN setting
 528:source\fatfs/ff.c **** #endif
 529:source\fatfs/ff.c **** #if _USE_LFN == 1			/* LFN feature with static working buffer */
 530:source\fatfs/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];
 531:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]
 532:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 533:source\fatfs/ff.c **** #define	FREE_BUF()
 534:source\fatfs/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 535:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR lbuf[_MAX_LFN + 1]
 536:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 537:source\fatfs/ff.c **** #define	FREE_BUF()
 538:source\fatfs/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 539:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR *lfn
 540:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); if (!lfn) LEAVE_FF((dobj).fs, FR_N
 541:source\fatfs/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 542:source\fatfs/ff.c **** #else
 543:source\fatfs/ff.c **** #error Wrong _USE_LFN setting
 544:source\fatfs/ff.c **** #endif
 545:source\fatfs/ff.c **** #endif
 546:source\fatfs/ff.c **** 
 547:source\fatfs/ff.c **** #ifdef _EXCVT
 548:source\fatfs/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
 549:source\fatfs/ff.c **** #endif
 550:source\fatfs/ff.c **** 
 551:source\fatfs/ff.c **** 
 552:source\fatfs/ff.c **** 
 553:source\fatfs/ff.c **** 
 554:source\fatfs/ff.c **** 
 555:source\fatfs/ff.c **** 
 556:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
 557:source\fatfs/ff.c **** 
 558:source\fatfs/ff.c ****    Module Private Functions
 559:source\fatfs/ff.c **** 
 560:source\fatfs/ff.c **** ---------------------------------------------------------------------------*/
 561:source\fatfs/ff.c **** DWORD clust2sect (FATFS* fs, DWORD clst);
 562:source\fatfs/ff.c **** DWORD get_fat (FATFS* fs,	DWORD clst);
 563:source\fatfs/ff.c **** 
 564:source\fatfs/ff.c **** #if !_FS_READONLY
 565:source\fatfs/ff.c **** FRESULT put_fat (FATFS* fs,	DWORD clst,	DWORD val);
 566:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 567:source\fatfs/ff.c **** 
 568:source\fatfs/ff.c **** #if _USE_LFN
 569:source\fatfs/ff.c **** static void gen_numname (BYTE* dst, const BYTE* src, const WCHAR* lfn, UINT seq);
 570:source\fatfs/ff.c **** #endif /* !_USE_LFN */
 571:source\fatfs/ff.c **** 
 572:source\fatfs/ff.c **** 
 573:source\fatfs/ff.c **** 
 574:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 575:source\fatfs/ff.c **** /* String functions                                                      */
 576:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 577:source\fatfs/ff.c **** 
 578:source\fatfs/ff.c **** /* Copy memory to memory */
 579:source\fatfs/ff.c **** static
 580:source\fatfs/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  29              		.loc 1 580 53 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 581:source\fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
  34              		.loc 1 581 2 view .LVU1
 582:source\fatfs/ff.c **** 	const BYTE *s = (const BYTE*)src;
  35              		.loc 1 582 2 view .LVU2
 583:source\fatfs/ff.c **** 
 584:source\fatfs/ff.c **** #if _WORD_ACCESS == 1
 585:source\fatfs/ff.c **** 	while (cnt >= sizeof (int)) {
 586:source\fatfs/ff.c **** 		*(int*)d = *(int*)s;
 587:source\fatfs/ff.c **** 		d += sizeof (int); s += sizeof (int);
 588:source\fatfs/ff.c **** 		cnt -= sizeof (int);
 589:source\fatfs/ff.c **** 	}
 590:source\fatfs/ff.c **** #endif
 591:source\fatfs/ff.c **** 	while (cnt--)
  36              		.loc 1 591 2 view .LVU3
  37 0000 0138     		subs	r0, r0, #1
  38              	.LVL1:
  39              		.loc 1 591 2 is_stmt 0 view .LVU4
  40 0002 0A44     		add	r2, r2, r1
  41              	.LVL2:
  42              	.L2:
  43              		.loc 1 591 8 is_stmt 1 view .LVU5
  44              		.loc 1 591 8 is_stmt 0 view .LVU6
  45 0004 9142     		cmp	r1, r2
  46 0006 00D1     		bne	.L3
 592:source\fatfs/ff.c **** 		*d++ = *s++;
 593:source\fatfs/ff.c **** }
  47              		.loc 1 593 1 view .LVU7
  48 0008 7047     		bx	lr
  49              	.L3:
 592:source\fatfs/ff.c **** 		*d++ = *s++;
  50              		.loc 1 592 3 is_stmt 1 view .LVU8
  51              	.LVL3:
 592:source\fatfs/ff.c **** 		*d++ = *s++;
  52              		.loc 1 592 10 is_stmt 0 view .LVU9
  53 000a 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
  54              	.LVL4:
 592:source\fatfs/ff.c **** 		*d++ = *s++;
  55              		.loc 1 592 8 view .LVU10
  56 000e 00F8013F 		strb	r3, [r0, #1]!
  57 0012 F7E7     		b	.L2
  58              		.cfi_endproc
  59              	.LFE130:
  61              		.section	.text.mem_set,"ax",%progbits
  62              		.align	1
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  67              	mem_set:
  68              	.LVL5:
  69              	.LFB131:
 594:source\fatfs/ff.c **** 
 595:source\fatfs/ff.c **** /* Fill memory */
 596:source\fatfs/ff.c **** static
 597:source\fatfs/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
  70              		.loc 1 597 45 is_stmt 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
 598:source\fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
  75              		.loc 1 598 2 view .LVU12
 599:source\fatfs/ff.c **** 
 600:source\fatfs/ff.c **** 	while (cnt--)
  76              		.loc 1 600 2 view .LVU13
  77 0000 0244     		add	r2, r2, r0
  78              	.LVL6:
  79              	.L5:
  80              		.loc 1 600 8 view .LVU14
  81              		.loc 1 600 8 is_stmt 0 view .LVU15
  82 0002 9042     		cmp	r0, r2
  83 0004 00D1     		bne	.L6
 601:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
 602:source\fatfs/ff.c **** }
  84              		.loc 1 602 1 view .LVU16
  85 0006 7047     		bx	lr
  86              	.L6:
 601:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  87              		.loc 1 601 3 is_stmt 1 view .LVU17
  88              	.LVL7:
 601:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  89              		.loc 1 601 10 is_stmt 0 view .LVU18
  90 0008 00F8011B 		strb	r1, [r0], #1
  91              	.LVL8:
 601:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  92              		.loc 1 601 10 view .LVU19
  93 000c F9E7     		b	.L5
  94              		.cfi_endproc
  95              	.LFE131:
  97              		.section	.text.chk_lock,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 103              	chk_lock:
 104              	.LVL9:
 105              	.LFB134:
 603:source\fatfs/ff.c **** 
 604:source\fatfs/ff.c **** /* Compare memory to memory */
 605:source\fatfs/ff.c **** static
 606:source\fatfs/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 607:source\fatfs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 608:source\fatfs/ff.c **** 	int r = 0;
 609:source\fatfs/ff.c **** 
 610:source\fatfs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 611:source\fatfs/ff.c **** 	return r;
 612:source\fatfs/ff.c **** }
 613:source\fatfs/ff.c **** 
 614:source\fatfs/ff.c **** /* Check if chr is contained in the string */
 615:source\fatfs/ff.c **** static
 616:source\fatfs/ff.c **** int chk_chr (const char* str, int chr) {
 617:source\fatfs/ff.c **** 	while (*str && *str != chr) str++;
 618:source\fatfs/ff.c **** 	return *str;
 619:source\fatfs/ff.c **** }
 620:source\fatfs/ff.c **** 
 621:source\fatfs/ff.c **** 
 622:source\fatfs/ff.c **** 
 623:source\fatfs/ff.c **** 
 624:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 625:source\fatfs/ff.c **** /* Request/Release grant to access the volume                            */
 626:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 627:source\fatfs/ff.c **** #if _FS_REENTRANT
 628:source\fatfs/ff.c **** static
 629:source\fatfs/ff.c **** int lock_fs (
 630:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 631:source\fatfs/ff.c **** )
 632:source\fatfs/ff.c **** {
 633:source\fatfs/ff.c **** 	return ff_req_grant(fs->sobj);
 634:source\fatfs/ff.c **** }
 635:source\fatfs/ff.c **** 
 636:source\fatfs/ff.c **** 
 637:source\fatfs/ff.c **** static
 638:source\fatfs/ff.c **** void unlock_fs (
 639:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 640:source\fatfs/ff.c **** 	FRESULT res		/* Result code to be returned */
 641:source\fatfs/ff.c **** )
 642:source\fatfs/ff.c **** {
 643:source\fatfs/ff.c **** 	if (fs &&
 644:source\fatfs/ff.c **** 		res != FR_NOT_ENABLED &&
 645:source\fatfs/ff.c **** 		res != FR_INVALID_DRIVE &&
 646:source\fatfs/ff.c **** 		res != FR_INVALID_OBJECT &&
 647:source\fatfs/ff.c **** 		res != FR_TIMEOUT) {
 648:source\fatfs/ff.c **** 		ff_rel_grant(fs->sobj);
 649:source\fatfs/ff.c **** 	}
 650:source\fatfs/ff.c **** }
 651:source\fatfs/ff.c **** #endif
 652:source\fatfs/ff.c **** 
 653:source\fatfs/ff.c **** 
 654:source\fatfs/ff.c **** 
 655:source\fatfs/ff.c **** 
 656:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 657:source\fatfs/ff.c **** /* File lock control functions                                           */
 658:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 659:source\fatfs/ff.c **** #if _FS_LOCK
 660:source\fatfs/ff.c **** 
 661:source\fatfs/ff.c **** static
 662:source\fatfs/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 663:source\fatfs/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 664:source\fatfs/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 665:source\fatfs/ff.c **** )
 666:source\fatfs/ff.c **** {
 106              		.loc 1 666 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 667:source\fatfs/ff.c **** 	UINT i, be;
 110              		.loc 1 667 2 view .LVU21
 668:source\fatfs/ff.c **** 
 669:source\fatfs/ff.c **** 	/* Search file semaphore table */
 670:source\fatfs/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 111              		.loc 1 670 2 view .LVU22
 112              		.loc 1 670 19 view .LVU23
 671:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 113              		.loc 1 671 3 view .LVU24
 114              		.loc 1 671 15 is_stmt 0 view .LVU25
 115 0000 1E4A     		ldr	r2, .L25
 116 0002 1368     		ldr	r3, [r2]
 666:source\fatfs/ff.c **** 	UINT i, be;
 117              		.loc 1 666 1 view .LVU26
 118 0004 30B5     		push	{r4, r5, lr}
 119              		.cfi_def_cfa_offset 12
 120              		.cfi_offset 4, -12
 121              		.cfi_offset 5, -8
 122              		.cfi_offset 14, -4
 123              		.loc 1 671 6 view .LVU27
 124 0006 7BB1     		cbz	r3, .L13
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 125              		.loc 1 672 4 is_stmt 1 view .LVU28
 126              		.loc 1 672 7 is_stmt 0 view .LVU29
 127 0008 D0F80042 		ldr	r4, [r0, #512]
 128 000c 9C42     		cmp	r4, r3
 129 000e 09D1     		bne	.L15
 130              		.loc 1 672 30 view .LVU30
 131 0010 5468     		ldr	r4, [r2, #4]
 132 0012 D0F80832 		ldr	r3, [r0, #520]
 133 0016 9C42     		cmp	r4, r3
 134 0018 04D1     		bne	.L15
 673:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 135              		.loc 1 673 32 view .LVU31
 136 001a 1489     		ldrh	r4, [r2, #8]
 137 001c B0F80632 		ldrh	r3, [r0, #518]
 138 0020 9C42     		cmp	r4, r3
 139 0022 24D0     		beq	.L16
 140              	.L15:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 141              		.loc 1 670 14 view .LVU32
 142 0024 0024     		movs	r4, #0
 143 0026 00E0     		b	.L8
 144              	.L13:
 674:source\fatfs/ff.c **** 				Files[i].idx == dp->index) break;
 675:source\fatfs/ff.c **** 		} else {			/* Blank entry */
 676:source\fatfs/ff.c **** 			be = 1;
 145              		.loc 1 676 7 view .LVU33
 146 0028 0124     		movs	r4, #1
 147              	.L8:
 148              	.LVL10:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 149              		.loc 1 670 33 is_stmt 1 view .LVU34
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 150              		.loc 1 670 19 view .LVU35
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 151              		.loc 1 671 3 view .LVU36
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 152              		.loc 1 671 15 is_stmt 0 view .LVU37
 153 002a D368     		ldr	r3, [r2, #12]
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 154              		.loc 1 671 6 view .LVU38
 155 002c EBB1     		cbz	r3, .L19
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 156              		.loc 1 672 4 is_stmt 1 view .LVU39
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 157              		.loc 1 672 7 is_stmt 0 view .LVU40
 158 002e D0F80052 		ldr	r5, [r0, #512]
 159 0032 AB42     		cmp	r3, r5
 160 0034 09D1     		bne	.L11
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 161              		.loc 1 672 30 discriminator 1 view .LVU41
 162 0036 1569     		ldr	r5, [r2, #16]
 163 0038 D0F80832 		ldr	r3, [r0, #520]
 164 003c 9D42     		cmp	r5, r3
 165 003e 04D1     		bne	.L11
 673:source\fatfs/ff.c **** 				Files[i].idx == dp->index) break;
 166              		.loc 1 673 32 view .LVU42
 167 0040 958A     		ldrh	r5, [r2, #20]
 168 0042 B0F80632 		ldrh	r3, [r0, #518]
 169 0046 9D42     		cmp	r5, r3
 170 0048 16D0     		beq	.L18
 171              	.L11:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 172              		.loc 1 670 33 is_stmt 1 discriminator 2 view .LVU43
 173              	.LVL11:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 174              		.loc 1 670 19 discriminator 2 view .LVU44
 677:source\fatfs/ff.c **** 		}
 678:source\fatfs/ff.c **** 	}
 679:source\fatfs/ff.c **** 	if (i == _FS_LOCK)	/* The object is not opened */
 175              		.loc 1 679 2 discriminator 2 view .LVU45
 680:source\fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 176              		.loc 1 680 3 discriminator 2 view .LVU46
 177              		.loc 1 680 35 is_stmt 0 discriminator 2 view .LVU47
 178 004a 74B9     		cbnz	r4, .L19
 179 004c 0229     		cmp	r1, #2
 180 004e 0CBF     		ite	eq
 181 0050 0020     		moveq	r0, #0
 182              	.LVL12:
 183              		.loc 1 680 35 discriminator 2 view .LVU48
 184 0052 1220     		movne	r0, #18
 185              	.LVL13:
 186              	.L23:
 681:source\fatfs/ff.c **** 
 682:source\fatfs/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 683:source\fatfs/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 684:source\fatfs/ff.c **** }
 187              		.loc 1 684 1 view .LVU49
 188 0054 30BD     		pop	{r4, r5, pc}
 189              	.LVL14:
 190              	.L24:
 683:source\fatfs/ff.c **** }
 191              		.loc 1 683 25 discriminator 2 view .LVU50
 192 0056 0C21     		movs	r1, #12
 193              	.LVL15:
 683:source\fatfs/ff.c **** }
 194              		.loc 1 683 25 discriminator 2 view .LVU51
 195 0058 01FB0323 		mla	r3, r1, r3, r2
 683:source\fatfs/ff.c **** }
 196              		.loc 1 683 14 discriminator 2 view .LVU52
 197 005c 5B89     		ldrh	r3, [r3, #10]
 683:source\fatfs/ff.c **** }
 198              		.loc 1 683 52 discriminator 2 view .LVU53
 199 005e B3F5807F 		cmp	r3, #256
 200 0062 14BF     		ite	ne
 201 0064 0020     		movne	r0, #0
 202              	.LVL16:
 683:source\fatfs/ff.c **** }
 203              		.loc 1 683 52 discriminator 2 view .LVU54
 204 0066 1020     		moveq	r0, #16
 205 0068 F4E7     		b	.L23
 206              	.LVL17:
 207              	.L19:
 683:source\fatfs/ff.c **** }
 208              		.loc 1 683 52 view .LVU55
 209 006a 0020     		movs	r0, #0
 210              	.LVL18:
 683:source\fatfs/ff.c **** }
 211              		.loc 1 683 52 view .LVU56
 212 006c F2E7     		b	.L23
 213              	.LVL19:
 214              	.L16:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 215              		.loc 1 670 9 view .LVU57
 216 006e 0023     		movs	r3, #0
 217              	.LVL20:
 218              	.L9:
 679:source\fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 219              		.loc 1 679 2 is_stmt 1 view .LVU58
 683:source\fatfs/ff.c **** }
 220              		.loc 1 683 2 view .LVU59
 683:source\fatfs/ff.c **** }
 221              		.loc 1 683 52 is_stmt 0 view .LVU60
 222 0070 0029     		cmp	r1, #0
 223 0072 F0D0     		beq	.L24
 224 0074 1020     		movs	r0, #16
 225              	.LVL21:
 683:source\fatfs/ff.c **** }
 226              		.loc 1 683 52 view .LVU61
 227 0076 EDE7     		b	.L23
 228              	.LVL22:
 229              	.L18:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 230              		.loc 1 670 34 view .LVU62
 231 0078 0123     		movs	r3, #1
 232 007a F9E7     		b	.L9
 233              	.L26:
 234              		.align	2
 235              	.L25:
 236 007c 00000000 		.word	.LANCHOR0
 237              		.cfi_endproc
 238              	.LFE134:
 240              		.section	.text.inc_lock,"ax",%progbits
 241              		.align	1
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 246              	inc_lock:
 247              	.LVL23:
 248              	.LFB136:
 685:source\fatfs/ff.c **** 
 686:source\fatfs/ff.c **** 
 687:source\fatfs/ff.c **** static
 688:source\fatfs/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 689:source\fatfs/ff.c **** {
 690:source\fatfs/ff.c **** 	UINT i;
 691:source\fatfs/ff.c **** 
 692:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 693:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 694:source\fatfs/ff.c **** }
 695:source\fatfs/ff.c **** 
 696:source\fatfs/ff.c **** 
 697:source\fatfs/ff.c **** static
 698:source\fatfs/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 699:source\fatfs/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 700:source\fatfs/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 701:source\fatfs/ff.c **** )
 702:source\fatfs/ff.c **** {
 249              		.loc 1 702 1 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 703:source\fatfs/ff.c **** 	UINT i;
 253              		.loc 1 703 2 view .LVU64
 704:source\fatfs/ff.c **** 
 705:source\fatfs/ff.c **** 
 706:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 254              		.loc 1 706 2 view .LVU65
 255              		.loc 1 706 14 view .LVU66
 707:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 256              		.loc 1 707 15 is_stmt 0 view .LVU67
 257 0000 244A     		ldr	r2, .L44
 702:source\fatfs/ff.c **** 	UINT i;
 258              		.loc 1 702 1 view .LVU68
 259 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 260              		.cfi_def_cfa_offset 20
 261              		.cfi_offset 4, -20
 262              		.cfi_offset 5, -16
 263              		.cfi_offset 6, -12
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266              		.loc 1 707 15 view .LVU69
 267 0004 1368     		ldr	r3, [r2]
 268              		.loc 1 707 24 view .LVU70
 269 0006 D0F80062 		ldr	r6, [r0, #512]
 270              		.loc 1 707 3 is_stmt 1 view .LVU71
 271              		.loc 1 707 6 is_stmt 0 view .LVU72
 272 000a 9E42     		cmp	r6, r3
 273 000c 09D1     		bne	.L28
 274              		.loc 1 707 29 view .LVU73
 275 000e 5568     		ldr	r5, [r2, #4]
 276 0010 D0F80842 		ldr	r4, [r0, #520]
 277 0014 A542     		cmp	r5, r4
 278 0016 04D1     		bne	.L28
 708:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 279              		.loc 1 708 31 view .LVU74
 280 0018 B0F80652 		ldrh	r5, [r0, #518]
 281 001c 1489     		ldrh	r4, [r2, #8]
 282 001e A542     		cmp	r5, r4
 283 0020 28D0     		beq	.L35
 284              	.L28:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 285              		.loc 1 706 28 is_stmt 1 view .LVU75
 286              	.LVL24:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 287              		.loc 1 706 14 view .LVU76
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 288              		.loc 1 707 3 view .LVU77
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 289              		.loc 1 707 15 is_stmt 0 view .LVU78
 290 0022 D468     		ldr	r4, [r2, #12]
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 291              		.loc 1 707 6 view .LVU79
 292 0024 B442     		cmp	r4, r6
 293 0026 09D1     		bne	.L30
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 294              		.loc 1 707 29 discriminator 1 view .LVU80
 295 0028 1769     		ldr	r7, [r2, #16]
 296 002a D0F80852 		ldr	r5, [r0, #520]
 297 002e AF42     		cmp	r7, r5
 298 0030 04D1     		bne	.L30
 299              		.loc 1 708 31 view .LVU81
 300 0032 978A     		ldrh	r7, [r2, #20]
 301 0034 B0F80652 		ldrh	r5, [r0, #518]
 302 0038 AF42     		cmp	r7, r5
 303 003a 26D0     		beq	.L36
 304              	.L30:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 305              		.loc 1 706 28 is_stmt 1 discriminator 2 view .LVU82
 306              	.LVL25:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 307              		.loc 1 706 14 discriminator 2 view .LVU83
 709:source\fatfs/ff.c **** 			Files[i].idx == dp->index) break;
 710:source\fatfs/ff.c **** 	}
 711:source\fatfs/ff.c **** 
 712:source\fatfs/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 308              		.loc 1 712 2 discriminator 2 view .LVU84
 713:source\fatfs/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 309              		.loc 1 713 15 discriminator 2 view .LVU85
 310              		.loc 1 713 28 is_stmt 0 discriminator 2 view .LVU86
 311 003c 0BB1     		cbz	r3, .L31
 312              		.loc 1 713 49 is_stmt 1 view .LVU87
 313              		.loc 1 713 44 view .LVU88
 314              	.LVL26:
 315              		.loc 1 713 15 view .LVU89
 316              		.loc 1 713 28 is_stmt 0 view .LVU90
 317 003e 34BB     		cbnz	r4, .L40
 318              		.loc 1 713 45 view .LVU91
 319 0040 0123     		movs	r3, #1
 320              	.LVL27:
 321              	.L31:
 714:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 715:source\fatfs/ff.c **** 		Files[i].fs = dp->fs;
 322              		.loc 1 715 3 is_stmt 1 view .LVU92
 323              		.loc 1 715 15 is_stmt 0 view .LVU93
 324 0042 0C24     		movs	r4, #12
 325 0044 5C43     		muls	r4, r3, r4
 326 0046 1519     		adds	r5, r2, r4
 327 0048 1651     		str	r6, [r2, r4]
 716:source\fatfs/ff.c **** 		Files[i].clu = dp->sclust;
 328              		.loc 1 716 3 is_stmt 1 view .LVU94
 329              		.loc 1 716 16 is_stmt 0 view .LVU95
 330 004a D0F80842 		ldr	r4, [r0, #520]
 717:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 331              		.loc 1 717 16 view .LVU96
 332 004e B0F80602 		ldrh	r0, [r0, #518]
 333              	.LVL28:
 334              		.loc 1 717 16 view .LVU97
 335 0052 2881     		strh	r0, [r5, #8]	@ movhi
 718:source\fatfs/ff.c **** 		Files[i].ctr = 0;
 336              		.loc 1 718 16 view .LVU98
 337 0054 0020     		movs	r0, #0
 716:source\fatfs/ff.c **** 		Files[i].clu = dp->sclust;
 338              		.loc 1 716 16 view .LVU99
 339 0056 6C60     		str	r4, [r5, #4]
 717:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 340              		.loc 1 717 3 is_stmt 1 view .LVU100
 341              		.loc 1 718 3 view .LVU101
 342              		.loc 1 718 16 is_stmt 0 view .LVU102
 343 0058 6881     		strh	r0, [r5, #10]	@ movhi
 344              	.LVL29:
 719:source\fatfs/ff.c **** 	}
 720:source\fatfs/ff.c **** 
 721:source\fatfs/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 345              		.loc 1 721 2 is_stmt 1 view .LVU103
 346              		.loc 1 721 5 is_stmt 0 view .LVU104
 347 005a 99B9     		cbnz	r1, .L39
 348              	.L34:
 722:source\fatfs/ff.c **** 
 723:source\fatfs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 349              		.loc 1 723 2 is_stmt 1 discriminator 1 view .LVU105
 350              		.loc 1 723 39 is_stmt 0 discriminator 1 view .LVU106
 351 005c 0C21     		movs	r1, #12
 352              	.LVL30:
 353              		.loc 1 723 39 discriminator 1 view .LVU107
 354 005e 01FB0321 		mla	r1, r1, r3, r2
 355              		.loc 1 723 15 discriminator 1 view .LVU108
 356 0062 4989     		ldrh	r1, [r1, #10]
 357 0064 0131     		adds	r1, r1, #1
 358 0066 89B2     		uxth	r1, r1
 359              	.L33:
 360              		.loc 1 723 15 discriminator 4 view .LVU109
 361 0068 0C20     		movs	r0, #12
 362 006a 00FB0322 		mla	r2, r0, r3, r2
 724:source\fatfs/ff.c **** 
 725:source\fatfs/ff.c **** 	return i + 1;
 363              		.loc 1 725 11 discriminator 4 view .LVU110
 364 006e 581C     		adds	r0, r3, #1
 723:source\fatfs/ff.c **** 
 365              		.loc 1 723 15 discriminator 4 view .LVU111
 366 0070 5181     		strh	r1, [r2, #10]	@ movhi
 367              		.loc 1 725 2 is_stmt 1 discriminator 4 view .LVU112
 368              	.LVL31:
 369              	.L27:
 726:source\fatfs/ff.c **** }
 370              		.loc 1 726 1 is_stmt 0 view .LVU113
 371 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 372              	.LVL32:
 373              	.L35:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 374              		.loc 1 706 9 view .LVU114
 375 0074 0023     		movs	r3, #0
 376              	.LVL33:
 377              	.L29:
 721:source\fatfs/ff.c **** 
 378              		.loc 1 721 2 is_stmt 1 view .LVU115
 721:source\fatfs/ff.c **** 
 379              		.loc 1 721 5 is_stmt 0 view .LVU116
 380 0076 0029     		cmp	r1, #0
 381 0078 F0D0     		beq	.L34
 721:source\fatfs/ff.c **** 
 382              		.loc 1 721 21 discriminator 1 view .LVU117
 383 007a 0C21     		movs	r1, #12
 384              	.LVL34:
 721:source\fatfs/ff.c **** 
 385              		.loc 1 721 21 discriminator 1 view .LVU118
 386 007c 01FB0321 		mla	r1, r1, r3, r2
 721:source\fatfs/ff.c **** 
 387              		.loc 1 721 10 discriminator 1 view .LVU119
 388 0080 4989     		ldrh	r1, [r1, #10]
 389 0082 21B9     		cbnz	r1, .L40
 390              	.LVL35:
 391              	.L39:
 723:source\fatfs/ff.c **** 
 392              		.loc 1 723 15 view .LVU120
 393 0084 4FF48071 		mov	r1, #256
 394 0088 EEE7     		b	.L33
 395              	.LVL36:
 396              	.L36:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 397              		.loc 1 706 29 view .LVU121
 398 008a 0123     		movs	r3, #1
 399 008c F3E7     		b	.L29
 400              	.LVL37:
 401              	.L40:
 714:source\fatfs/ff.c **** 		Files[i].fs = dp->fs;
 402              		.loc 1 714 29 view .LVU122
 403 008e 0020     		movs	r0, #0
 404              	.LVL38:
 714:source\fatfs/ff.c **** 		Files[i].fs = dp->fs;
 405              		.loc 1 714 29 view .LVU123
 406 0090 EFE7     		b	.L27
 407              	.L45:
 408 0092 00BF     		.align	2
 409              	.L44:
 410 0094 00000000 		.word	.LANCHOR0
 411              		.cfi_endproc
 412              	.LFE136:
 414              		.section	.text.dec_lock,"ax",%progbits
 415              		.align	1
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	dec_lock:
 421              	.LVL39:
 422              	.LFB137:
 727:source\fatfs/ff.c **** 
 728:source\fatfs/ff.c **** 
 729:source\fatfs/ff.c **** static
 730:source\fatfs/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 731:source\fatfs/ff.c **** 	UINT i			/* Semaphore index (1..) */
 732:source\fatfs/ff.c **** )
 733:source\fatfs/ff.c **** {
 423              		.loc 1 733 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 734:source\fatfs/ff.c **** 	WORD n;
 428              		.loc 1 734 2 view .LVU125
 735:source\fatfs/ff.c **** 	FRESULT res;
 429              		.loc 1 735 2 view .LVU126
 736:source\fatfs/ff.c **** 
 737:source\fatfs/ff.c **** 
 738:source\fatfs/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 430              		.loc 1 738 2 view .LVU127
 431              		.loc 1 738 5 is_stmt 0 view .LVU128
 432 0000 0138     		subs	r0, r0, #1
 433              	.LVL40:
 434              		.loc 1 738 5 view .LVU129
 435 0002 0128     		cmp	r0, #1
 436 0004 17D8     		bhi	.L52
 739:source\fatfs/ff.c **** 		n = Files[i].ctr;
 437              		.loc 1 739 3 is_stmt 1 view .LVU130
 438              		.loc 1 739 5 is_stmt 0 view .LVU131
 439 0006 0D49     		ldr	r1, .L57
 440 0008 0C22     		movs	r2, #12
 441 000a 02FB0012 		mla	r2, r2, r0, r1
 442 000e 5389     		ldrh	r3, [r2, #10]
 443              	.LVL41:
 740:source\fatfs/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 444              		.loc 1 740 3 is_stmt 1 view .LVU132
 445              		.loc 1 740 6 is_stmt 0 view .LVU133
 446 0010 B3F5807F 		cmp	r3, #256
 447 0014 06D1     		bne	.L48
 448              	.LVL42:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 742:source\fatfs/ff.c **** 		Files[i].ctr = n;
 449              		.loc 1 742 3 is_stmt 1 view .LVU134
 450              		.loc 1 742 16 is_stmt 0 view .LVU135
 451 0016 0023     		movs	r3, #0
 452 0018 5381     		strh	r3, [r2, #10]	@ movhi
 743:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 453              		.loc 1 743 3 is_stmt 1 view .LVU136
 454              	.LVL43:
 455              	.L49:
 456              		.loc 1 743 11 discriminator 1 view .LVU137
 457              		.loc 1 743 23 is_stmt 0 discriminator 1 view .LVU138
 458 001a 0C23     		movs	r3, #12
 459 001c 5843     		muls	r0, r3, r0
 460              	.LVL44:
 461              		.loc 1 743 23 discriminator 1 view .LVU139
 462 001e 0023     		movs	r3, #0
 463 0020 0B50     		str	r3, [r1, r0]
 464 0022 06E0     		b	.L56
 465              	.LVL45:
 466              	.L48:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 467              		.loc 1 741 3 is_stmt 1 view .LVU140
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 468              		.loc 1 741 6 is_stmt 0 view .LVU141
 469 0024 002B     		cmp	r3, #0
 470 0026 F8D0     		beq	.L49
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 471              		.loc 1 741 10 is_stmt 1 discriminator 1 view .LVU142
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 472              		.loc 1 741 11 is_stmt 0 discriminator 1 view .LVU143
 473 0028 013B     		subs	r3, r3, #1
 474              	.LVL46:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 475              		.loc 1 741 11 discriminator 1 view .LVU144
 476 002a 9BB2     		uxth	r3, r3
 477              	.LVL47:
 742:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 478              		.loc 1 742 3 is_stmt 1 discriminator 1 view .LVU145
 742:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 479              		.loc 1 742 16 is_stmt 0 discriminator 1 view .LVU146
 480 002c 5381     		strh	r3, [r2, #10]	@ movhi
 481              		.loc 1 743 3 is_stmt 1 discriminator 1 view .LVU147
 482              		.loc 1 743 6 is_stmt 0 discriminator 1 view .LVU148
 483 002e 002B     		cmp	r3, #0
 484 0030 F3D0     		beq	.L49
 485              	.LVL48:
 486              	.L56:
 744:source\fatfs/ff.c **** 		res = FR_OK;
 487              		.loc 1 744 7 view .LVU149
 488 0032 0020     		movs	r0, #0
 489 0034 7047     		bx	lr
 490              	.LVL49:
 491              	.L52:
 745:source\fatfs/ff.c **** 	} else {
 746:source\fatfs/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 492              		.loc 1 746 7 view .LVU150
 493 0036 0220     		movs	r0, #2
 494              	.LVL50:
 747:source\fatfs/ff.c **** 	}
 748:source\fatfs/ff.c **** 	return res;
 495              		.loc 1 748 2 is_stmt 1 view .LVU151
 749:source\fatfs/ff.c **** }
 496              		.loc 1 749 1 is_stmt 0 view .LVU152
 497 0038 7047     		bx	lr
 498              	.L58:
 499 003a 00BF     		.align	2
 500              	.L57:
 501 003c 00000000 		.word	.LANCHOR0
 502              		.cfi_endproc
 503              	.LFE137:
 505              		.section	.text.clear_lock,"ax",%progbits
 506              		.align	1
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 511              	clear_lock:
 512              	.LVL51:
 513              	.LFB138:
 750:source\fatfs/ff.c **** 
 751:source\fatfs/ff.c **** 
 752:source\fatfs/ff.c **** static
 753:source\fatfs/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 754:source\fatfs/ff.c **** 	FATFS *fs
 755:source\fatfs/ff.c **** )
 756:source\fatfs/ff.c **** {
 514              		.loc 1 756 1 is_stmt 1 view -0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 757:source\fatfs/ff.c **** 	UINT i;
 519              		.loc 1 757 2 view .LVU154
 758:source\fatfs/ff.c **** 
 759:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 520              		.loc 1 759 2 view .LVU155
 521              		.loc 1 759 14 view .LVU156
 760:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 522              		.loc 1 760 3 view .LVU157
 523              		.loc 1 760 15 is_stmt 0 view .LVU158
 524 0000 054B     		ldr	r3, .L62
 525              		.loc 1 760 6 view .LVU159
 526 0002 1A68     		ldr	r2, [r3]
 527 0004 9042     		cmp	r0, r2
 528              		.loc 1 760 26 is_stmt 1 view .LVU160
 529              		.loc 1 760 38 is_stmt 0 view .LVU161
 530 0006 04BF     		itt	eq
 531 0008 0022     		moveq	r2, #0
 532 000a 1A60     		streq	r2, [r3]
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 533              		.loc 1 759 28 is_stmt 1 view .LVU162
 534              	.LVL52:
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 535              		.loc 1 759 14 view .LVU163
 536              		.loc 1 760 3 view .LVU164
 537              		.loc 1 760 6 is_stmt 0 view .LVU165
 538 000c DA68     		ldr	r2, [r3, #12]
 539 000e 9042     		cmp	r0, r2
 540              		.loc 1 760 26 is_stmt 1 view .LVU166
 541              		.loc 1 760 38 is_stmt 0 view .LVU167
 542 0010 04BF     		itt	eq
 543 0012 0022     		moveq	r2, #0
 544 0014 DA60     		streq	r2, [r3, #12]
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 545              		.loc 1 759 28 is_stmt 1 view .LVU168
 546              	.LVL53:
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 547              		.loc 1 759 14 view .LVU169
 761:source\fatfs/ff.c **** 	}
 762:source\fatfs/ff.c **** }
 548              		.loc 1 762 1 is_stmt 0 view .LVU170
 549 0016 7047     		bx	lr
 550              	.L63:
 551              		.align	2
 552              	.L62:
 553 0018 00000000 		.word	.LANCHOR0
 554              		.cfi_endproc
 555              	.LFE138:
 557              		.section	.text.clmt_clust,"ax",%progbits
 558              		.align	1
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 563              	clmt_clust:
 564              	.LVL54:
 565              	.LFB147:
 763:source\fatfs/ff.c **** #endif
 764:source\fatfs/ff.c **** 
 765:source\fatfs/ff.c **** 
 766:source\fatfs/ff.c **** 
 767:source\fatfs/ff.c **** 
 768:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 769:source\fatfs/ff.c **** /* Move/Flush disk access window in the file system object               */
 770:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 771:source\fatfs/ff.c **** #if !_FS_READONLY
 772:source\fatfs/ff.c **** static
 773:source\fatfs/ff.c **** FRESULT sync_window (
 774:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 775:source\fatfs/ff.c **** )
 776:source\fatfs/ff.c **** {
 777:source\fatfs/ff.c **** 	DWORD wsect;
 778:source\fatfs/ff.c **** 	UINT nf;
 779:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 780:source\fatfs/ff.c **** 
 781:source\fatfs/ff.c **** 
 782:source\fatfs/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 783:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 784:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 785:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 786:source\fatfs/ff.c **** 		} else {
 787:source\fatfs/ff.c **** 			fs->wflag = 0;
 788:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 789:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 790:source\fatfs/ff.c **** 					wsect += fs->fsize;
 791:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 792:source\fatfs/ff.c **** 				}
 793:source\fatfs/ff.c **** 			}
 794:source\fatfs/ff.c **** 		}
 795:source\fatfs/ff.c **** 	}
 796:source\fatfs/ff.c **** 	return res;
 797:source\fatfs/ff.c **** }
 798:source\fatfs/ff.c **** #endif
 799:source\fatfs/ff.c **** 
 800:source\fatfs/ff.c **** 
 801:source\fatfs/ff.c **** static
 802:source\fatfs/ff.c **** FRESULT move_window (
 803:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 804:source\fatfs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
 805:source\fatfs/ff.c **** )
 806:source\fatfs/ff.c **** {
 807:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 808:source\fatfs/ff.c **** 
 809:source\fatfs/ff.c **** 
 810:source\fatfs/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 811:source\fatfs/ff.c **** #if !_FS_READONLY
 812:source\fatfs/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 813:source\fatfs/ff.c **** #endif
 814:source\fatfs/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 815:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 816:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 817:source\fatfs/ff.c **** 				res = FR_DISK_ERR;
 818:source\fatfs/ff.c **** 			}
 819:source\fatfs/ff.c **** 			fs->winsect = sector;
 820:source\fatfs/ff.c **** 		}
 821:source\fatfs/ff.c **** 	}
 822:source\fatfs/ff.c **** 	return res;
 823:source\fatfs/ff.c **** }
 824:source\fatfs/ff.c **** 
 825:source\fatfs/ff.c **** 
 826:source\fatfs/ff.c **** 
 827:source\fatfs/ff.c **** 
 828:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 829:source\fatfs/ff.c **** /* Synchronize file system and strage device                             */
 830:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 831:source\fatfs/ff.c **** #if !_FS_READONLY
 832:source\fatfs/ff.c **** static
 833:source\fatfs/ff.c **** FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
 834:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 835:source\fatfs/ff.c **** )
 836:source\fatfs/ff.c **** {
 837:source\fatfs/ff.c **** 	FRESULT res;
 838:source\fatfs/ff.c **** 
 839:source\fatfs/ff.c **** 
 840:source\fatfs/ff.c **** 	res = sync_window(fs);
 841:source\fatfs/ff.c **** 	if (res == FR_OK) {
 842:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 843:source\fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 844:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 845:source\fatfs/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
 846:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 850:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 851:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 852:source\fatfs/ff.c **** 			fs->winsect = fs->volbase + 1;
 853:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 854:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 855:source\fatfs/ff.c **** 		}
 856:source\fatfs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 857:source\fatfs/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 858:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 859:source\fatfs/ff.c **** 	}
 860:source\fatfs/ff.c **** 
 861:source\fatfs/ff.c **** 	return res;
 862:source\fatfs/ff.c **** }
 863:source\fatfs/ff.c **** #endif
 864:source\fatfs/ff.c **** 
 865:source\fatfs/ff.c **** 
 866:source\fatfs/ff.c **** 
 867:source\fatfs/ff.c **** 
 868:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 869:source\fatfs/ff.c **** /* Get sector# from cluster#                                             */
 870:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 871:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 872:source\fatfs/ff.c **** 
 873:source\fatfs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 874:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 875:source\fatfs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 876:source\fatfs/ff.c **** )
 877:source\fatfs/ff.c **** {
 878:source\fatfs/ff.c **** 	clst -= 2;
 879:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 880:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 881:source\fatfs/ff.c **** }
 882:source\fatfs/ff.c **** 
 883:source\fatfs/ff.c **** 
 884:source\fatfs/ff.c **** 
 885:source\fatfs/ff.c **** 
 886:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 887:source\fatfs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 888:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 889:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 890:source\fatfs/ff.c **** 
 891:source\fatfs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 892:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 893:source\fatfs/ff.c **** 	DWORD clst	/* FAT index number (cluster number) to get the value */
 894:source\fatfs/ff.c **** )
 895:source\fatfs/ff.c **** {
 896:source\fatfs/ff.c **** 	UINT wc, bc;
 897:source\fatfs/ff.c **** 	BYTE *p;
 898:source\fatfs/ff.c **** 	DWORD val;
 899:source\fatfs/ff.c **** 
 900:source\fatfs/ff.c **** 
 901:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 902:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 903:source\fatfs/ff.c **** 
 904:source\fatfs/ff.c **** 	} else {
 905:source\fatfs/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 906:source\fatfs/ff.c **** 
 907:source\fatfs/ff.c **** 		switch (fs->fs_type) {
 908:source\fatfs/ff.c **** 		case FS_FAT12 :
 909:source\fatfs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 910:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 911:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 912:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 913:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 914:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 915:source\fatfs/ff.c **** 			break;
 916:source\fatfs/ff.c **** 
 917:source\fatfs/ff.c **** 		case FS_FAT16 :
 918:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 919:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 920:source\fatfs/ff.c **** 			val = LD_WORD(p);
 921:source\fatfs/ff.c **** 			break;
 922:source\fatfs/ff.c **** 
 923:source\fatfs/ff.c **** 		case FS_FAT32 :
 924:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 925:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 926:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 927:source\fatfs/ff.c **** 			break;
 928:source\fatfs/ff.c **** 
 929:source\fatfs/ff.c **** 		default:
 930:source\fatfs/ff.c **** 			val = 1;	/* Internal error */
 931:source\fatfs/ff.c **** 		}
 932:source\fatfs/ff.c **** 	}
 933:source\fatfs/ff.c **** 
 934:source\fatfs/ff.c **** 	return val;
 935:source\fatfs/ff.c **** }
 936:source\fatfs/ff.c **** 
 937:source\fatfs/ff.c **** 
 938:source\fatfs/ff.c **** 
 939:source\fatfs/ff.c **** 
 940:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 941:source\fatfs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 942:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 943:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 944:source\fatfs/ff.c **** 
 945:source\fatfs/ff.c **** #if !_FS_READONLY
 946:source\fatfs/ff.c **** FRESULT put_fat (
 947:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 948:source\fatfs/ff.c **** 	DWORD clst,	/* FAT index number (cluster number) to be changed */
 949:source\fatfs/ff.c **** 	DWORD val	/* New value to be set to the entry */
 950:source\fatfs/ff.c **** )
 951:source\fatfs/ff.c **** {
 952:source\fatfs/ff.c **** 	UINT bc;
 953:source\fatfs/ff.c **** 	BYTE *p;
 954:source\fatfs/ff.c **** 	FRESULT res;
 955:source\fatfs/ff.c **** 
 956:source\fatfs/ff.c **** 
 957:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 958:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 959:source\fatfs/ff.c **** 
 960:source\fatfs/ff.c **** 	} else {
 961:source\fatfs/ff.c **** 		switch (fs->fs_type) {
 962:source\fatfs/ff.c **** 		case FS_FAT12 :
 963:source\fatfs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 964:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 965:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 966:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 967:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 968:source\fatfs/ff.c **** 			fs->wflag = 1;
 969:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 970:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 971:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 972:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 973:source\fatfs/ff.c **** 			fs->wflag = 1;
 974:source\fatfs/ff.c **** 			break;
 975:source\fatfs/ff.c **** 
 976:source\fatfs/ff.c **** 		case FS_FAT16 :
 977:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 978:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 979:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 980:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 981:source\fatfs/ff.c **** 			fs->wflag = 1;
 982:source\fatfs/ff.c **** 			break;
 983:source\fatfs/ff.c **** 
 984:source\fatfs/ff.c **** 		case FS_FAT32 :
 985:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 986:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 987:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 988:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 989:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 990:source\fatfs/ff.c **** 			fs->wflag = 1;
 991:source\fatfs/ff.c **** 			break;
 992:source\fatfs/ff.c **** 
 993:source\fatfs/ff.c **** 		default :
 994:source\fatfs/ff.c **** 			res = FR_INT_ERR;
 995:source\fatfs/ff.c **** 		}
 996:source\fatfs/ff.c **** 	}
 997:source\fatfs/ff.c **** 
 998:source\fatfs/ff.c **** 	return res;
 999:source\fatfs/ff.c **** }
1000:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1001:source\fatfs/ff.c **** 
1002:source\fatfs/ff.c **** 
1003:source\fatfs/ff.c **** 
1004:source\fatfs/ff.c **** 
1005:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1006:source\fatfs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1007:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1008:source\fatfs/ff.c **** #if !_FS_READONLY
1009:source\fatfs/ff.c **** static
1010:source\fatfs/ff.c **** FRESULT remove_chain (
1011:source\fatfs/ff.c **** 	FATFS* fs,			/* File system object */
1012:source\fatfs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
1013:source\fatfs/ff.c **** )
1014:source\fatfs/ff.c **** {
1015:source\fatfs/ff.c **** 	FRESULT res;
1016:source\fatfs/ff.c **** 	DWORD nxt;
1017:source\fatfs/ff.c **** #if _USE_TRIM
1018:source\fatfs/ff.c **** 	DWORD scl = clst, ecl = clst, rt[2];
1019:source\fatfs/ff.c **** #endif
1020:source\fatfs/ff.c **** 
1021:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
1022:source\fatfs/ff.c **** 		res = FR_INT_ERR;
1023:source\fatfs/ff.c **** 
1024:source\fatfs/ff.c **** 	} else {
1025:source\fatfs/ff.c **** 		res = FR_OK;
1026:source\fatfs/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
1027:source\fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
1028:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
1029:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
1030:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
1031:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
1032:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1033:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
1034:source\fatfs/ff.c **** 				fs->free_clust++;
1035:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
1036:source\fatfs/ff.c **** 			}
1037:source\fatfs/ff.c **** #if _USE_TRIM
1038:source\fatfs/ff.c **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1039:source\fatfs/ff.c **** 				ecl = nxt;
1040:source\fatfs/ff.c **** 			} else {				/* End of contiguous clusters */ 
1041:source\fatfs/ff.c **** 				rt[0] = clust2sect(fs, scl);					/* Start sector */
1042:source\fatfs/ff.c **** 				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1043:source\fatfs/ff.c **** 				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
1044:source\fatfs/ff.c **** 				scl = ecl = nxt;
1045:source\fatfs/ff.c **** 			}
1046:source\fatfs/ff.c **** #endif
1047:source\fatfs/ff.c **** 			clst = nxt;	/* Next cluster */
1048:source\fatfs/ff.c **** 		}
1049:source\fatfs/ff.c **** 	}
1050:source\fatfs/ff.c **** 
1051:source\fatfs/ff.c **** 	return res;
1052:source\fatfs/ff.c **** }
1053:source\fatfs/ff.c **** #endif
1054:source\fatfs/ff.c **** 
1055:source\fatfs/ff.c **** 
1056:source\fatfs/ff.c **** 
1057:source\fatfs/ff.c **** 
1058:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1059:source\fatfs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
1060:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1061:source\fatfs/ff.c **** #if !_FS_READONLY
1062:source\fatfs/ff.c **** static
1063:source\fatfs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1064:source\fatfs/ff.c **** 	FATFS* fs,			/* File system object */
1065:source\fatfs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
1066:source\fatfs/ff.c **** )
1067:source\fatfs/ff.c **** {
1068:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
1069:source\fatfs/ff.c **** 	FRESULT res;
1070:source\fatfs/ff.c **** 
1071:source\fatfs/ff.c **** 
1072:source\fatfs/ff.c **** 	if (clst == 0) {		/* Create a new chain */
1073:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
1074:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
1075:source\fatfs/ff.c **** 	}
1076:source\fatfs/ff.c **** 	else {					/* Stretch the current chain */
1077:source\fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
1078:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
1079:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1080:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1081:source\fatfs/ff.c **** 		scl = clst;
1082:source\fatfs/ff.c **** 	}
1083:source\fatfs/ff.c **** 
1084:source\fatfs/ff.c **** 	ncl = scl;				/* Start cluster */
1085:source\fatfs/ff.c **** 	for (;;) {
1086:source\fatfs/ff.c **** 		ncl++;							/* Next cluster */
1087:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
1088:source\fatfs/ff.c **** 			ncl = 2;
1089:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
1090:source\fatfs/ff.c **** 		}
1091:source\fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1092:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1093:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1094:source\fatfs/ff.c **** 			return cs;
1095:source\fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1096:source\fatfs/ff.c **** 	}
1097:source\fatfs/ff.c **** 
1098:source\fatfs/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1099:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
1100:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1101:source\fatfs/ff.c **** 	}
1102:source\fatfs/ff.c **** 	if (res == FR_OK) {
1103:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
1104:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
1105:source\fatfs/ff.c **** 			fs->free_clust--;
1106:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
1107:source\fatfs/ff.c **** 		}
1108:source\fatfs/ff.c **** 	} else {
1109:source\fatfs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1110:source\fatfs/ff.c **** 	}
1111:source\fatfs/ff.c **** 
1112:source\fatfs/ff.c **** 	return ncl;		/* Return new cluster number or error code */
1113:source\fatfs/ff.c **** }
1114:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1115:source\fatfs/ff.c **** 
1116:source\fatfs/ff.c **** 
1117:source\fatfs/ff.c **** 
1118:source\fatfs/ff.c **** 
1119:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1120:source\fatfs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1121:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1122:source\fatfs/ff.c **** 
1123:source\fatfs/ff.c **** #if _USE_FASTSEEK
1124:source\fatfs/ff.c **** static
1125:source\fatfs/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1126:source\fatfs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1127:source\fatfs/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1128:source\fatfs/ff.c **** )
1129:source\fatfs/ff.c **** {
 566              		.loc 1 1129 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
1130:source\fatfs/ff.c **** 	DWORD cl, ncl, *tbl;
 571              		.loc 1 1130 2 view .LVU172
1131:source\fatfs/ff.c **** 
1132:source\fatfs/ff.c **** 
1133:source\fatfs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 572              		.loc 1 1133 2 view .LVU173
 573              		.loc 1 1133 6 is_stmt 0 view .LVU174
 574 0000 D0F82432 		ldr	r3, [r0, #548]
1134:source\fatfs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 575              		.loc 1 1134 32 view .LVU175
 576 0004 D0F80022 		ldr	r2, [r0, #512]
1133:source\fatfs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 577              		.loc 1 1133 6 view .LVU176
 578 0008 0433     		adds	r3, r3, #4
 579              	.LVL55:
 580              		.loc 1 1134 2 is_stmt 1 view .LVU177
 581              		.loc 1 1134 32 is_stmt 0 view .LVU178
 582 000a 92F80222 		ldrb	r2, [r2, #514]	@ zero_extendqisi2
 583              		.loc 1 1134 11 view .LVU179
 584 000e 490A     		lsrs	r1, r1, #9
 585              	.LVL56:
 586              		.loc 1 1134 5 view .LVU180
 587 0010 B1FBF2F1 		udiv	r1, r1, r2
 588              	.LVL57:
 589              	.L67:
1135:source\fatfs/ff.c **** 	for (;;) {
 590              		.loc 1 1135 2 is_stmt 1 view .LVU181
1136:source\fatfs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 591              		.loc 1 1136 3 view .LVU182
 592              		.loc 1 1136 7 is_stmt 0 view .LVU183
 593 0014 1868     		ldr	r0, [r3]
 594              	.LVL58:
1137:source\fatfs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
 595              		.loc 1 1137 3 is_stmt 1 view .LVU184
 596              		.loc 1 1137 6 is_stmt 0 view .LVU185
 597 0016 30B1     		cbz	r0, .L64
1138:source\fatfs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 598              		.loc 1 1138 3 is_stmt 1 view .LVU186
 599              		.loc 1 1138 6 is_stmt 0 view .LVU187
 600 0018 8142     		cmp	r1, r0
 601 001a 02D3     		bcc	.L66
1139:source\fatfs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 602              		.loc 1 1139 3 is_stmt 1 view .LVU188
 603              		.loc 1 1139 6 is_stmt 0 view .LVU189
 604 001c 091A     		subs	r1, r1, r0
 605              	.LVL59:
 606              		.loc 1 1139 14 is_stmt 1 view .LVU190
 607 001e 0833     		adds	r3, r3, #8
 608              	.LVL60:
1135:source\fatfs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 609              		.loc 1 1135 8 view .LVU191
1136:source\fatfs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
 610              		.loc 1 1136 7 is_stmt 0 view .LVU192
 611 0020 F8E7     		b	.L67
 612              	.LVL61:
 613              	.L66:
1140:source\fatfs/ff.c **** 	}
1141:source\fatfs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 614              		.loc 1 1141 2 is_stmt 1 view .LVU193
 615              		.loc 1 1141 12 is_stmt 0 view .LVU194
 616 0022 5868     		ldr	r0, [r3, #4]
 617              	.LVL62:
 618              		.loc 1 1141 12 view .LVU195
 619 0024 0844     		add	r0, r0, r1
 620              	.L64:
1142:source\fatfs/ff.c **** }
 621              		.loc 1 1142 1 view .LVU196
 622 0026 7047     		bx	lr
 623              		.cfi_endproc
 624              	.LFE147:
 626              		.section	.text.sum_sfn,"ax",%progbits
 627              		.align	1
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	sum_sfn:
 633              	.LVL63:
 634              	.LFB157:
1143:source\fatfs/ff.c **** #endif	/* _USE_FASTSEEK */
1144:source\fatfs/ff.c **** 
1145:source\fatfs/ff.c **** 
1146:source\fatfs/ff.c **** 
1147:source\fatfs/ff.c **** 
1148:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1149:source\fatfs/ff.c **** /* Directory handling - Set directory index                              */
1150:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1151:source\fatfs/ff.c **** 
1152:source\fatfs/ff.c **** static
1153:source\fatfs/ff.c **** FRESULT dir_sdi (
1154:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1155:source\fatfs/ff.c **** 	UINT idx		/* Index of directory table */
1156:source\fatfs/ff.c **** )
1157:source\fatfs/ff.c **** {
1158:source\fatfs/ff.c **** 	DWORD clst, sect;
1159:source\fatfs/ff.c **** 	UINT ic;
1160:source\fatfs/ff.c **** 
1161:source\fatfs/ff.c **** 
1162:source\fatfs/ff.c **** 	dp->index = (WORD)idx;	/* Current index */
1163:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
1164:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
1165:source\fatfs/ff.c **** 		return FR_INT_ERR;
1166:source\fatfs/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1167:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
1168:source\fatfs/ff.c **** 
1169:source\fatfs/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1170:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
1171:source\fatfs/ff.c **** 			return FR_INT_ERR;
1172:source\fatfs/ff.c **** 		sect = dp->fs->dirbase;
1173:source\fatfs/ff.c **** 	}
1174:source\fatfs/ff.c **** 	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
1175:source\fatfs/ff.c **** 		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
1176:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
1177:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
1178:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1179:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
1180:source\fatfs/ff.c **** 				return FR_INT_ERR;
1181:source\fatfs/ff.c **** 			idx -= ic;
1182:source\fatfs/ff.c **** 		}
1183:source\fatfs/ff.c **** 		sect = clust2sect(dp->fs, clst);
1184:source\fatfs/ff.c **** 	}
1185:source\fatfs/ff.c **** 	dp->clust = clst;	/* Current cluster# */
1186:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
1187:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
1188:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
1189:source\fatfs/ff.c **** 
1190:source\fatfs/ff.c **** 	return FR_OK;
1191:source\fatfs/ff.c **** }
1192:source\fatfs/ff.c **** 
1193:source\fatfs/ff.c **** 
1194:source\fatfs/ff.c **** 
1195:source\fatfs/ff.c **** 
1196:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1197:source\fatfs/ff.c **** /* Directory handling - Move directory table index next                  */
1198:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1199:source\fatfs/ff.c **** 
1200:source\fatfs/ff.c **** static
1201:source\fatfs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1202:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1203:source\fatfs/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1204:source\fatfs/ff.c **** )
1205:source\fatfs/ff.c **** {
1206:source\fatfs/ff.c **** 	DWORD clst;
1207:source\fatfs/ff.c **** 	UINT i;
1208:source\fatfs/ff.c **** #if !_FS_READONLY
1209:source\fatfs/ff.c **** 	UINT c;
1210:source\fatfs/ff.c **** #endif
1211:source\fatfs/ff.c **** 
1212:source\fatfs/ff.c **** 
1213:source\fatfs/ff.c **** 	i = dp->index + 1;
1214:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
1215:source\fatfs/ff.c **** 		return FR_NO_FILE;
1216:source\fatfs/ff.c **** 
1217:source\fatfs/ff.c **** 	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
1218:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
1219:source\fatfs/ff.c **** 
1220:source\fatfs/ff.c **** 		if (!dp->clust) {		/* Static table */
1221:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
1222:source\fatfs/ff.c **** 				return FR_NO_FILE;
1223:source\fatfs/ff.c **** 		}
1224:source\fatfs/ff.c **** 		else {					/* Dynamic table */
1225:source\fatfs/ff.c **** 			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
1226:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
1227:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
1228:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1229:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
1230:source\fatfs/ff.c **** #if !_FS_READONLY
1231:source\fatfs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
1232:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
1233:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1234:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
1235:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1236:source\fatfs/ff.c **** 					/* Clean-up stretched table */
1237:source\fatfs/ff.c **** 					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
1238:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
1239:source\fatfs/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
1240:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
1241:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
1242:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
1243:source\fatfs/ff.c **** 						dp->fs->winsect++;
1244:source\fatfs/ff.c **** 					}
1245:source\fatfs/ff.c **** 					dp->fs->winsect -= c;						/* Rewind window offset */
1246:source\fatfs/ff.c **** #else
1247:source\fatfs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warni
1248:source\fatfs/ff.c **** 					return FR_NO_FILE;							/* Report EOT */
1249:source\fatfs/ff.c **** #endif
1250:source\fatfs/ff.c **** 				}
1251:source\fatfs/ff.c **** 				dp->clust = clst;				/* Initialize data for new cluster */
1252:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
1253:source\fatfs/ff.c **** 			}
1254:source\fatfs/ff.c **** 		}
1255:source\fatfs/ff.c **** 	}
1256:source\fatfs/ff.c **** 
1257:source\fatfs/ff.c **** 	dp->index = (WORD)i;	/* Current index */
1258:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
1259:source\fatfs/ff.c **** 
1260:source\fatfs/ff.c **** 	return FR_OK;
1261:source\fatfs/ff.c **** }
1262:source\fatfs/ff.c **** 
1263:source\fatfs/ff.c **** 
1264:source\fatfs/ff.c **** 
1265:source\fatfs/ff.c **** 
1266:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1267:source\fatfs/ff.c **** /* Directory handling - Reserve directory entry                          */
1268:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1269:source\fatfs/ff.c **** 
1270:source\fatfs/ff.c **** #if !_FS_READONLY
1271:source\fatfs/ff.c **** static
1272:source\fatfs/ff.c **** FRESULT dir_alloc (
1273:source\fatfs/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
1274:source\fatfs/ff.c **** 	UINT nent	/* Number of contiguous entries to allocate (1-21) */
1275:source\fatfs/ff.c **** )
1276:source\fatfs/ff.c **** {
1277:source\fatfs/ff.c **** 	FRESULT res;
1278:source\fatfs/ff.c **** 	UINT n;
1279:source\fatfs/ff.c **** 
1280:source\fatfs/ff.c **** 
1281:source\fatfs/ff.c **** 	res = dir_sdi(dp, 0);
1282:source\fatfs/ff.c **** 	if (res == FR_OK) {
1283:source\fatfs/ff.c **** 		n = 0;
1284:source\fatfs/ff.c **** 		do {
1285:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
1286:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1287:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
1288:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1289:source\fatfs/ff.c **** 			} else {
1290:source\fatfs/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1291:source\fatfs/ff.c **** 			}
1292:source\fatfs/ff.c **** 			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
1293:source\fatfs/ff.c **** 		} while (res == FR_OK);
1294:source\fatfs/ff.c **** 	}
1295:source\fatfs/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1296:source\fatfs/ff.c **** 	return res;
1297:source\fatfs/ff.c **** }
1298:source\fatfs/ff.c **** #endif
1299:source\fatfs/ff.c **** 
1300:source\fatfs/ff.c **** 
1301:source\fatfs/ff.c **** 
1302:source\fatfs/ff.c **** 
1303:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1304:source\fatfs/ff.c **** /* Directory handling - Load/Store start cluster number                  */
1305:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1306:source\fatfs/ff.c **** 
1307:source\fatfs/ff.c **** static
1308:source\fatfs/ff.c **** DWORD ld_clust (
1309:source\fatfs/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1310:source\fatfs/ff.c **** 	BYTE* dir	/* Pointer to the directory entry */
1311:source\fatfs/ff.c **** )
1312:source\fatfs/ff.c **** {
1313:source\fatfs/ff.c **** 	DWORD cl;
1314:source\fatfs/ff.c **** 
1315:source\fatfs/ff.c **** 	cl = LD_WORD(dir + DIR_FstClusLO);
1316:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
1317:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
1318:source\fatfs/ff.c **** 
1319:source\fatfs/ff.c **** 	return cl;
1320:source\fatfs/ff.c **** }
1321:source\fatfs/ff.c **** 
1322:source\fatfs/ff.c **** 
1323:source\fatfs/ff.c **** #if !_FS_READONLY
1324:source\fatfs/ff.c **** static
1325:source\fatfs/ff.c **** void st_clust (
1326:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
1327:source\fatfs/ff.c **** 	DWORD cl	/* Value to be set */
1328:source\fatfs/ff.c **** )
1329:source\fatfs/ff.c **** {
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusLO, cl);
1331:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
1332:source\fatfs/ff.c **** }
1333:source\fatfs/ff.c **** #endif
1334:source\fatfs/ff.c **** 
1335:source\fatfs/ff.c **** 
1336:source\fatfs/ff.c **** 
1337:source\fatfs/ff.c **** 
1338:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1339:source\fatfs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1340:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1341:source\fatfs/ff.c **** #if _USE_LFN
1342:source\fatfs/ff.c **** static
1343:source\fatfs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1344:source\fatfs/ff.c **** 
1345:source\fatfs/ff.c **** 
1346:source\fatfs/ff.c **** static
1347:source\fatfs/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1348:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
1349:source\fatfs/ff.c **** 	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
1350:source\fatfs/ff.c **** )
1351:source\fatfs/ff.c **** {
1352:source\fatfs/ff.c **** 	UINT i, s;
1353:source\fatfs/ff.c **** 	WCHAR wc, uc;
1354:source\fatfs/ff.c **** 
1355:source\fatfs/ff.c **** 
1356:source\fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
1357:source\fatfs/ff.c **** 	s = 0; wc = 1;
1358:source\fatfs/ff.c **** 	do {
1359:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
1360:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
1361:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1362:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1363:source\fatfs/ff.c **** 				return 0;				/* Not matched */
1364:source\fatfs/ff.c **** 		} else {
1365:source\fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1366:source\fatfs/ff.c **** 		}
1367:source\fatfs/ff.c **** 	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
1368:source\fatfs/ff.c **** 
1369:source\fatfs/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
1370:source\fatfs/ff.c **** 		return 0;
1371:source\fatfs/ff.c **** 
1372:source\fatfs/ff.c **** 	return 1;						/* The part of LFN matched */
1373:source\fatfs/ff.c **** }
1374:source\fatfs/ff.c **** 
1375:source\fatfs/ff.c **** 
1376:source\fatfs/ff.c **** 
1377:source\fatfs/ff.c **** static
1378:source\fatfs/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1379:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1380:source\fatfs/ff.c **** 	BYTE* dir			/* Pointer to the directory entry */
1381:source\fatfs/ff.c **** )
1382:source\fatfs/ff.c **** {
1383:source\fatfs/ff.c **** 	UINT i, s;
1384:source\fatfs/ff.c **** 	WCHAR wc, uc;
1385:source\fatfs/ff.c **** 
1386:source\fatfs/ff.c **** 
1387:source\fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1388:source\fatfs/ff.c **** 
1389:source\fatfs/ff.c **** 	s = 0; wc = 1;
1390:source\fatfs/ff.c **** 	do {
1391:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
1392:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
1393:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1394:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1395:source\fatfs/ff.c **** 		} else {
1396:source\fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1397:source\fatfs/ff.c **** 		}
1398:source\fatfs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1399:source\fatfs/ff.c **** 
1400:source\fatfs/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1401:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1402:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
1403:source\fatfs/ff.c **** 	}
1404:source\fatfs/ff.c **** 
1405:source\fatfs/ff.c **** 	return 1;
1406:source\fatfs/ff.c **** }
1407:source\fatfs/ff.c **** 
1408:source\fatfs/ff.c **** 
1409:source\fatfs/ff.c **** #if !_FS_READONLY
1410:source\fatfs/ff.c **** static
1411:source\fatfs/ff.c **** void fit_lfn (
1412:source\fatfs/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
1413:source\fatfs/ff.c **** 	BYTE* dir,				/* Pointer to the directory entry */
1414:source\fatfs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1415:source\fatfs/ff.c **** 	BYTE sum				/* SFN sum */
1416:source\fatfs/ff.c **** )
1417:source\fatfs/ff.c **** {
1418:source\fatfs/ff.c **** 	UINT i, s;
1419:source\fatfs/ff.c **** 	WCHAR wc;
1420:source\fatfs/ff.c **** 
1421:source\fatfs/ff.c **** 
1422:source\fatfs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1423:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1424:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
1425:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
1426:source\fatfs/ff.c **** 
1427:source\fatfs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1428:source\fatfs/ff.c **** 	s = wc = 0;
1429:source\fatfs/ff.c **** 	do {
1430:source\fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
1431:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1432:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
1433:source\fatfs/ff.c **** 	} while (++s < 13);
1434:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
1435:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1436:source\fatfs/ff.c **** }
1437:source\fatfs/ff.c **** 
1438:source\fatfs/ff.c **** #endif
1439:source\fatfs/ff.c **** #endif
1440:source\fatfs/ff.c **** 
1441:source\fatfs/ff.c **** 
1442:source\fatfs/ff.c **** 
1443:source\fatfs/ff.c **** 
1444:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1445:source\fatfs/ff.c **** /* Create numbered name                                                  */
1446:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1447:source\fatfs/ff.c **** #if _USE_LFN
1448:source\fatfs/ff.c **** static
1449:source\fatfs/ff.c **** void gen_numname (
1450:source\fatfs/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1451:source\fatfs/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1452:source\fatfs/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1453:source\fatfs/ff.c **** 	UINT seq			/* Sequence number */
1454:source\fatfs/ff.c **** )
1455:source\fatfs/ff.c **** {
1456:source\fatfs/ff.c **** 	BYTE ns[8], c;
1457:source\fatfs/ff.c **** 	UINT i, j;
1458:source\fatfs/ff.c **** 	WCHAR wc;
1459:source\fatfs/ff.c **** 	DWORD sr;
1460:source\fatfs/ff.c **** 
1461:source\fatfs/ff.c **** 
1462:source\fatfs/ff.c **** 	mem_cpy(dst, src, 11);
1463:source\fatfs/ff.c **** 
1464:source\fatfs/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1465:source\fatfs/ff.c **** 		sr = seq;
1466:source\fatfs/ff.c **** 		while (*lfn) {	/* Create a CRC */
1467:source\fatfs/ff.c **** 			wc = *lfn++;
1468:source\fatfs/ff.c **** 			for (i = 0; i < 16; i++) {
1469:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
1470:source\fatfs/ff.c **** 				wc >>= 1;
1471:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1472:source\fatfs/ff.c **** 			}
1473:source\fatfs/ff.c **** 		}
1474:source\fatfs/ff.c **** 		seq = (UINT)sr;
1475:source\fatfs/ff.c **** 	}
1476:source\fatfs/ff.c **** 
1477:source\fatfs/ff.c **** 	/* itoa (hexdecimal) */
1478:source\fatfs/ff.c **** 	i = 7;
1479:source\fatfs/ff.c **** 	do {
1480:source\fatfs/ff.c **** 		c = (seq % 16) + '0';
1481:source\fatfs/ff.c **** 		if (c > '9') c += 7;
1482:source\fatfs/ff.c **** 		ns[i--] = c;
1483:source\fatfs/ff.c **** 		seq /= 16;
1484:source\fatfs/ff.c **** 	} while (seq);
1485:source\fatfs/ff.c **** 	ns[i] = '~';
1486:source\fatfs/ff.c **** 
1487:source\fatfs/ff.c **** 	/* Append the number */
1488:source\fatfs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1489:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
1490:source\fatfs/ff.c **** 			if (j == i - 1) break;
1491:source\fatfs/ff.c **** 			j++;
1492:source\fatfs/ff.c **** 		}
1493:source\fatfs/ff.c **** 	}
1494:source\fatfs/ff.c **** 	do {
1495:source\fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1496:source\fatfs/ff.c **** 	} while (j < 8);
1497:source\fatfs/ff.c **** }
1498:source\fatfs/ff.c **** #endif
1499:source\fatfs/ff.c **** 
1500:source\fatfs/ff.c **** 
1501:source\fatfs/ff.c **** 
1502:source\fatfs/ff.c **** 
1503:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1504:source\fatfs/ff.c **** /* Calculate sum of an SFN                                               */
1505:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1506:source\fatfs/ff.c **** #if _USE_LFN
1507:source\fatfs/ff.c **** static
1508:source\fatfs/ff.c **** BYTE sum_sfn (
1509:source\fatfs/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1510:source\fatfs/ff.c **** )
1511:source\fatfs/ff.c **** {
 635              		.loc 1 1511 1 is_stmt 1 view -0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
1512:source\fatfs/ff.c **** 	BYTE sum = 0;
 640              		.loc 1 1512 2 view .LVU198
1513:source\fatfs/ff.c **** 	UINT n = 11;
 641              		.loc 1 1513 2 view .LVU199
 642              		.loc 1 1513 2 is_stmt 0 view .LVU200
 643 0000 00F10B01 		add	r1, r0, #11
1512:source\fatfs/ff.c **** 	BYTE sum = 0;
 644              		.loc 1 1512 7 view .LVU201
 645 0004 0022     		movs	r2, #0
 646              	.LVL64:
 647              	.L72:
1514:source\fatfs/ff.c **** 
1515:source\fatfs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 648              		.loc 1 1515 2 is_stmt 1 discriminator 1 view .LVU202
 649              		.loc 1 1515 5 discriminator 1 view .LVU203
 650              		.loc 1 1515 22 is_stmt 0 discriminator 1 view .LVU204
 651 0006 D301     		lsls	r3, r2, #7
 652 0008 43EA5203 		orr	r3, r3, r2, lsr #1
 653              		.loc 1 1515 9 discriminator 1 view .LVU205
 654 000c 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 655              	.LVL65:
 656              		.loc 1 1515 9 discriminator 1 view .LVU206
 657 0010 52FA83F3 		uxtab	r3, r2, r3
 658              		.loc 1 1515 2 discriminator 1 view .LVU207
 659 0014 8842     		cmp	r0, r1
 660              		.loc 1 1515 9 discriminator 1 view .LVU208
 661 0016 DAB2     		uxtb	r2, r3
 662              	.LVL66:
 663              		.loc 1 1515 51 is_stmt 1 discriminator 1 view .LVU209
 664              		.loc 1 1515 2 is_stmt 0 discriminator 1 view .LVU210
 665 0018 F5D1     		bne	.L72
1516:source\fatfs/ff.c **** 	return sum;
 666              		.loc 1 1516 2 is_stmt 1 view .LVU211
1517:source\fatfs/ff.c **** }
 667              		.loc 1 1517 1 is_stmt 0 view .LVU212
 668 001a 1046     		mov	r0, r2
 669              	.LVL67:
 670              		.loc 1 1517 1 view .LVU213
 671 001c 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE157:
 675              		.section	.text.get_ldnumber,"ax",%progbits
 676              		.align	1
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 681              	get_ldnumber:
 682              	.LVL68:
 683              	.LFB165:
1518:source\fatfs/ff.c **** #endif
1519:source\fatfs/ff.c **** 
1520:source\fatfs/ff.c **** 
1521:source\fatfs/ff.c **** 
1522:source\fatfs/ff.c **** 
1523:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1524:source\fatfs/ff.c **** /* Directory handling - Find an object in the directory                  */
1525:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1526:source\fatfs/ff.c **** 
1527:source\fatfs/ff.c **** static
1528:source\fatfs/ff.c **** FRESULT dir_find (
1529:source\fatfs/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
1530:source\fatfs/ff.c **** )
1531:source\fatfs/ff.c **** {
1532:source\fatfs/ff.c **** 	FRESULT res;
1533:source\fatfs/ff.c **** 	BYTE c, *dir;
1534:source\fatfs/ff.c **** #if _USE_LFN
1535:source\fatfs/ff.c **** 	BYTE a, ord, sum;
1536:source\fatfs/ff.c **** #endif
1537:source\fatfs/ff.c **** 
1538:source\fatfs/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
1539:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
1540:source\fatfs/ff.c **** 
1541:source\fatfs/ff.c **** #if _USE_LFN
1542:source\fatfs/ff.c **** 	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1543:source\fatfs/ff.c **** #endif
1544:source\fatfs/ff.c **** 	do {
1545:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1546:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1547:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
1548:source\fatfs/ff.c **** 		c = dir[DIR_Name];
1549:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1550:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1551:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1552:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1553:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1554:source\fatfs/ff.c **** 		} else {
1555:source\fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1556:source\fatfs/ff.c **** 				if (dp->lfn) {
1557:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
1558:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
1559:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
1560:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
1561:source\fatfs/ff.c **** 					}
1562:source\fatfs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1563:source\fatfs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1564:source\fatfs/ff.c **** 				}
1565:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1566:source\fatfs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1567:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
1568:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1569:source\fatfs/ff.c **** 			}
1570:source\fatfs/ff.c **** 		}
1571:source\fatfs/ff.c **** #else		/* Non LFN configuration */
1572:source\fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
1573:source\fatfs/ff.c **** 			break;
1574:source\fatfs/ff.c **** #endif
1575:source\fatfs/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
1576:source\fatfs/ff.c **** 	} while (res == FR_OK);
1577:source\fatfs/ff.c **** 
1578:source\fatfs/ff.c **** 	return res;
1579:source\fatfs/ff.c **** }
1580:source\fatfs/ff.c **** 
1581:source\fatfs/ff.c **** 
1582:source\fatfs/ff.c **** 
1583:source\fatfs/ff.c **** 
1584:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1585:source\fatfs/ff.c **** /* Read an object from the directory                                     */
1586:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1587:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
1588:source\fatfs/ff.c **** static
1589:source\fatfs/ff.c **** FRESULT dir_read (
1590:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:source\fatfs/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
1592:source\fatfs/ff.c **** )
1593:source\fatfs/ff.c **** {
1594:source\fatfs/ff.c **** 	FRESULT res;
1595:source\fatfs/ff.c **** 	BYTE a, c, *dir;
1596:source\fatfs/ff.c **** #if _USE_LFN
1597:source\fatfs/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
1598:source\fatfs/ff.c **** #endif
1599:source\fatfs/ff.c **** 
1600:source\fatfs/ff.c **** 	res = FR_NO_FILE;
1601:source\fatfs/ff.c **** 	while (dp->sect) {
1602:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1603:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1604:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
1605:source\fatfs/ff.c **** 		c = dir[DIR_Name];
1606:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1607:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1608:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1609:source\fatfs/ff.c **** 		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry
1610:source\fatfs/ff.c **** 			ord = 0xFF;
1611:source\fatfs/ff.c **** 		} else {
1612:source\fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1613:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
1614:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
1615:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
1616:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
1617:source\fatfs/ff.c **** 				}
1618:source\fatfs/ff.c **** 				/* Check LFN validity and capture it */
1619:source\fatfs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1620:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1621:source\fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1622:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
1623:source\fatfs/ff.c **** 				break;
1624:source\fatfs/ff.c **** 			}
1625:source\fatfs/ff.c **** 		}
1626:source\fatfs/ff.c **** #else		/* Non LFN configuration */
1627:source\fatfs/ff.c **** 		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)
1628:source\fatfs/ff.c **** 			break;
1629:source\fatfs/ff.c **** #endif
1630:source\fatfs/ff.c **** 		res = dir_next(dp, 0);				/* Next entry */
1631:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1632:source\fatfs/ff.c **** 	}
1633:source\fatfs/ff.c **** 
1634:source\fatfs/ff.c **** 	if (res != FR_OK) dp->sect = 0;
1635:source\fatfs/ff.c **** 
1636:source\fatfs/ff.c **** 	return res;
1637:source\fatfs/ff.c **** }
1638:source\fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
1639:source\fatfs/ff.c **** 
1640:source\fatfs/ff.c **** 
1641:source\fatfs/ff.c **** 
1642:source\fatfs/ff.c **** 
1643:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1644:source\fatfs/ff.c **** /* Register an object to the directory                                   */
1645:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1646:source\fatfs/ff.c **** #if !_FS_READONLY
1647:source\fatfs/ff.c **** static
1648:source\fatfs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1649:source\fatfs/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
1650:source\fatfs/ff.c **** )
1651:source\fatfs/ff.c **** {
1652:source\fatfs/ff.c **** 	FRESULT res;
1653:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1654:source\fatfs/ff.c **** 	UINT n, nent;
1655:source\fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
1656:source\fatfs/ff.c **** 	WCHAR *lfn;
1657:source\fatfs/ff.c **** 
1658:source\fatfs/ff.c **** 
1659:source\fatfs/ff.c **** 	fn = dp->fn; lfn = dp->lfn;
1660:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
1661:source\fatfs/ff.c **** 
1662:source\fatfs/ff.c **** 	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
1663:source\fatfs/ff.c **** 		return FR_INVALID_NAME;
1664:source\fatfs/ff.c **** 
1665:source\fatfs/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1666:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
1667:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
1668:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1669:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1670:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1671:source\fatfs/ff.c **** 		}
1672:source\fatfs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1673:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1674:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
1675:source\fatfs/ff.c **** 	}
1676:source\fatfs/ff.c **** 
1677:source\fatfs/ff.c **** 	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
1678:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
1679:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
1680:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
1681:source\fatfs/ff.c **** 		nent = 1;
1682:source\fatfs/ff.c **** 	}
1683:source\fatfs/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
1684:source\fatfs/ff.c **** 
1685:source\fatfs/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1686:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
1687:source\fatfs/ff.c **** 		if (res == FR_OK) {
1688:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
1689:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1690:source\fatfs/ff.c **** 				res = move_window(dp->fs, dp->sect);
1691:source\fatfs/ff.c **** 				if (res != FR_OK) break;
1692:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
1693:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
1694:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
1695:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
1696:source\fatfs/ff.c **** 		}
1697:source\fatfs/ff.c **** 	}
1698:source\fatfs/ff.c **** #else	/* Non LFN configuration */
1699:source\fatfs/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
1700:source\fatfs/ff.c **** #endif
1701:source\fatfs/ff.c **** 
1702:source\fatfs/ff.c **** 	if (res == FR_OK) {				/* Set SFN entry */
1703:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1704:source\fatfs/ff.c **** 		if (res == FR_OK) {
1705:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
1706:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
1707:source\fatfs/ff.c **** #if _USE_LFN
1708:source\fatfs/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1709:source\fatfs/ff.c **** #endif
1710:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1711:source\fatfs/ff.c **** 		}
1712:source\fatfs/ff.c **** 	}
1713:source\fatfs/ff.c **** 
1714:source\fatfs/ff.c **** 	return res;
1715:source\fatfs/ff.c **** }
1716:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1717:source\fatfs/ff.c **** 
1718:source\fatfs/ff.c **** 
1719:source\fatfs/ff.c **** 
1720:source\fatfs/ff.c **** 
1721:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1722:source\fatfs/ff.c **** /* Remove an object from the directory                                   */
1723:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1724:source\fatfs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1725:source\fatfs/ff.c **** static
1726:source\fatfs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1727:source\fatfs/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
1728:source\fatfs/ff.c **** )
1729:source\fatfs/ff.c **** {
1730:source\fatfs/ff.c **** 	FRESULT res;
1731:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1732:source\fatfs/ff.c **** 	UINT i;
1733:source\fatfs/ff.c **** 
1734:source\fatfs/ff.c **** 	i = dp->index;	/* SFN index */
1735:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
1736:source\fatfs/ff.c **** 	if (res == FR_OK) {
1737:source\fatfs/ff.c **** 		do {
1738:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
1739:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1740:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
1741:source\fatfs/ff.c **** 			*dp->dir = DDEM;
1742:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1743:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1744:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
1745:source\fatfs/ff.c **** 		} while (res == FR_OK);
1746:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1747:source\fatfs/ff.c **** 	}
1748:source\fatfs/ff.c **** 
1749:source\fatfs/ff.c **** #else			/* Non LFN configuration */
1750:source\fatfs/ff.c **** 	res = dir_sdi(dp, dp->index);
1751:source\fatfs/ff.c **** 	if (res == FR_OK) {
1752:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1753:source\fatfs/ff.c **** 		if (res == FR_OK) {
1754:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
1755:source\fatfs/ff.c **** 			*dp->dir = DDEM;
1756:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1757:source\fatfs/ff.c **** 		}
1758:source\fatfs/ff.c **** 	}
1759:source\fatfs/ff.c **** #endif
1760:source\fatfs/ff.c **** 
1761:source\fatfs/ff.c **** 	return res;
1762:source\fatfs/ff.c **** }
1763:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1764:source\fatfs/ff.c **** 
1765:source\fatfs/ff.c **** 
1766:source\fatfs/ff.c **** 
1767:source\fatfs/ff.c **** 
1768:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1769:source\fatfs/ff.c **** /* Get file information from directory entry                             */
1770:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1771:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1772:source\fatfs/ff.c **** static
1773:source\fatfs/ff.c **** void get_fileinfo (		/* No return code */
1774:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1775:source\fatfs/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
1776:source\fatfs/ff.c **** )
1777:source\fatfs/ff.c **** {
1778:source\fatfs/ff.c **** 	UINT i;
1779:source\fatfs/ff.c **** 	TCHAR *p, c;
1780:source\fatfs/ff.c **** 	BYTE *dir;
1781:source\fatfs/ff.c **** #if _USE_LFN
1782:source\fatfs/ff.c **** 	WCHAR w, *lfn;
1783:source\fatfs/ff.c **** #endif
1784:source\fatfs/ff.c **** 
1785:source\fatfs/ff.c **** 	p = fno->fname;
1786:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
1787:source\fatfs/ff.c **** 		dir = dp->dir;
1788:source\fatfs/ff.c **** 		i = 0;
1789:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
1790:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
1791:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
1792:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
1793:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
1794:source\fatfs/ff.c **** #if _USE_LFN
1795:source\fatfs/ff.c **** 			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
1796:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
1797:source\fatfs/ff.c **** #if _LFN_UNICODE
1798:source\fatfs/ff.c **** 			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
1799:source\fatfs/ff.c **** 				c = c << 8 | dir[i++];
1800:source\fatfs/ff.c **** 			c = ff_convert(c, 1);	/* OEM -> Unicode */
1801:source\fatfs/ff.c **** 			if (!c) c = '?';
1802:source\fatfs/ff.c **** #endif
1803:source\fatfs/ff.c **** #endif
1804:source\fatfs/ff.c **** 			*p++ = c;
1805:source\fatfs/ff.c **** 		}
1806:source\fatfs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1807:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
1808:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
1809:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
1810:source\fatfs/ff.c **** 	}
1811:source\fatfs/ff.c **** 	*p = 0;		/* Terminate SFN string by a \0 */
1812:source\fatfs/ff.c **** 
1813:source\fatfs/ff.c **** #if _USE_LFN
1814:source\fatfs/ff.c **** 	if (fno->lfname) {
1815:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
1816:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
1817:source\fatfs/ff.c **** 			lfn = dp->lfn;
1818:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
1819:source\fatfs/ff.c **** #if !_LFN_UNICODE
1820:source\fatfs/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
1821:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
1822:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1823:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
1824:source\fatfs/ff.c **** #endif
1825:source\fatfs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
1826:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
1827:source\fatfs/ff.c **** 			}
1828:source\fatfs/ff.c **** 		}
1829:source\fatfs/ff.c **** 		p[i] = 0;	/* Terminate LFN string by a \0 */
1830:source\fatfs/ff.c **** 	}
1831:source\fatfs/ff.c **** #endif
1832:source\fatfs/ff.c **** }
1833:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1834:source\fatfs/ff.c **** 
1835:source\fatfs/ff.c **** 
1836:source\fatfs/ff.c **** 
1837:source\fatfs/ff.c **** 
1838:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1839:source\fatfs/ff.c **** /* Pattern matching                                                      */
1840:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1841:source\fatfs/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
1842:source\fatfs/ff.c **** static
1843:source\fatfs/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
1844:source\fatfs/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
1845:source\fatfs/ff.c **** )
1846:source\fatfs/ff.c **** {
1847:source\fatfs/ff.c **** 	WCHAR chr;
1848:source\fatfs/ff.c **** 
1849:source\fatfs/ff.c **** #if !_LFN_UNICODE
1850:source\fatfs/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
1851:source\fatfs/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
1852:source\fatfs/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
1853:source\fatfs/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
1854:source\fatfs/ff.c **** #ifdef _EXCVT
1855:source\fatfs/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
1856:source\fatfs/ff.c **** #endif
1857:source\fatfs/ff.c **** #else
1858:source\fatfs/ff.c **** 	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
1859:source\fatfs/ff.c **** #endif
1860:source\fatfs/ff.c **** 	return chr;
1861:source\fatfs/ff.c **** }
1862:source\fatfs/ff.c **** 
1863:source\fatfs/ff.c **** 
1864:source\fatfs/ff.c **** static
1865:source\fatfs/ff.c **** int pattern_matching (	/* Return value: 0:mismatched, 1:matched */
1866:source\fatfs/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
1867:source\fatfs/ff.c **** 	const TCHAR* nam,	/* String to be tested */
1868:source\fatfs/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
1869:source\fatfs/ff.c **** 	int inf				/* Infinite search (* specified) */
1870:source\fatfs/ff.c **** )
1871:source\fatfs/ff.c **** {
1872:source\fatfs/ff.c **** 	const TCHAR *pp, *np;
1873:source\fatfs/ff.c **** 	WCHAR pc, nc;
1874:source\fatfs/ff.c **** 	int nm, nx;
1875:source\fatfs/ff.c **** 
1876:source\fatfs/ff.c **** 
1877:source\fatfs/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
1878:source\fatfs/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
1879:source\fatfs/ff.c **** 	}
1880:source\fatfs/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
1881:source\fatfs/ff.c **** 
1882:source\fatfs/ff.c **** 	do {
1883:source\fatfs/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
1884:source\fatfs/ff.c **** 		for (;;) {
1885:source\fatfs/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
1886:source\fatfs/ff.c **** 				nm = nx = 0;
1887:source\fatfs/ff.c **** 				do {				/* Analyze the wildcard chars */
1888:source\fatfs/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
1889:source\fatfs/ff.c **** 				} while (*pp == '?' || *pp == '*');
1890:source\fatfs/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
1891:source\fatfs/ff.c **** 				nc = *np; break;	/* Branch mismatched */
1892:source\fatfs/ff.c **** 			}
1893:source\fatfs/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
1894:source\fatfs/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
1895:source\fatfs/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
1896:source\fatfs/ff.c **** 			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
1897:source\fatfs/ff.c **** 		}
1898:source\fatfs/ff.c **** 		get_achar(&nam);			/* nam++ */
1899:source\fatfs/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
1900:source\fatfs/ff.c **** 
1901:source\fatfs/ff.c **** 	return 0;
1902:source\fatfs/ff.c **** }
1903:source\fatfs/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
1904:source\fatfs/ff.c **** 
1905:source\fatfs/ff.c **** 
1906:source\fatfs/ff.c **** 
1907:source\fatfs/ff.c **** 
1908:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1909:source\fatfs/ff.c **** /* Pick a segment and create the object name in directory form           */
1910:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1911:source\fatfs/ff.c **** 
1912:source\fatfs/ff.c **** static
1913:source\fatfs/ff.c **** FRESULT create_name (
1914:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1915:source\fatfs/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
1916:source\fatfs/ff.c **** )
1917:source\fatfs/ff.c **** {
1918:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1919:source\fatfs/ff.c **** 	BYTE b, cf;
1920:source\fatfs/ff.c **** 	WCHAR w, *lfn;
1921:source\fatfs/ff.c **** 	UINT i, ni, si, di;
1922:source\fatfs/ff.c **** 	const TCHAR *p;
1923:source\fatfs/ff.c **** 
1924:source\fatfs/ff.c **** 	/* Create LFN in Unicode */
1925:source\fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1926:source\fatfs/ff.c **** 	lfn = dp->lfn;
1927:source\fatfs/ff.c **** 	si = di = 0;
1928:source\fatfs/ff.c **** 	for (;;) {
1929:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
1930:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1931:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1932:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
1933:source\fatfs/ff.c **** #if !_LFN_UNICODE
1934:source\fatfs/ff.c **** 		w &= 0xFF;
1935:source\fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1936:source\fatfs/ff.c **** #if _DF1S
1937:source\fatfs/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1938:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1939:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
1940:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1941:source\fatfs/ff.c **** #endif
1942:source\fatfs/ff.c **** 		}
1943:source\fatfs/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1944:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1945:source\fatfs/ff.c **** #endif
1946:source\fatfs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
1947:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
1948:source\fatfs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
1949:source\fatfs/ff.c **** 	}
1950:source\fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1951:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1952:source\fatfs/ff.c **** #if _FS_RPATH
1953:source\fatfs/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
1954:source\fatfs/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
1955:source\fatfs/ff.c **** 		lfn[di] = 0;
1956:source\fatfs/ff.c **** 		for (i = 0; i < 11; i++)
1957:source\fatfs/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
1958:source\fatfs/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1959:source\fatfs/ff.c **** 		return FR_OK;
1960:source\fatfs/ff.c **** 	}
1961:source\fatfs/ff.c **** #endif
1962:source\fatfs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1963:source\fatfs/ff.c **** 		w = lfn[di - 1];
1964:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
1965:source\fatfs/ff.c **** 		di--;
1966:source\fatfs/ff.c **** 	}
1967:source\fatfs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1968:source\fatfs/ff.c **** 
1969:source\fatfs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1970:source\fatfs/ff.c **** 
1971:source\fatfs/ff.c **** 	/* Create SFN in directory form */
1972:source\fatfs/ff.c **** 	mem_set(dp->fn, ' ', 11);
1973:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1974:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1975:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1976:source\fatfs/ff.c **** 
1977:source\fatfs/ff.c **** 	b = i = 0; ni = 8;
1978:source\fatfs/ff.c **** 	for (;;) {
1979:source\fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
1980:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1981:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1982:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1983:source\fatfs/ff.c **** 		}
1984:source\fatfs/ff.c **** 
1985:source\fatfs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1986:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
1987:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1988:source\fatfs/ff.c **** 			}
1989:source\fatfs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1990:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
1991:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1992:source\fatfs/ff.c **** 			b <<= 2; continue;
1993:source\fatfs/ff.c **** 		}
1994:source\fatfs/ff.c **** 
1995:source\fatfs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
1996:source\fatfs/ff.c **** #ifdef _EXCVT
1997:source\fatfs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1998:source\fatfs/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
1999:source\fatfs/ff.c **** #else
2000:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2001:source\fatfs/ff.c **** #endif
2002:source\fatfs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2003:source\fatfs/ff.c **** 		}
2004:source\fatfs/ff.c **** 
2005:source\fatfs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
2006:source\fatfs/ff.c **** 			if (i >= ni - 1) {
2007:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2008:source\fatfs/ff.c **** 			}
2009:source\fatfs/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2010:source\fatfs/ff.c **** 		} else {						/* SBC */
2011:source\fatfs/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2012:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2013:source\fatfs/ff.c **** 			} else {
2014:source\fatfs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2015:source\fatfs/ff.c **** 					b |= 2;
2016:source\fatfs/ff.c **** 				} else {
2017:source\fatfs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2018:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
2019:source\fatfs/ff.c **** 					}
2020:source\fatfs/ff.c **** 				}
2021:source\fatfs/ff.c **** 			}
2022:source\fatfs/ff.c **** 		}
2023:source\fatfs/ff.c **** 		dp->fn[i++] = (BYTE)w;
2024:source\fatfs/ff.c **** 	}
2025:source\fatfs/ff.c **** 
2026:source\fatfs/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, re
2027:source\fatfs/ff.c **** 
2028:source\fatfs/ff.c **** 	if (ni == 8) b <<= 2;
2029:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
2030:source\fatfs/ff.c **** 		cf |= NS_LFN;
2031:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2032:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2033:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2034:source\fatfs/ff.c **** 	}
2035:source\fatfs/ff.c **** 
2036:source\fatfs/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2037:source\fatfs/ff.c **** 
2038:source\fatfs/ff.c **** 	return FR_OK;
2039:source\fatfs/ff.c **** 
2040:source\fatfs/ff.c **** 
2041:source\fatfs/ff.c **** #else	/* Non-LFN configuration */
2042:source\fatfs/ff.c **** 	BYTE b, c, d, *sfn;
2043:source\fatfs/ff.c **** 	UINT ni, si, i;
2044:source\fatfs/ff.c **** 	const char *p;
2045:source\fatfs/ff.c **** 
2046:source\fatfs/ff.c **** 	/* Create file name in directory form */
2047:source\fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
2048:source\fatfs/ff.c **** 	sfn = dp->fn;
2049:source\fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
2050:source\fatfs/ff.c **** 	si = i = b = 0; ni = 8;
2051:source\fatfs/ff.c **** #if _FS_RPATH
2052:source\fatfs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2053:source\fatfs/ff.c **** 		for (;;) {
2054:source\fatfs/ff.c **** 			c = (BYTE)p[si++];
2055:source\fatfs/ff.c **** 			if (c != '.' || si >= 3) break;
2056:source\fatfs/ff.c **** 			sfn[i++] = c;
2057:source\fatfs/ff.c **** 		}
2058:source\fatfs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2059:source\fatfs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
2060:source\fatfs/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
2061:source\fatfs/ff.c **** 		return FR_OK;
2062:source\fatfs/ff.c **** 	}
2063:source\fatfs/ff.c **** #endif
2064:source\fatfs/ff.c **** 	for (;;) {
2065:source\fatfs/ff.c **** 		c = (BYTE)p[si++];
2066:source\fatfs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
2067:source\fatfs/ff.c **** 		if (c == '.' || i >= ni) {
2068:source\fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
2069:source\fatfs/ff.c **** 			i = 8; ni = 11;
2070:source\fatfs/ff.c **** 			b <<= 2; continue;
2071:source\fatfs/ff.c **** 		}
2072:source\fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
2073:source\fatfs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
2074:source\fatfs/ff.c **** #ifdef _EXCVT
2075:source\fatfs/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2076:source\fatfs/ff.c **** #else
2077:source\fatfs/ff.c **** #if !_DF1S
2078:source\fatfs/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
2079:source\fatfs/ff.c **** #endif
2080:source\fatfs/ff.c **** #endif
2081:source\fatfs/ff.c **** 		}
2082:source\fatfs/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2083:source\fatfs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2084:source\fatfs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
2085:source\fatfs/ff.c **** 				return FR_INVALID_NAME;
2086:source\fatfs/ff.c **** 			sfn[i++] = c;
2087:source\fatfs/ff.c **** 			sfn[i++] = d;
2088:source\fatfs/ff.c **** 		} else {						/* SBC */
2089:source\fatfs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
2090:source\fatfs/ff.c **** 				return FR_INVALID_NAME;
2091:source\fatfs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
2092:source\fatfs/ff.c **** 				b |= 2;
2093:source\fatfs/ff.c **** 			} else {
2094:source\fatfs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
2095:source\fatfs/ff.c **** 					b |= 1; c -= 0x20;
2096:source\fatfs/ff.c **** 				}
2097:source\fatfs/ff.c **** 			}
2098:source\fatfs/ff.c **** 			sfn[i++] = c;
2099:source\fatfs/ff.c **** 		}
2100:source\fatfs/ff.c **** 	}
2101:source\fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2102:source\fatfs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
2103:source\fatfs/ff.c **** 
2104:source\fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
2105:source\fatfs/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RD
2106:source\fatfs/ff.c **** 
2107:source\fatfs/ff.c **** 	if (ni == 8) b <<= 2;
2108:source\fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
2109:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
2110:source\fatfs/ff.c **** 
2111:source\fatfs/ff.c **** 	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
2112:source\fatfs/ff.c **** 
2113:source\fatfs/ff.c **** 	return FR_OK;
2114:source\fatfs/ff.c **** #endif
2115:source\fatfs/ff.c **** }
2116:source\fatfs/ff.c **** 
2117:source\fatfs/ff.c **** 
2118:source\fatfs/ff.c **** 
2119:source\fatfs/ff.c **** 
2120:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2121:source\fatfs/ff.c **** /* Follow a file path                                                    */
2122:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2123:source\fatfs/ff.c **** 
2124:source\fatfs/ff.c **** static
2125:source\fatfs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2126:source\fatfs/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2127:source\fatfs/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2128:source\fatfs/ff.c **** )
2129:source\fatfs/ff.c **** {
2130:source\fatfs/ff.c **** 	FRESULT res;
2131:source\fatfs/ff.c **** 	BYTE *dir, ns;
2132:source\fatfs/ff.c **** 
2133:source\fatfs/ff.c **** 
2134:source\fatfs/ff.c **** #if _FS_RPATH
2135:source\fatfs/ff.c **** 	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
2136:source\fatfs/ff.c **** 		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
2137:source\fatfs/ff.c **** 	} else {								/* No heading separator */
2138:source\fatfs/ff.c **** 		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
2139:source\fatfs/ff.c **** 	}
2140:source\fatfs/ff.c **** #else
2141:source\fatfs/ff.c **** 	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
2142:source\fatfs/ff.c **** 		path++;
2143:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
2144:source\fatfs/ff.c **** #endif
2145:source\fatfs/ff.c **** 
2146:source\fatfs/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2147:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
2148:source\fatfs/ff.c **** 		dp->dir = 0;
2149:source\fatfs/ff.c **** 	} else {								/* Follow path */
2150:source\fatfs/ff.c **** 		for (;;) {
2151:source\fatfs/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2152:source\fatfs/ff.c **** 			if (res != FR_OK) break;
2153:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
2154:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
2155:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
2156:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2157:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
2158:source\fatfs/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
2159:source\fatfs/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2160:source\fatfs/ff.c **** 						res = FR_OK;					/* Ended at the root directroy. Function completed. */
2161:source\fatfs/ff.c **** 					} else {							/* Could not find the object */
2162:source\fatfs/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2163:source\fatfs/ff.c **** 					}
2164:source\fatfs/ff.c **** 				}
2165:source\fatfs/ff.c **** 				break;
2166:source\fatfs/ff.c **** 			}
2167:source\fatfs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2168:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
2169:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
2170:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
2171:source\fatfs/ff.c **** 			}
2172:source\fatfs/ff.c **** 			dp->sclust = ld_clust(dp->fs, dir);
2173:source\fatfs/ff.c **** 		}
2174:source\fatfs/ff.c **** 	}
2175:source\fatfs/ff.c **** 
2176:source\fatfs/ff.c **** 	return res;
2177:source\fatfs/ff.c **** }
2178:source\fatfs/ff.c **** 
2179:source\fatfs/ff.c **** 
2180:source\fatfs/ff.c **** 
2181:source\fatfs/ff.c **** 
2182:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2183:source\fatfs/ff.c **** /* Get logical drive number from path name                               */
2184:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2185:source\fatfs/ff.c **** 
2186:source\fatfs/ff.c **** static
2187:source\fatfs/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2188:source\fatfs/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2189:source\fatfs/ff.c **** )
2190:source\fatfs/ff.c **** {
 684              		.loc 1 2190 1 is_stmt 1 view -0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
2191:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 688              		.loc 1 2191 2 view .LVU215
2192:source\fatfs/ff.c **** 	UINT i;
 689              		.loc 1 2192 2 view .LVU216
2193:source\fatfs/ff.c **** 	int vol = -1;
 690              		.loc 1 2193 2 view .LVU217
2194:source\fatfs/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2195:source\fatfs/ff.c **** 	static const char* const str[] = {_VOLUME_STRS};
2196:source\fatfs/ff.c **** 	const char *sp;
2197:source\fatfs/ff.c **** 	char c;
2198:source\fatfs/ff.c **** 	TCHAR tc;
2199:source\fatfs/ff.c **** #endif
2200:source\fatfs/ff.c **** 
2201:source\fatfs/ff.c **** 
2202:source\fatfs/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 691              		.loc 1 2202 2 view .LVU218
 692              		.loc 1 2202 6 is_stmt 0 view .LVU219
 693 0000 0368     		ldr	r3, [r0]
2190:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 694              		.loc 1 2190 1 view .LVU220
 695 0002 10B5     		push	{r4, lr}
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 4, -8
 698              		.cfi_offset 14, -4
2190:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 699              		.loc 1 2190 1 view .LVU221
 700 0004 0146     		mov	r1, r0
 701              		.loc 1 2202 5 view .LVU222
 702 0006 53B1     		cbz	r3, .L84
 703 0008 1846     		mov	r0, r3
 704              	.LVL69:
 705              	.L76:
 706              		.loc 1 2202 5 view .LVU223
 707 000a 0246     		mov	r2, r0
 708              	.LVL70:
2203:source\fatfs/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 709              		.loc 1 2203 20 is_stmt 1 discriminator 1 view .LVU224
 710              		.loc 1 2203 26 is_stmt 0 discriminator 1 view .LVU225
 711 000c 10F8014B 		ldrb	r4, [r0], #1	@ zero_extendqisi2
 712              	.LVL71:
 713              		.loc 1 2203 3 discriminator 1 view .LVU226
 714 0010 1F2C     		cmp	r4, #31
 715 0012 10D9     		bls	.L80
 716              		.loc 1 2203 56 discriminator 3 view .LVU227
 717 0014 3A2C     		cmp	r4, #58
 718 0016 F8D1     		bne	.L76
2204:source\fatfs/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 719              		.loc 1 2204 3 is_stmt 1 view .LVU228
2205:source\fatfs/ff.c **** 			tp = *path;
 720              		.loc 1 2205 4 view .LVU229
 721              	.LVL72:
2206:source\fatfs/ff.c **** 			i = *tp++ - '0'; 
 722              		.loc 1 2206 4 view .LVU230
2207:source\fatfs/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 723              		.loc 1 2207 4 view .LVU231
2206:source\fatfs/ff.c **** 			i = *tp++ - '0'; 
 724              		.loc 1 2206 11 is_stmt 0 view .LVU232
 725 0018 581C     		adds	r0, r3, #1
 726              	.LVL73:
 727              		.loc 1 2207 15 view .LVU233
 728 001a 8242     		cmp	r2, r0
 729 001c 02D0     		beq	.L78
 730              	.LVL74:
 731              	.L84:
2193:source\fatfs/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 732              		.loc 1 2193 6 view .LVU234
 733 001e 4FF0FF30 		mov	r0, #-1
 734 0022 07E0     		b	.L74
 735              	.LVL75:
 736              	.L78:
2206:source\fatfs/ff.c **** 			i = *tp++ - '0'; 
 737              		.loc 1 2206 8 view .LVU235
 738 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 739              	.LVL76:
2208:source\fatfs/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 740              		.loc 1 2208 5 is_stmt 1 view .LVU236
 741              		.loc 1 2208 8 is_stmt 0 view .LVU237
 742 0026 303B     		subs	r3, r3, #48
 743 0028 D8B2     		uxtb	r0, r3
 744              	.LVL77:
 745              		.loc 1 2208 8 view .LVU238
 746 002a 0228     		cmp	r0, #2
 747 002c F7D8     		bhi	.L84
2209:source\fatfs/ff.c **** 					vol = (int)i;
2210:source\fatfs/ff.c **** 					*path = ++tt;
 748              		.loc 1 2210 12 view .LVU239
 749 002e 0132     		adds	r2, r2, #1
 750              	.LVL78:
2206:source\fatfs/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 751              		.loc 1 2206 14 view .LVU240
 752 0030 1846     		mov	r0, r3
2209:source\fatfs/ff.c **** 					vol = (int)i;
 753              		.loc 1 2209 6 is_stmt 1 view .LVU241
 754              	.LVL79:
 755              		.loc 1 2210 6 view .LVU242
 756              		.loc 1 2210 12 is_stmt 0 view .LVU243
 757 0032 0A60     		str	r2, [r1]
 758              	.LVL80:
 759              	.L74:
2211:source\fatfs/ff.c **** 				}
2212:source\fatfs/ff.c **** 			}
2213:source\fatfs/ff.c **** #if _STR_VOLUME_ID
2214:source\fatfs/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2215:source\fatfs/ff.c **** 				i = 0; tt++;
2216:source\fatfs/ff.c **** 				do {
2217:source\fatfs/ff.c **** 					sp = str[i]; tp = *path;
2218:source\fatfs/ff.c **** 					do {	/* Compare a string drive id with path name */
2219:source\fatfs/ff.c **** 						c = *sp++; tc = *tp++;
2220:source\fatfs/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2221:source\fatfs/ff.c **** 					} while (c && (TCHAR)c == tc);
2222:source\fatfs/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2223:source\fatfs/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2224:source\fatfs/ff.c **** 					vol = (int)i;
2225:source\fatfs/ff.c **** 					*path = tt;
2226:source\fatfs/ff.c **** 				}
2227:source\fatfs/ff.c **** 			}
2228:source\fatfs/ff.c **** #endif
2229:source\fatfs/ff.c **** 			return vol;
2230:source\fatfs/ff.c **** 		}
2231:source\fatfs/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
2232:source\fatfs/ff.c **** 		vol = CurrVol;	/* Current drive */
2233:source\fatfs/ff.c **** #else
2234:source\fatfs/ff.c **** 		vol = 0;		/* Drive 0 */
2235:source\fatfs/ff.c **** #endif
2236:source\fatfs/ff.c **** 	}
2237:source\fatfs/ff.c **** 	return vol;
2238:source\fatfs/ff.c **** }
 760              		.loc 1 2238 1 view .LVU244
 761 0034 10BD     		pop	{r4, pc}
 762              	.LVL81:
 763              	.L80:
2234:source\fatfs/ff.c **** #endif
 764              		.loc 1 2234 7 view .LVU245
 765 0036 0020     		movs	r0, #0
 766 0038 FCE7     		b	.L74
 767              		.cfi_endproc
 768              	.LFE165:
 770              		.section	.text.validate,"ax",%progbits
 771              		.align	1
 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 776              	validate:
 777              	.LVL82:
 778              	.LFB168:
2239:source\fatfs/ff.c **** 
2240:source\fatfs/ff.c **** 
2241:source\fatfs/ff.c **** 
2242:source\fatfs/ff.c **** 
2243:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2244:source\fatfs/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2245:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2246:source\fatfs/ff.c **** 
2247:source\fatfs/ff.c **** static
2248:source\fatfs/ff.c **** BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk 
2249:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
2250:source\fatfs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2251:source\fatfs/ff.c **** )
2252:source\fatfs/ff.c **** {
2253:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
2254:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
2255:source\fatfs/ff.c **** 		return 3;
2256:source\fatfs/ff.c **** 
2257:source\fatfs/ff.c **** 	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offs
2258:source\fatfs/ff.c **** 		return 2;
2259:source\fatfs/ff.c **** 
2260:source\fatfs/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
2261:source\fatfs/ff.c **** 		return 0;
2262:source\fatfs/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
2263:source\fatfs/ff.c **** 		return 0;
2264:source\fatfs/ff.c **** 
2265:source\fatfs/ff.c **** 	return 1;
2266:source\fatfs/ff.c **** }
2267:source\fatfs/ff.c **** 
2268:source\fatfs/ff.c **** 
2269:source\fatfs/ff.c **** 
2270:source\fatfs/ff.c **** 
2271:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2272:source\fatfs/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2273:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2274:source\fatfs/ff.c **** 
2275:source\fatfs/ff.c **** static
2276:source\fatfs/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2277:source\fatfs/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2278:source\fatfs/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2279:source\fatfs/ff.c **** 	BYTE wmode			/* !=0: Check write protection for write access */
2280:source\fatfs/ff.c **** )
2281:source\fatfs/ff.c **** {
2282:source\fatfs/ff.c **** 	BYTE fmt, *pt;
2283:source\fatfs/ff.c **** 	int vol;
2284:source\fatfs/ff.c **** 	DSTATUS stat;
2285:source\fatfs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
2286:source\fatfs/ff.c **** 	WORD nrsv;
2287:source\fatfs/ff.c **** 	FATFS *fs;
2288:source\fatfs/ff.c **** 	UINT i;
2289:source\fatfs/ff.c **** 
2290:source\fatfs/ff.c **** 
2291:source\fatfs/ff.c **** 	/* Get logical drive number from the path name */
2292:source\fatfs/ff.c **** 	*rfs = 0;
2293:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
2294:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
2295:source\fatfs/ff.c **** 
2296:source\fatfs/ff.c **** 	/* Check if the file system object is valid or not */
2297:source\fatfs/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
2298:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2299:source\fatfs/ff.c **** 
2300:source\fatfs/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
2301:source\fatfs/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
2302:source\fatfs/ff.c **** 
2303:source\fatfs/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
2304:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
2305:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2306:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
2307:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
2308:source\fatfs/ff.c **** 			return FR_OK;				/* The file system object is valid */
2309:source\fatfs/ff.c **** 		}
2310:source\fatfs/ff.c **** 	}
2311:source\fatfs/ff.c **** 
2312:source\fatfs/ff.c **** 	/* The file system object is not valid. */
2313:source\fatfs/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2314:source\fatfs/ff.c **** 
2315:source\fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
2316:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2317:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2318:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2319:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2320:source\fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2321:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
2322:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
2323:source\fatfs/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
2324:source\fatfs/ff.c **** 		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
2325:source\fatfs/ff.c **** #endif
2326:source\fatfs/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2327:source\fatfs/ff.c **** 	bsect = 0;
2328:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
2329:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
2330:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
2331:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
2332:source\fatfs/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
2333:source\fatfs/ff.c **** 		}
2334:source\fatfs/ff.c **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
2335:source\fatfs/ff.c **** 		if (i) i--;
2336:source\fatfs/ff.c **** 		do {								/* Find an FAT volume */
2337:source\fatfs/ff.c **** 			bsect = br[i];
2338:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
2339:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
2340:source\fatfs/ff.c **** 	}
2341:source\fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2342:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
2343:source\fatfs/ff.c **** 
2344:source\fatfs/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2345:source\fatfs/ff.c **** 
2346:source\fatfs/ff.c **** 	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physic
2347:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2348:source\fatfs/ff.c **** 
2349:source\fatfs/ff.c **** 	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
2350:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
2351:source\fatfs/ff.c **** 	fs->fsize = fasize;
2352:source\fatfs/ff.c **** 
2353:source\fatfs/ff.c **** 	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
2354:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
2355:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2356:source\fatfs/ff.c **** 	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
2357:source\fatfs/ff.c **** 
2358:source\fatfs/ff.c **** 	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
2359:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
2360:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2361:source\fatfs/ff.c **** 
2362:source\fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
2363:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
2364:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2365:source\fatfs/ff.c **** 
2366:source\fatfs/ff.c **** 	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
2367:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
2368:source\fatfs/ff.c **** 
2369:source\fatfs/ff.c **** 	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
2370:source\fatfs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
2371:source\fatfs/ff.c **** 
2372:source\fatfs/ff.c **** 	/* Determine the FAT sub type */
2373:source\fatfs/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
2374:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2375:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2376:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2377:source\fatfs/ff.c **** 	fmt = FS_FAT12;
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2379:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2380:source\fatfs/ff.c **** 
2381:source\fatfs/ff.c **** 	/* Boundaries and Limits */
2382:source\fatfs/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2383:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
2384:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2385:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
2386:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
2387:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2388:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
2389:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
2390:source\fatfs/ff.c **** 	} else {
2391:source\fatfs/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2392:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2393:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
2394:source\fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2395:source\fatfs/ff.c **** 	}
2396:source\fatfs/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size nee
2397:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2398:source\fatfs/ff.c **** 
2399:source\fatfs/ff.c **** #if !_FS_READONLY
2400:source\fatfs/ff.c **** 	/* Initialize cluster allocation information */
2401:source\fatfs/ff.c **** 	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
2402:source\fatfs/ff.c **** 
2403:source\fatfs/ff.c **** 	/* Get fsinfo if available */
2404:source\fatfs/ff.c **** 	fs->fsi_flag = 0x80;
2405:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
2406:source\fatfs/ff.c **** 	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
2407:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
2408:source\fatfs/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
2409:source\fatfs/ff.c **** 	{
2410:source\fatfs/ff.c **** 		fs->fsi_flag = 0;
2411:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2412:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
2413:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
2414:source\fatfs/ff.c **** 		{
2415:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 1) == 0
2416:source\fatfs/ff.c **** 			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
2417:source\fatfs/ff.c **** #endif
2418:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 2) == 0
2419:source\fatfs/ff.c **** 			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
2420:source\fatfs/ff.c **** #endif
2421:source\fatfs/ff.c **** 		}
2422:source\fatfs/ff.c **** 	}
2423:source\fatfs/ff.c **** #endif
2424:source\fatfs/ff.c **** #endif
2425:source\fatfs/ff.c **** 	fs->fs_type = fmt;	/* FAT sub-type */
2426:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
2427:source\fatfs/ff.c **** #if _FS_RPATH
2428:source\fatfs/ff.c **** 	fs->cdir = 0;		/* Set current directory to root */
2429:source\fatfs/ff.c **** #endif
2430:source\fatfs/ff.c **** #if _FS_LOCK			/* Clear file lock semaphores */
2431:source\fatfs/ff.c **** 	clear_lock(fs);
2432:source\fatfs/ff.c **** #endif
2433:source\fatfs/ff.c **** 
2434:source\fatfs/ff.c **** 	return FR_OK;
2435:source\fatfs/ff.c **** }
2436:source\fatfs/ff.c **** 
2437:source\fatfs/ff.c **** 
2438:source\fatfs/ff.c **** 
2439:source\fatfs/ff.c **** 
2440:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2441:source\fatfs/ff.c **** /* Check if the file/directory object is valid or not                    */
2442:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2443:source\fatfs/ff.c **** 
2444:source\fatfs/ff.c **** static
2445:source\fatfs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2446:source\fatfs/ff.c **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2447:source\fatfs/ff.c **** )
2448:source\fatfs/ff.c **** {
 779              		.loc 1 2448 1 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
2449:source\fatfs/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 783              		.loc 1 2449 2 view .LVU247
2450:source\fatfs/ff.c **** 
2451:source\fatfs/ff.c **** 
2452:source\fatfs/ff.c **** 	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) 
 784              		.loc 1 2452 2 view .LVU248
2448:source\fatfs/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 785              		.loc 1 2448 1 is_stmt 0 view .LVU249
 786 0000 08B5     		push	{r3, lr}
 787              		.cfi_def_cfa_offset 8
 788              		.cfi_offset 3, -8
 789              		.cfi_offset 14, -4
 790              		.loc 1 2452 5 view .LVU250
 791 0002 90B1     		cbz	r0, .L86
 792              		.loc 1 2452 18 discriminator 1 view .LVU251
 793 0004 D0F80032 		ldr	r3, [r0, #512]
 794              		.loc 1 2452 11 discriminator 1 view .LVU252
 795 0008 7BB1     		cbz	r3, .L86
 796              		.loc 1 2452 23 discriminator 2 view .LVU253
 797 000a 93F80022 		ldrb	r2, [r3, #512]	@ zero_extendqisi2
 798 000e 62B1     		cbz	r2, .L86
 799              		.loc 1 2452 44 discriminator 3 view .LVU254
 800 0010 B3F80612 		ldrh	r1, [r3, #518]
 801 0014 B0F80422 		ldrh	r2, [r0, #516]
 802 0018 9142     		cmp	r1, r2
 803 001a 06D1     		bne	.L86
 804              		.loc 1 2452 74 discriminator 4 view .LVU255
 805 001c 93F80102 		ldrb	r0, [r3, #513]	@ zero_extendqisi2
 806              	.LVL83:
 807              		.loc 1 2452 74 discriminator 4 view .LVU256
 808 0020 FFF7FEFF 		bl	disk_status
 809              	.LVL84:
 810              		.loc 1 2452 70 discriminator 4 view .LVU257
 811 0024 10F00100 		ands	r0, r0, #1
 812 0028 00D0     		beq	.L87
 813              	.L86:
2453:source\fatfs/ff.c **** 		return FR_INVALID_OBJECT;
 814              		.loc 1 2453 10 view .LVU258
 815 002a 0920     		movs	r0, #9
 816              	.L87:
2454:source\fatfs/ff.c **** 
2455:source\fatfs/ff.c **** 	ENTER_FF(fil->fs);		/* Lock file system */
2456:source\fatfs/ff.c **** 
2457:source\fatfs/ff.c **** 	return FR_OK;
2458:source\fatfs/ff.c **** }
 817              		.loc 1 2458 1 view .LVU259
 818 002c 08BD     		pop	{r3, pc}
 819              		.cfi_endproc
 820              	.LFE168:
 822              		.section	.text.get_fileinfo,"ax",%progbits
 823              		.align	1
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 828              	get_fileinfo:
 829              	.LVL85:
 830              	.LFB162:
1777:source\fatfs/ff.c **** 	UINT i;
 831              		.loc 1 1777 1 is_stmt 1 view -0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
1778:source\fatfs/ff.c **** 	TCHAR *p, c;
 835              		.loc 1 1778 2 view .LVU261
1779:source\fatfs/ff.c **** 	BYTE *dir;
 836              		.loc 1 1779 2 view .LVU262
1780:source\fatfs/ff.c **** #if _USE_LFN
 837              		.loc 1 1780 2 view .LVU263
1782:source\fatfs/ff.c **** #endif
 838              		.loc 1 1782 2 view .LVU264
1785:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
 839              		.loc 1 1785 2 view .LVU265
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 840              		.loc 1 1786 5 is_stmt 0 view .LVU266
 841 0000 D0F81022 		ldr	r2, [r0, #528]
1777:source\fatfs/ff.c **** 	UINT i;
 842              		.loc 1 1777 1 view .LVU267
 843 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 844              		.cfi_def_cfa_offset 24
 845              		.cfi_offset 3, -24
 846              		.cfi_offset 4, -20
 847              		.cfi_offset 5, -16
 848              		.cfi_offset 6, -12
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
1777:source\fatfs/ff.c **** 	UINT i;
 851              		.loc 1 1777 1 view .LVU268
 852 0006 0D46     		mov	r5, r1
1785:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
 853              		.loc 1 1785 4 view .LVU269
 854 0008 01F10903 		add	r3, r1, #9
 855              	.LVL86:
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 856              		.loc 1 1786 2 is_stmt 1 view .LVU270
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 857              		.loc 1 1786 5 is_stmt 0 view .LVU271
 858 000c 72B3     		cbz	r2, .L101
1787:source\fatfs/ff.c **** 		i = 0;
 859              		.loc 1 1787 3 is_stmt 1 view .LVU272
1787:source\fatfs/ff.c **** 		i = 0;
 860              		.loc 1 1787 7 is_stmt 0 view .LVU273
 861 000e D0F81412 		ldr	r1, [r0, #532]
 862              	.LVL87:
1788:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 863              		.loc 1 1788 3 is_stmt 1 view .LVU274
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 864              		.loc 1 1789 3 view .LVU275
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 865              		.loc 1 1789 9 view .LVU276
1788:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 866              		.loc 1 1788 5 is_stmt 0 view .LVU277
 867 0012 0024     		movs	r4, #0
 868 0014 4E1E     		subs	r6, r1, #1
1793:source\fatfs/ff.c **** #if _USE_LFN
 869              		.loc 1 1793 21 view .LVU278
 870 0016 2E27     		movs	r7, #46
 871              	.LVL88:
 872              	.L107:
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 873              		.loc 1 1790 4 is_stmt 1 view .LVU279
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 874              		.loc 1 1790 6 is_stmt 0 view .LVU280
 875 0018 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 876              		.loc 1 1791 7 view .LVU281
 877 001c 202A     		cmp	r2, #32
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 878              		.loc 1 1790 20 view .LVU282
 879 001e 04F10104 		add	r4, r4, #1
 880              	.LVL89:
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 881              		.loc 1 1791 4 is_stmt 1 view .LVU283
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 882              		.loc 1 1791 7 is_stmt 0 view .LVU284
 883 0022 19D0     		beq	.L102
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 884              		.loc 1 1792 4 is_stmt 1 view .LVU285
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 885              		.loc 1 1792 7 is_stmt 0 view .LVU286
 886 0024 052A     		cmp	r2, #5
 887 0026 4DD0     		beq	.L103
1793:source\fatfs/ff.c **** #if _USE_LFN
 888              		.loc 1 1793 4 is_stmt 1 view .LVU287
1793:source\fatfs/ff.c **** #if _USE_LFN
 889              		.loc 1 1793 7 is_stmt 0 view .LVU288
 890 0028 092C     		cmp	r4, #9
 891 002a 01D1     		bne	.L104
 892              	.LVL90:
 893              	.L115:
1793:source\fatfs/ff.c **** #if _USE_LFN
 894              		.loc 1 1793 16 is_stmt 1 discriminator 1 view .LVU289
1793:source\fatfs/ff.c **** #if _USE_LFN
 895              		.loc 1 1793 21 is_stmt 0 discriminator 1 view .LVU290
 896 002c 03F8017B 		strb	r7, [r3], #1
 897              	.LVL91:
 898              	.L104:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 899              		.loc 1 1795 4 is_stmt 1 view .LVU291
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 900              		.loc 1 1795 7 is_stmt 0 view .LVU292
 901 0030 A2F1410C 		sub	ip, r2, #65
 902 0034 BCF1190F 		cmp	ip, #25
 903 0038 0CD8     		bhi	.L105
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 904              		.loc 1 1795 57 discriminator 1 view .LVU293
 905 003a 082C     		cmp	r4, #8
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 906              		.loc 1 1795 26 discriminator 1 view .LVU294
 907 003c 91F80CE0 		ldrb	lr, [r1, #12]	@ zero_extendqisi2
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 908              		.loc 1 1795 57 discriminator 1 view .LVU295
 909 0040 8CBF     		ite	hi
 910 0042 4FF0100C 		movhi	ip, #16
 911 0046 4FF0080C 		movls	ip, #8
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 912              		.loc 1 1795 19 discriminator 1 view .LVU296
 913 004a 1EEA0C0F 		tst	lr, ip
1796:source\fatfs/ff.c **** #if _LFN_UNICODE
 914              		.loc 1 1796 5 is_stmt 1 discriminator 1 view .LVU297
1796:source\fatfs/ff.c **** #if _LFN_UNICODE
 915              		.loc 1 1796 7 is_stmt 0 discriminator 1 view .LVU298
 916 004e 1CBF     		itt	ne
 917 0050 2032     		addne	r2, r2, #32
 918 0052 D2B2     		uxtbne	r2, r2
 919              	.LVL92:
 920              	.L105:
1804:source\fatfs/ff.c **** 		}
 921              		.loc 1 1804 4 is_stmt 1 view .LVU299
1804:source\fatfs/ff.c **** 		}
 922              		.loc 1 1804 9 is_stmt 0 view .LVU300
 923 0054 03F8012B 		strb	r2, [r3], #1
 924              	.LVL93:
 925              	.L102:
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 926              		.loc 1 1789 9 is_stmt 1 view .LVU301
 927 0058 0B2C     		cmp	r4, #11
 928 005a DDD1     		bne	.L107
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 929              		.loc 1 1806 3 view .LVU302
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 930              		.loc 1 1806 16 is_stmt 0 view .LVU303
 931 005c CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
 932              	.LVL94:
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 933              		.loc 1 1806 16 view .LVU304
 934 005e 2A72     		strb	r2, [r5, #8]
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 935              		.loc 1 1807 3 is_stmt 1 view .LVU305
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 936              		.loc 1 1807 16 is_stmt 0 view .LVU306
 937 0060 CA69     		ldr	r2, [r1, #28]	@ unaligned
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 938              		.loc 1 1807 14 view .LVU307
 939 0062 2A60     		str	r2, [r5]
1808:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 940              		.loc 1 1808 3 is_stmt 1 view .LVU308
 941 0064 0A8B     		ldrh	r2, [r1, #24]	@ unaligned
1808:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 942              		.loc 1 1808 14 is_stmt 0 view .LVU309
 943 0066 AA80     		strh	r2, [r5, #4]	@ movhi
1809:source\fatfs/ff.c **** 	}
 944              		.loc 1 1809 3 is_stmt 1 view .LVU310
 945 0068 CA8A     		ldrh	r2, [r1, #22]	@ unaligned
1809:source\fatfs/ff.c **** 	}
 946              		.loc 1 1809 14 is_stmt 0 view .LVU311
 947 006a EA80     		strh	r2, [r5, #6]	@ movhi
 948              	.LVL95:
 949              	.L101:
1811:source\fatfs/ff.c **** 
 950              		.loc 1 1811 2 is_stmt 1 view .LVU312
1811:source\fatfs/ff.c **** 
 951              		.loc 1 1811 5 is_stmt 0 view .LVU313
 952 006c 0024     		movs	r4, #0
 953 006e 1C70     		strb	r4, [r3]
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 954              		.loc 1 1814 2 is_stmt 1 view .LVU314
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 955              		.loc 1 1814 9 is_stmt 0 view .LVU315
 956 0070 AE69     		ldr	r6, [r5, #24]
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 957              		.loc 1 1814 5 view .LVU316
 958 0072 2EB1     		cbz	r6, .L100
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 959              		.loc 1 1815 3 is_stmt 1 view .LVU317
 960              	.LVL96:
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 961              		.loc 1 1815 10 view .LVU318
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 962              		.loc 1 1816 3 view .LVU319
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 963              		.loc 1 1816 6 is_stmt 0 view .LVU320
 964 0074 D0F81032 		ldr	r3, [r0, #528]
 965 0078 1BB9     		cbnz	r3, .L109
 966              	.LVL97:
 967              	.L111:
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 968              		.loc 1 1815 5 view .LVU321
 969 007a 0024     		movs	r4, #0
 970              	.L110:
 971              	.LVL98:
1829:source\fatfs/ff.c **** 	}
 972              		.loc 1 1829 3 is_stmt 1 view .LVU322
1829:source\fatfs/ff.c **** 	}
 973              		.loc 1 1829 8 is_stmt 0 view .LVU323
 974 007c 0023     		movs	r3, #0
 975 007e 3355     		strb	r3, [r6, r4]
 976              	.LVL99:
 977              	.L100:
1832:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
 978              		.loc 1 1832 1 view .LVU324
 979 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 980              	.LVL100:
 981              	.L109:
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 982              		.loc 1 1816 16 discriminator 1 view .LVU325
 983 0082 EB69     		ldr	r3, [r5, #28]
 984 0084 002B     		cmp	r3, #0
 985 0086 F8D0     		beq	.L111
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 986              		.loc 1 1816 31 discriminator 2 view .LVU326
 987 0088 B0F82422 		ldrh	r2, [r0, #548]
 988 008c 4FF6FF73 		movw	r3, #65535
 989 0090 9A42     		cmp	r2, r3
 990 0092 F2D0     		beq	.L111
1817:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 991              		.loc 1 1817 4 is_stmt 1 view .LVU327
1817:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 992              		.loc 1 1817 8 is_stmt 0 view .LVU328
 993 0094 D0F82072 		ldr	r7, [r0, #544]
 994              	.LVL101:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 995              		.loc 1 1818 4 is_stmt 1 view .LVU329
 996              	.L112:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 997              		.loc 1 1818 10 view .LVU330
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 998              		.loc 1 1818 14 is_stmt 0 view .LVU331
 999 0098 37F8020B 		ldrh	r0, [r7], #2
 1000              	.LVL102:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 1001              		.loc 1 1818 10 view .LVU332
 1002 009c 0028     		cmp	r0, #0
 1003 009e EDD0     		beq	.L110
1820:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 1004              		.loc 1 1820 5 is_stmt 1 view .LVU333
1820:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 1005              		.loc 1 1820 9 is_stmt 0 view .LVU334
 1006 00a0 0021     		movs	r1, #0
 1007 00a2 FFF7FEFF 		bl	ff_convert
 1008              	.LVL103:
1821:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 1009              		.loc 1 1821 5 is_stmt 1 view .LVU335
1821:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 1010              		.loc 1 1821 8 is_stmt 0 view .LVU336
 1011 00a6 0028     		cmp	r0, #0
 1012 00a8 E7D0     		beq	.L111
1822:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
 1013              		.loc 1 1822 5 is_stmt 1 view .LVU337
1822:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
 1014              		.loc 1 1822 8 is_stmt 0 view .LVU338
 1015 00aa FF28     		cmp	r0, #255
1823:source\fatfs/ff.c **** #endif
 1016              		.loc 1 1823 6 is_stmt 1 view .LVU339
 1017              	.LVL104:
1823:source\fatfs/ff.c **** #endif
 1018              		.loc 1 1823 15 is_stmt 0 view .LVU340
 1019 00ac 84BF     		itt	hi
 1020 00ae 030A     		lsrhi	r3, r0, #8
 1021 00b0 3355     		strbhi	r3, [r6, r4]
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1022              		.loc 1 1825 26 view .LVU341
 1023 00b2 EB69     		ldr	r3, [r5, #28]
1823:source\fatfs/ff.c **** #endif
 1024              		.loc 1 1823 9 view .LVU342
 1025 00b4 88BF     		it	hi
 1026 00b6 0134     		addhi	r4, r4, #1
 1027              	.LVL105:
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1028              		.loc 1 1825 5 is_stmt 1 view .LVU343
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1029              		.loc 1 1825 26 is_stmt 0 view .LVU344
 1030 00b8 013B     		subs	r3, r3, #1
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1031              		.loc 1 1825 8 view .LVU345
 1032 00ba A342     		cmp	r3, r4
 1033 00bc DDD9     		bls	.L111
1826:source\fatfs/ff.c **** 			}
 1034              		.loc 1 1826 5 is_stmt 1 view .LVU346
 1035              	.LVL106:
1826:source\fatfs/ff.c **** 			}
 1036              		.loc 1 1826 14 is_stmt 0 view .LVU347
 1037 00be 3055     		strb	r0, [r6, r4]
1826:source\fatfs/ff.c **** 			}
 1038              		.loc 1 1826 8 view .LVU348
 1039 00c0 0134     		adds	r4, r4, #1
 1040              	.LVL107:
1826:source\fatfs/ff.c **** 			}
 1041              		.loc 1 1826 8 view .LVU349
 1042 00c2 E9E7     		b	.L112
 1043              	.LVL108:
 1044              	.L103:
1793:source\fatfs/ff.c **** #if _USE_LFN
 1045              		.loc 1 1793 4 is_stmt 1 view .LVU350
1793:source\fatfs/ff.c **** #if _USE_LFN
 1046              		.loc 1 1793 7 is_stmt 0 view .LVU351
 1047 00c4 092C     		cmp	r4, #9
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 1048              		.loc 1 1792 22 view .LVU352
 1049 00c6 4FF0E502 		mov	r2, #229
1793:source\fatfs/ff.c **** #if _USE_LFN
 1050              		.loc 1 1793 7 view .LVU353
 1051 00ca C3D1     		bne	.L105
 1052 00cc AEE7     		b	.L115
 1053              		.cfi_endproc
 1054              	.LFE162:
 1056              		.section	.text.sync_window.part.0,"ax",%progbits
 1057              		.align	1
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1062              	sync_window.part.0:
 1063              	.LVL109:
 1064              	.LFB193:
 773:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 1065              		.loc 1 773 9 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 783:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 1069              		.loc 1 783 3 view .LVU355
 773:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 1070              		.loc 1 773 9 is_stmt 0 view .LVU356
 1071 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1072              		.cfi_def_cfa_offset 24
 1073              		.cfi_offset 3, -24
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 783:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 1079              		.loc 1 783 9 view .LVU357
 1080 0002 D0F82C62 		ldr	r6, [r0, #556]
 1081              	.LVL110:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1082              		.loc 1 784 3 is_stmt 1 view .LVU358
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1083              		.loc 1 784 7 is_stmt 0 view .LVU359
 1084 0006 0146     		mov	r1, r0
 773:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 1085              		.loc 1 773 9 view .LVU360
 1086 0008 0446     		mov	r4, r0
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1087              		.loc 1 784 7 view .LVU361
 1088 000a 0123     		movs	r3, #1
 1089 000c 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 1090              	.LVL111:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1091              		.loc 1 784 7 view .LVU362
 1092 0010 3246     		mov	r2, r6
 1093 0012 FFF7FEFF 		bl	disk_write
 1094              	.LVL112:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1095              		.loc 1 784 6 view .LVU363
 1096 0016 0546     		mov	r5, r0
 1097 0018 D0B9     		cbnz	r0, .L143
 787:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1098              		.loc 1 787 4 is_stmt 1 view .LVU364
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1099              		.loc 1 788 14 is_stmt 0 view .LVU365
 1100 001a D4F82032 		ldr	r3, [r4, #544]
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1101              		.loc 1 788 7 view .LVU366
 1102 001e D4F81822 		ldr	r2, [r4, #536]
 787:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1103              		.loc 1 787 14 view .LVU367
 1104 0022 84F80402 		strb	r0, [r4, #516]
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1105              		.loc 1 788 4 is_stmt 1 view .LVU368
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1106              		.loc 1 788 14 is_stmt 0 view .LVU369
 1107 0026 F31A     		subs	r3, r6, r3
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1108              		.loc 1 788 7 view .LVU370
 1109 0028 9342     		cmp	r3, r2
 1110 002a 03D2     		bcs	.L138
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1111              		.loc 1 789 5 is_stmt 1 view .LVU371
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1112              		.loc 1 789 13 is_stmt 0 view .LVU372
 1113 002c 94F80372 		ldrb	r7, [r4, #515]	@ zero_extendqisi2
 1114              	.LVL113:
 1115              	.L140:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1116              		.loc 1 789 27 is_stmt 1 view .LVU373
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1117              		.loc 1 789 5 is_stmt 0 view .LVU374
 1118 0030 012F     		cmp	r7, #1
 1119 0032 01D8     		bhi	.L141
 1120              	.LVL114:
 1121              	.L138:
 796:source\fatfs/ff.c **** }
 1122              		.loc 1 796 2 is_stmt 1 view .LVU375
 797:source\fatfs/ff.c **** #endif
 1123              		.loc 1 797 1 is_stmt 0 view .LVU376
 1124 0034 2846     		mov	r0, r5
 1125 0036 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1126              	.LVL115:
 1127              	.L141:
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 1128              		.loc 1 790 6 is_stmt 1 view .LVU377
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 1129              		.loc 1 790 12 is_stmt 0 view .LVU378
 1130 0038 D4F81832 		ldr	r3, [r4, #536]
 791:source\fatfs/ff.c **** 				}
 1131              		.loc 1 791 6 view .LVU379
 1132 003c 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 1133              		.loc 1 790 12 view .LVU380
 1134 0040 1E44     		add	r6, r6, r3
 1135              	.LVL116:
 791:source\fatfs/ff.c **** 				}
 1136              		.loc 1 791 6 is_stmt 1 view .LVU381
 1137 0042 3246     		mov	r2, r6
 1138 0044 0123     		movs	r3, #1
 1139 0046 2146     		mov	r1, r4
 1140 0048 FFF7FEFF 		bl	disk_write
 1141              	.LVL117:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1142              		.loc 1 789 36 view .LVU382
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1143              		.loc 1 789 38 is_stmt 0 view .LVU383
 1144 004c 013F     		subs	r7, r7, #1
 1145              	.LVL118:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 1146              		.loc 1 789 38 view .LVU384
 1147 004e EFE7     		b	.L140
 1148              	.LVL119:
 1149              	.L143:
 785:source\fatfs/ff.c **** 		} else {
 1150              		.loc 1 785 8 view .LVU385
 1151 0050 0125     		movs	r5, #1
 1152 0052 EFE7     		b	.L138
 1153              		.cfi_endproc
 1154              	.LFE193:
 1156              		.section	.text.sync_window,"ax",%progbits
 1157              		.align	1
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1162              	sync_window:
 1163              	.LVL120:
 1164              	.LFB139:
 776:source\fatfs/ff.c **** 	DWORD wsect;
 1165              		.loc 1 776 1 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 777:source\fatfs/ff.c **** 	UINT nf;
 1170              		.loc 1 777 2 view .LVU387
 778:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1171              		.loc 1 778 2 view .LVU388
 779:source\fatfs/ff.c **** 
 1172              		.loc 1 779 2 view .LVU389
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1173              		.loc 1 782 2 view .LVU390
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1174              		.loc 1 782 8 is_stmt 0 view .LVU391
 1175 0000 90F80432 		ldrb	r3, [r0, #516]	@ zero_extendqisi2
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1176              		.loc 1 782 5 view .LVU392
 1177 0004 0BB1     		cbz	r3, .L145
 1178 0006 FFF7FEBF 		b	sync_window.part.0
 1179              	.LVL121:
 1180              	.L145:
 796:source\fatfs/ff.c **** }
 1181              		.loc 1 796 2 is_stmt 1 view .LVU393
 797:source\fatfs/ff.c **** #endif
 1182              		.loc 1 797 1 is_stmt 0 view .LVU394
 1183 000a 1846     		mov	r0, r3
 1184              	.LVL122:
 797:source\fatfs/ff.c **** #endif
 1185              		.loc 1 797 1 view .LVU395
 1186 000c 7047     		bx	lr
 1187              		.cfi_endproc
 1188              	.LFE139:
 1190              		.section	.text.move_window,"ax",%progbits
 1191              		.align	1
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1196              	move_window:
 1197              	.LVL123:
 1198              	.LFB140:
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1199              		.loc 1 806 1 is_stmt 1 view -0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 807:source\fatfs/ff.c **** 
 1203              		.loc 1 807 2 view .LVU397
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1204              		.loc 1 810 2 view .LVU398
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1205              		.loc 1 806 1 is_stmt 0 view .LVU399
 1206 0000 38B5     		push	{r3, r4, r5, lr}
 1207              		.cfi_def_cfa_offset 16
 1208              		.cfi_offset 3, -16
 1209              		.cfi_offset 4, -12
 1210              		.cfi_offset 5, -8
 1211              		.cfi_offset 14, -4
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1212              		.loc 1 810 5 view .LVU400
 1213 0002 D0F82C32 		ldr	r3, [r0, #556]
 1214 0006 8B42     		cmp	r3, r1
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1215              		.loc 1 806 1 view .LVU401
 1216 0008 0546     		mov	r5, r0
 1217 000a 0C46     		mov	r4, r1
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1218              		.loc 1 810 5 view .LVU402
 1219 000c 11D0     		beq	.L149
 812:source\fatfs/ff.c **** #endif
 1220              		.loc 1 812 3 is_stmt 1 view .LVU403
 812:source\fatfs/ff.c **** #endif
 1221              		.loc 1 812 9 is_stmt 0 view .LVU404
 1222 000e FFF7FEFF 		bl	sync_window
 1223              	.LVL124:
 814:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 1224              		.loc 1 814 3 is_stmt 1 view .LVU405
 814:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 1225              		.loc 1 814 6 is_stmt 0 view .LVU406
 1226 0012 68B9     		cbnz	r0, .L147
 1227              	.LVL125:
 1228              	.LBB6:
 1229              	.LBI6:
 802:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 1230              		.loc 1 802 9 is_stmt 1 view .LVU407
 1231              	.LBB7:
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1232              		.loc 1 815 4 view .LVU408
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1233              		.loc 1 815 8 is_stmt 0 view .LVU409
 1234 0014 2246     		mov	r2, r4
 1235 0016 95F80102 		ldrb	r0, [r5, #513]	@ zero_extendqisi2
 1236              	.LVL126:
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1237              		.loc 1 815 8 view .LVU410
 1238 001a 0123     		movs	r3, #1
 1239 001c 2946     		mov	r1, r5
 1240 001e FFF7FEFF 		bl	disk_read
 1241              	.LVL127:
 817:source\fatfs/ff.c **** 			}
 1242              		.loc 1 817 9 view .LVU411
 1243 0022 0028     		cmp	r0, #0
 1244 0024 1CBF     		itt	ne
 1245 0026 4FF0FF34 		movne	r4, #-1
 1246              	.LVL128:
 817:source\fatfs/ff.c **** 			}
 1247              		.loc 1 817 9 view .LVU412
 1248 002a 0120     		movne	r0, #1
 1249              	.LVL129:
 819:source\fatfs/ff.c **** 		}
 1250              		.loc 1 819 4 is_stmt 1 view .LVU413
 819:source\fatfs/ff.c **** 		}
 1251              		.loc 1 819 16 is_stmt 0 view .LVU414
 1252 002c C5F82C42 		str	r4, [r5, #556]
 822:source\fatfs/ff.c **** }
 1253              		.loc 1 822 2 is_stmt 1 view .LVU415
 1254              	.LVL130:
 1255              	.L147:
 822:source\fatfs/ff.c **** }
 1256              		.loc 1 822 2 is_stmt 0 view .LVU416
 1257              	.LBE7:
 1258              	.LBE6:
 822:source\fatfs/ff.c **** }
 1259              		.loc 1 822 2 is_stmt 1 view .LVU417
 823:source\fatfs/ff.c **** 
 1260              		.loc 1 823 1 is_stmt 0 view .LVU418
 1261 0030 38BD     		pop	{r3, r4, r5, pc}
 1262              	.LVL131:
 1263              	.L149:
 807:source\fatfs/ff.c **** 
 1264              		.loc 1 807 10 view .LVU419
 1265 0032 0020     		movs	r0, #0
 1266              	.LVL132:
 807:source\fatfs/ff.c **** 
 1267              		.loc 1 807 10 view .LVU420
 1268 0034 FCE7     		b	.L147
 1269              		.cfi_endproc
 1270              	.LFE140:
 1272              		.section	.text.check_fs,"ax",%progbits
 1273              		.align	1
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1278              	check_fs:
 1279              	.LVL133:
 1280              	.LFB166:
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1281              		.loc 1 2252 1 is_stmt 1 view -0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1285              		.loc 1 2253 12 is_stmt 0 view .LVU422
 1286 0000 0023     		movs	r3, #0
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1287              		.loc 1 2252 1 view .LVU423
 1288 0002 10B5     		push	{r4, lr}
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 4, -8
 1291              		.cfi_offset 14, -4
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1292              		.loc 1 2253 12 view .LVU424
 1293 0004 80F80432 		strb	r3, [r0, #516]
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1294              		.loc 1 2253 29 view .LVU425
 1295 0008 4FF0FF33 		mov	r3, #-1
 1296 000c C0F82C32 		str	r3, [r0, #556]
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1297              		.loc 1 2252 1 view .LVU426
 1298 0010 0446     		mov	r4, r0
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1299              		.loc 1 2253 2 is_stmt 1 view .LVU427
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1300              		.loc 1 2253 17 view .LVU428
2254:source\fatfs/ff.c **** 		return 3;
 1301              		.loc 1 2254 2 view .LVU429
2254:source\fatfs/ff.c **** 		return 3;
 1302              		.loc 1 2254 6 is_stmt 0 view .LVU430
 1303 0012 FFF7FEFF 		bl	move_window
 1304              	.LVL134:
2254:source\fatfs/ff.c **** 		return 3;
 1305              		.loc 1 2254 5 view .LVU431
 1306 0016 A0B9     		cbnz	r0, .L155
2257:source\fatfs/ff.c **** 		return 2;
 1307              		.loc 1 2257 2 is_stmt 1 view .LVU432
2257:source\fatfs/ff.c **** 		return 2;
 1308              		.loc 1 2257 5 is_stmt 0 view .LVU433
 1309 0018 B4F8FE21 		ldrh	r2, [r4, #510]
 1310 001c 4AF65523 		movw	r3, #43605
 1311 0020 9A42     		cmp	r2, r3
 1312 0022 10D1     		bne	.L156
 1313              	.LVL135:
 1314              	.LBB10:
 1315              	.LBI10:
2248:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 1316              		.loc 1 2248 6 is_stmt 1 view .LVU434
 1317              	.LBB11:
2260:source\fatfs/ff.c **** 		return 0;
 1318              		.loc 1 2260 2 view .LVU435
2260:source\fatfs/ff.c **** 		return 0;
 1319              		.loc 1 2260 7 is_stmt 0 view .LVU436
 1320 0024 D4F83630 		ldr	r3, [r4, #54]	@ unaligned
2260:source\fatfs/ff.c **** 		return 0;
 1321              		.loc 1 2260 5 view .LVU437
 1322 0028 084A     		ldr	r2, .L157
2260:source\fatfs/ff.c **** 		return 0;
 1323              		.loc 1 2260 44 view .LVU438
 1324 002a 23F07F43 		bic	r3, r3, #-16777216
2260:source\fatfs/ff.c **** 		return 0;
 1325              		.loc 1 2260 5 view .LVU439
 1326 002e 9342     		cmp	r3, r2
 1327 0030 06D0     		beq	.L154
2262:source\fatfs/ff.c **** 		return 0;
 1328              		.loc 1 2262 2 is_stmt 1 view .LVU440
2262:source\fatfs/ff.c **** 		return 0;
 1329              		.loc 1 2262 7 is_stmt 0 view .LVU441
 1330 0032 D4F85200 		ldr	r0, [r4, #82]	@ unaligned
2262:source\fatfs/ff.c **** 		return 0;
 1331              		.loc 1 2262 46 view .LVU442
 1332 0036 20F07F40 		bic	r0, r0, #-16777216
 1333              	.LBE11:
 1334              	.LBE10:
2255:source\fatfs/ff.c **** 
 1335              		.loc 1 2255 10 view .LVU443
 1336 003a 801A     		subs	r0, r0, r2
 1337 003c 18BF     		it	ne
 1338 003e 0120     		movne	r0, #1
 1339              	.LVL136:
 1340              	.L154:
2266:source\fatfs/ff.c **** 
 1341              		.loc 1 2266 1 view .LVU444
 1342 0040 10BD     		pop	{r4, pc}
 1343              	.LVL137:
 1344              	.L155:
2255:source\fatfs/ff.c **** 
 1345              		.loc 1 2255 10 view .LVU445
 1346 0042 0320     		movs	r0, #3
 1347 0044 FCE7     		b	.L154
 1348              	.L156:
2258:source\fatfs/ff.c **** 
 1349              		.loc 1 2258 10 view .LVU446
 1350 0046 0220     		movs	r0, #2
 1351 0048 FAE7     		b	.L154
 1352              	.L158:
 1353 004a 00BF     		.align	2
 1354              	.L157:
 1355 004c 46415400 		.word	5521734
 1356              		.cfi_endproc
 1357              	.LFE166:
 1359              		.section	.text.find_volume,"ax",%progbits
 1360              		.align	1
 1361              		.syntax unified
 1362              		.thumb
 1363              		.thumb_func
 1365              	find_volume:
 1366              	.LVL138:
 1367              	.LFB167:
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1368              		.loc 1 2281 1 is_stmt 1 view -0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 16
 1371              		@ frame_needed = 0, uses_anonymous_args = 0
2282:source\fatfs/ff.c **** 	int vol;
 1372              		.loc 1 2282 2 view .LVU448
2283:source\fatfs/ff.c **** 	DSTATUS stat;
 1373              		.loc 1 2283 2 view .LVU449
2284:source\fatfs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
 1374              		.loc 1 2284 2 view .LVU450
2285:source\fatfs/ff.c **** 	WORD nrsv;
 1375              		.loc 1 2285 2 view .LVU451
2286:source\fatfs/ff.c **** 	FATFS *fs;
 1376              		.loc 1 2286 2 view .LVU452
2287:source\fatfs/ff.c **** 	UINT i;
 1377              		.loc 1 2287 2 view .LVU453
2288:source\fatfs/ff.c **** 
 1378              		.loc 1 2288 2 view .LVU454
2292:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
 1379              		.loc 1 2292 2 view .LVU455
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1380              		.loc 1 2281 1 is_stmt 0 view .LVU456
 1381 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1382              		.cfi_def_cfa_offset 40
 1383              		.cfi_offset 4, -24
 1384              		.cfi_offset 5, -20
 1385              		.cfi_offset 6, -16
 1386              		.cfi_offset 7, -12
 1387              		.cfi_offset 8, -8
 1388              		.cfi_offset 14, -4
2292:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
 1389              		.loc 1 2292 7 view .LVU457
 1390 0004 0023     		movs	r3, #0
 1391 0006 0360     		str	r3, [r0]
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1392              		.loc 1 2293 2 is_stmt 1 view .LVU458
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1393              		.loc 1 2281 1 is_stmt 0 view .LVU459
 1394 0008 0746     		mov	r7, r0
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1395              		.loc 1 2293 8 view .LVU460
 1396 000a 0846     		mov	r0, r1
 1397              	.LVL139:
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1398              		.loc 1 2281 1 view .LVU461
 1399 000c 1546     		mov	r5, r2
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1400              		.loc 1 2293 8 view .LVU462
 1401 000e FFF7FEFF 		bl	get_ldnumber
 1402              	.LVL140:
2294:source\fatfs/ff.c **** 
 1403              		.loc 1 2294 2 is_stmt 1 view .LVU463
2294:source\fatfs/ff.c **** 
 1404              		.loc 1 2294 5 is_stmt 0 view .LVU464
 1405 0012 061E     		subs	r6, r0, #0
 1406 0014 C0F20281 		blt	.L181
2297:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1407              		.loc 1 2297 2 is_stmt 1 view .LVU465
2297:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1408              		.loc 1 2297 5 is_stmt 0 view .LVU466
 1409 0018 844B     		ldr	r3, .L221
 1410 001a 53F82640 		ldr	r4, [r3, r6, lsl #2]
 1411              	.LVL141:
2298:source\fatfs/ff.c **** 
 1412              		.loc 1 2298 2 is_stmt 1 view .LVU467
2298:source\fatfs/ff.c **** 
 1413              		.loc 1 2298 5 is_stmt 0 view .LVU468
 1414 001e 002C     		cmp	r4, #0
 1415 0020 00F0FE80 		beq	.L182
2300:source\fatfs/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 1416              		.loc 1 2300 14 is_stmt 1 view .LVU469
2301:source\fatfs/ff.c **** 
 1417              		.loc 1 2301 2 view .LVU470
2301:source\fatfs/ff.c **** 
 1418              		.loc 1 2301 7 is_stmt 0 view .LVU471
 1419 0024 3C60     		str	r4, [r7]
2303:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
 1420              		.loc 1 2303 2 is_stmt 1 view .LVU472
2303:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
 1421              		.loc 1 2303 5 is_stmt 0 view .LVU473
 1422 0026 94F80032 		ldrb	r3, [r4, #512]	@ zero_extendqisi2
 1423 002a 73B1     		cbz	r3, .L161
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1424              		.loc 1 2304 3 is_stmt 1 view .LVU474
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1425              		.loc 1 2304 10 is_stmt 0 view .LVU475
 1426 002c 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 1427              	.LVL142:
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1428              		.loc 1 2304 10 view .LVU476
 1429 0030 FFF7FEFF 		bl	disk_status
 1430              	.LVL143:
2305:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 1431              		.loc 1 2305 3 is_stmt 1 view .LVU477
2305:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 1432              		.loc 1 2305 6 is_stmt 0 view .LVU478
 1433 0034 C107     		lsls	r1, r0, #31
 1434 0036 08D4     		bmi	.L161
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1435              		.loc 1 2306 4 is_stmt 1 view .LVU479
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1436              		.loc 1 2306 7 is_stmt 0 view .LVU480
 1437 0038 1DB1     		cbz	r5, .L199
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1438              		.loc 1 2306 31 discriminator 1 view .LVU481
 1439 003a 10F00405 		ands	r5, r0, #4
 1440 003e 00D0     		beq	.L199
 1441              	.L163:
2307:source\fatfs/ff.c **** 			return FR_OK;				/* The file system object is valid */
 1442              		.loc 1 2307 12 view .LVU482
 1443 0040 0A25     		movs	r5, #10
 1444              	.LVL144:
 1445              	.L199:
2435:source\fatfs/ff.c **** 
 1446              		.loc 1 2435 1 view .LVU483
 1447 0042 2846     		mov	r0, r5
 1448 0044 04B0     		add	sp, sp, #16
 1449              		.cfi_remember_state
 1450              		.cfi_def_cfa_offset 24
 1451              		@ sp needed
 1452 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1453              	.LVL145:
 1454              	.L161:
 1455              		.cfi_restore_state
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1456              		.loc 1 2315 2 is_stmt 1 view .LVU484
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1457              		.loc 1 2315 14 is_stmt 0 view .LVU485
 1458 004a 0023     		movs	r3, #0
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1459              		.loc 1 2316 12 view .LVU486
 1460 004c F0B2     		uxtb	r0, r6
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1461              		.loc 1 2315 14 view .LVU487
 1462 004e 84F80032 		strb	r3, [r4, #512]
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1463              		.loc 1 2316 2 is_stmt 1 view .LVU488
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1464              		.loc 1 2316 10 is_stmt 0 view .LVU489
 1465 0052 84F80102 		strb	r0, [r4, #513]
2317:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1466              		.loc 1 2317 2 is_stmt 1 view .LVU490
2317:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1467              		.loc 1 2317 9 is_stmt 0 view .LVU491
 1468 0056 FFF7FEFF 		bl	disk_initialize
 1469              	.LVL146:
2318:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1470              		.loc 1 2318 2 is_stmt 1 view .LVU492
2318:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1471              		.loc 1 2318 5 is_stmt 0 view .LVU493
 1472 005a C207     		lsls	r2, r0, #31
 1473 005c 00F1E280 		bmi	.L183
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1474              		.loc 1 2320 2 is_stmt 1 view .LVU494
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1475              		.loc 1 2320 5 is_stmt 0 view .LVU495
 1476 0060 0DB1     		cbz	r5, .L162
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1477              		.loc 1 2320 29 discriminator 1 view .LVU496
 1478 0062 4307     		lsls	r3, r0, #29
 1479 0064 ECD4     		bmi	.L163
 1480              	.L162:
2327:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 1481              		.loc 1 2327 2 is_stmt 1 view .LVU497
 1482              	.LVL147:
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1483              		.loc 1 2328 2 view .LVU498
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1484              		.loc 1 2328 8 is_stmt 0 view .LVU499
 1485 0066 0021     		movs	r1, #0
 1486 0068 2046     		mov	r0, r4
 1487              	.LVL148:
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1488              		.loc 1 2328 8 view .LVU500
 1489 006a FFF7FEFF 		bl	check_fs
 1490              	.LVL149:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1491              		.loc 1 2329 5 view .LVU501
 1492 006e 0128     		cmp	r0, #1
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1493              		.loc 1 2328 8 view .LVU502
 1494 0070 0546     		mov	r5, r0
 1495              	.LVL150:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1496              		.loc 1 2329 2 is_stmt 1 view .LVU503
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1497              		.loc 1 2329 5 is_stmt 0 view .LVU504
 1498 0072 40F0B980 		bne	.L164
 1499 0076 E846     		mov	r8, sp
 1500 0078 04F5DF73 		add	r3, r4, #446
 1501 007c 04F5FF70 		add	r0, r4, #510
 1502              	.LVL151:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1503              		.loc 1 2329 5 view .LVU505
 1504 0080 4146     		mov	r1, r8
 1505              	.L166:
2331:source\fatfs/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 1506              		.loc 1 2331 4 is_stmt 1 view .LVU506
 1507              	.LVL152:
2332:source\fatfs/ff.c **** 		}
 1508              		.loc 1 2332 4 view .LVU507
2332:source\fatfs/ff.c **** 		}
 1509              		.loc 1 2332 37 is_stmt 0 view .LVU508
 1510 0082 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1511 0084 02B1     		cbz	r2, .L165
2332:source\fatfs/ff.c **** 		}
 1512              		.loc 1 2332 37 discriminator 1 view .LVU509
 1513 0086 9A68     		ldr	r2, [r3, #8]	@ unaligned
 1514              	.L165:
2332:source\fatfs/ff.c **** 		}
 1515              		.loc 1 2332 10 discriminator 4 view .LVU510
 1516 0088 41F8042B 		str	r2, [r1], #4
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1517              		.loc 1 2330 22 is_stmt 1 discriminator 4 view .LVU511
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1518              		.loc 1 2330 15 discriminator 4 view .LVU512
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1519              		.loc 1 2330 3 is_stmt 0 discriminator 4 view .LVU513
 1520 008c 1033     		adds	r3, r3, #16
 1521              	.LVL153:
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1522              		.loc 1 2330 3 discriminator 4 view .LVU514
 1523 008e 8342     		cmp	r3, r0
 1524 0090 F7D1     		bne	.L166
 1525 0092 0027     		movs	r7, #0
 1526              	.LVL154:
 1527              	.L169:
2336:source\fatfs/ff.c **** 			bsect = br[i];
 1528              		.loc 1 2336 3 is_stmt 1 view .LVU515
2337:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 1529              		.loc 1 2337 4 view .LVU516
2337:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 1530              		.loc 1 2337 10 is_stmt 0 view .LVU517
 1531 0094 58F8046B 		ldr	r6, [r8], #4
 1532              	.LVL155:
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1533              		.loc 1 2338 4 is_stmt 1 view .LVU518
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1534              		.loc 1 2338 8 is_stmt 0 view .LVU519
 1535 0098 002E     		cmp	r6, #0
 1536 009a 00F09D80 		beq	.L185
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1537              		.loc 1 2338 18 discriminator 1 view .LVU520
 1538 009e 3146     		mov	r1, r6
 1539 00a0 2046     		mov	r0, r4
 1540 00a2 FFF7FEFF 		bl	check_fs
 1541              	.LVL156:
2339:source\fatfs/ff.c **** 	}
 1542              		.loc 1 2339 11 is_stmt 1 discriminator 1 view .LVU521
2339:source\fatfs/ff.c **** 	}
 1543              		.loc 1 2339 3 is_stmt 0 discriminator 1 view .LVU522
 1544 00a6 0028     		cmp	r0, #0
 1545 00a8 40F09780 		bne	.L167
 1546              	.LVL157:
 1547              	.L168:
2346:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1548              		.loc 1 2346 2 is_stmt 1 view .LVU523
2346:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1549              		.loc 1 2346 5 is_stmt 0 view .LVU524
 1550 00ac B4F80B30 		ldrh	r3, [r4, #11]	@ unaligned
 1551 00b0 B3F5007F 		cmp	r3, #512
 1552 00b4 40F09B80 		bne	.L171
2349:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 1553              		.loc 1 2349 2 is_stmt 1 view .LVU525
2349:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 1554              		.loc 1 2349 9 is_stmt 0 view .LVU526
 1555 00b8 E08A     		ldrh	r0, [r4, #22]
 1556              	.LVL158:
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1557              		.loc 1 2350 2 is_stmt 1 view .LVU527
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1558              		.loc 1 2350 5 is_stmt 0 view .LVU528
 1559 00ba 00B9     		cbnz	r0, .L172
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1560              		.loc 1 2350 15 is_stmt 1 discriminator 1 view .LVU529
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1561              		.loc 1 2350 22 is_stmt 0 discriminator 1 view .LVU530
 1562 00bc 606A     		ldr	r0, [r4, #36]
 1563              	.LVL159:
 1564              	.L172:
2351:source\fatfs/ff.c **** 
 1565              		.loc 1 2351 2 is_stmt 1 view .LVU531
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1566              		.loc 1 2353 25 is_stmt 0 view .LVU532
 1567 00be 277C     		ldrb	r7, [r4, #16]	@ zero_extendqisi2
2351:source\fatfs/ff.c **** 
 1568              		.loc 1 2351 12 view .LVU533
 1569 00c0 C4F81802 		str	r0, [r4, #536]
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1570              		.loc 1 2353 2 is_stmt 1 view .LVU534
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1571              		.loc 1 2354 5 is_stmt 0 view .LVU535
 1572 00c4 7B1E     		subs	r3, r7, #1
 1573 00c6 012B     		cmp	r3, #1
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1574              		.loc 1 2353 13 view .LVU536
 1575 00c8 84F80372 		strb	r7, [r4, #515]
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1576              		.loc 1 2354 2 is_stmt 1 view .LVU537
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1577              		.loc 1 2354 5 is_stmt 0 view .LVU538
 1578 00cc 00F28F80 		bhi	.L171
2356:source\fatfs/ff.c **** 
 1579              		.loc 1 2356 2 is_stmt 1 view .LVU539
 1580              	.LVL160:
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1581              		.loc 1 2358 2 view .LVU540
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1582              		.loc 1 2358 24 is_stmt 0 view .LVU541
 1583 00d0 657B     		ldrb	r5, [r4, #13]	@ zero_extendqisi2
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1584              		.loc 1 2358 12 view .LVU542
 1585 00d2 84F80252 		strb	r5, [r4, #514]
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1586              		.loc 1 2359 2 is_stmt 1 view .LVU543
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1587              		.loc 1 2359 5 is_stmt 0 view .LVU544
 1588 00d6 002D     		cmp	r5, #0
 1589 00d8 00F08980 		beq	.L171
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1590              		.loc 1 2359 44 discriminator 1 view .LVU545
 1591 00dc 6B1E     		subs	r3, r5, #1
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1592              		.loc 1 2359 17 discriminator 1 view .LVU546
 1593 00de 2B42     		tst	r3, r5
 1594 00e0 40F08580 		bne	.L171
2362:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 1595              		.loc 1 2362 2 is_stmt 1 view .LVU547
 1596 00e4 B4F811C0 		ldrh	ip, [r4, #17]	@ unaligned
2362:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 1597              		.loc 1 2362 16 is_stmt 0 view .LVU548
 1598 00e8 A4F808C2 		strh	ip, [r4, #520]	@ movhi
2363:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1599              		.loc 1 2363 2 is_stmt 1 view .LVU549
2363:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1600              		.loc 1 2363 5 is_stmt 0 view .LVU550
 1601 00ec 1CF00F0F 		tst	ip, #15
 1602 00f0 7DD1     		bne	.L171
2366:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 1603              		.loc 1 2366 2 is_stmt 1 view .LVU551
2366:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 1604              		.loc 1 2366 8 is_stmt 0 view .LVU552
 1605 00f2 B4F81330 		ldrh	r3, [r4, #19]	@ unaligned
 1606              	.LVL161:
2367:source\fatfs/ff.c **** 
 1607              		.loc 1 2367 2 is_stmt 1 view .LVU553
2367:source\fatfs/ff.c **** 
 1608              		.loc 1 2367 5 is_stmt 0 view .LVU554
 1609 00f6 03B9     		cbnz	r3, .L173
2367:source\fatfs/ff.c **** 
 1610              		.loc 1 2367 14 is_stmt 1 discriminator 1 view .LVU555
2367:source\fatfs/ff.c **** 
 1611              		.loc 1 2367 20 is_stmt 0 discriminator 1 view .LVU556
 1612 00f8 236A     		ldr	r3, [r4, #32]
 1613              	.LVL162:
 1614              	.L173:
2369:source\fatfs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 1615              		.loc 1 2369 2 is_stmt 1 view .LVU557
 1616 00fa E289     		ldrh	r2, [r4, #14]
 1617              	.LVL163:
2370:source\fatfs/ff.c **** 
 1618              		.loc 1 2370 2 view .LVU558
2370:source\fatfs/ff.c **** 
 1619              		.loc 1 2370 5 is_stmt 0 view .LVU559
 1620 00fc 002A     		cmp	r2, #0
 1621 00fe 76D0     		beq	.L171
2356:source\fatfs/ff.c **** 
 1622              		.loc 1 2356 9 view .LVU560
 1623 0100 4743     		muls	r7, r0, r7
 1624              	.LVL164:
2373:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1625              		.loc 1 2373 2 is_stmt 1 view .LVU561
2373:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1626              		.loc 1 2373 9 is_stmt 0 view .LVU562
 1627 0102 02EB1C11 		add	r1, r2, ip, lsr #4
 1628 0106 3944     		add	r1, r1, r7
 1629              	.LVL165:
2374:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1630              		.loc 1 2374 2 is_stmt 1 view .LVU563
2374:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1631              		.loc 1 2374 5 is_stmt 0 view .LVU564
 1632 0108 8B42     		cmp	r3, r1
 1633 010a 70D3     		bcc	.L171
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1634              		.loc 1 2375 2 is_stmt 1 view .LVU565
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1635              		.loc 1 2375 17 is_stmt 0 view .LVU566
 1636 010c 5B1A     		subs	r3, r3, r1
 1637              	.LVL166:
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1638              		.loc 1 2376 5 view .LVU567
 1639 010e AB42     		cmp	r3, r5
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1640              		.loc 1 2375 8 view .LVU568
 1641 0110 B3FBF5FE 		udiv	lr, r3, r5
 1642              	.LVL167:
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1643              		.loc 1 2376 2 is_stmt 1 view .LVU569
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1644              		.loc 1 2376 5 is_stmt 0 view .LVU570
 1645 0114 6BD3     		bcc	.L171
2377:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1646              		.loc 1 2377 2 is_stmt 1 view .LVU571
 1647              	.LVL168:
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1648              		.loc 1 2378 2 view .LVU572
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1649              		.loc 1 2378 5 is_stmt 0 view .LVU573
 1650 0116 40F6F573 		movw	r3, #4085
 1651 011a 9E45     		cmp	lr, r3
 1652 011c 6BD9     		bls	.L188
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1653              		.loc 1 2378 26 is_stmt 1 view .LVU574
 1654              	.LVL169:
2379:source\fatfs/ff.c **** 
 1655              		.loc 1 2379 2 view .LVU575
2379:source\fatfs/ff.c **** 
 1656              		.loc 1 2379 30 is_stmt 0 view .LVU576
 1657 011e 4FF6F575 		movw	r5, #65525
 1658 0122 AE45     		cmp	lr, r5
 1659 0124 94BF     		ite	ls
 1660 0126 0225     		movls	r5, #2
 1661 0128 0325     		movhi	r5, #3
 1662              	.LVL170:
 1663              	.L174:
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1664              		.loc 1 2382 2 is_stmt 1 view .LVU577
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1665              		.loc 1 2382 23 is_stmt 0 view .LVU578
 1666 012a 0EF10203 		add	r3, lr, #2
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1667              		.loc 1 2384 22 view .LVU579
 1668 012e 3244     		add	r2, r2, r6
 1669              	.LVL171:
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1670              		.loc 1 2385 23 view .LVU580
 1671 0130 3144     		add	r1, r1, r6
 1672              	.LVL172:
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1673              		.loc 1 2386 5 view .LVU581
 1674 0132 032D     		cmp	r5, #3
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1675              		.loc 1 2382 15 view .LVU582
 1676 0134 C4F81432 		str	r3, [r4, #532]
2383:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1677              		.loc 1 2383 2 is_stmt 1 view .LVU583
2383:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1678              		.loc 1 2383 14 is_stmt 0 view .LVU584
 1679 0138 C4F81C62 		str	r6, [r4, #540]
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1680              		.loc 1 2384 2 is_stmt 1 view .LVU585
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1681              		.loc 1 2384 14 is_stmt 0 view .LVU586
 1682 013c C4F82022 		str	r2, [r4, #544]
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1683              		.loc 1 2385 2 is_stmt 1 view .LVU587
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1684              		.loc 1 2385 15 is_stmt 0 view .LVU588
 1685 0140 C4F82812 		str	r1, [r4, #552]
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1686              		.loc 1 2386 2 is_stmt 1 view .LVU589
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1687              		.loc 1 2386 5 is_stmt 0 view .LVU590
 1688 0144 59D1     		bne	.L175
 1689              	.LVL173:
2387:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 1690              		.loc 1 2387 3 is_stmt 1 view .LVU591
2387:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 1691              		.loc 1 2387 6 is_stmt 0 view .LVU592
 1692 0146 BCF1000F 		cmp	ip, #0
 1693 014a 50D1     		bne	.L171
2388:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1694              		.loc 1 2388 3 is_stmt 1 view .LVU593
2388:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1695              		.loc 1 2388 15 is_stmt 0 view .LVU594
 1696 014c E26A     		ldr	r2, [r4, #44]
 1697 014e C4F82422 		str	r2, [r4, #548]
2389:source\fatfs/ff.c **** 	} else {
 1698              		.loc 1 2389 3 is_stmt 1 view .LVU595
2389:source\fatfs/ff.c **** 	} else {
 1699              		.loc 1 2389 10 is_stmt 0 view .LVU596
 1700 0152 9B00     		lsls	r3, r3, #2
 1701              	.LVL174:
 1702              	.L176:
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1703              		.loc 1 2396 2 is_stmt 1 view .LVU597
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1704              		.loc 1 2396 26 is_stmt 0 view .LVU598
 1705 0154 03F2FF13 		addw	r3, r3, #511
 1706              	.LVL175:
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1707              		.loc 1 2396 5 view .LVU599
 1708 0158 B0EB532F 		cmp	r0, r3, lsr #9
 1709 015c 47D3     		bcc	.L171
2401:source\fatfs/ff.c **** 
 1710              		.loc 1 2401 2 is_stmt 1 view .LVU600
2401:source\fatfs/ff.c **** 
 1711              		.loc 1 2401 34 is_stmt 0 view .LVU601
 1712 015e 4FF0FF33 		mov	r3, #-1
 1713              	.LVL176:
2401:source\fatfs/ff.c **** 
 1714              		.loc 1 2401 17 view .LVU602
 1715 0162 C4E98333 		strd	r3, r3, [r4, #524]
2404:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 1716              		.loc 1 2404 2 is_stmt 1 view .LVU603
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1717              		.loc 1 2406 5 is_stmt 0 view .LVU604
 1718 0166 032D     		cmp	r5, #3
2404:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 1719              		.loc 1 2404 15 view .LVU605
 1720 0168 4FF08003 		mov	r3, #128
 1721 016c 84F80532 		strb	r3, [r4, #517]
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1722              		.loc 1 2406 2 is_stmt 1 view .LVU606
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1723              		.loc 1 2406 5 is_stmt 0 view .LVU607
 1724 0170 24D1     		bne	.L179
2407:source\fatfs/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
 1725              		.loc 1 2407 3 view .LVU608
 1726 0172 238E     		ldrh	r3, [r4, #48]
 1727 0174 012B     		cmp	r3, #1
 1728 0176 21D1     		bne	.L179
2408:source\fatfs/ff.c **** 	{
 1729              		.loc 1 2408 6 view .LVU609
 1730 0178 711C     		adds	r1, r6, #1
 1731 017a 2046     		mov	r0, r4
 1732              	.LVL177:
2408:source\fatfs/ff.c **** 	{
 1733              		.loc 1 2408 6 view .LVU610
 1734 017c FFF7FEFF 		bl	move_window
 1735              	.LVL178:
2408:source\fatfs/ff.c **** 	{
 1736              		.loc 1 2408 3 view .LVU611
 1737 0180 E0B9     		cbnz	r0, .L179
2410:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 1738              		.loc 1 2410 3 is_stmt 1 view .LVU612
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1739              		.loc 1 2411 6 is_stmt 0 view .LVU613
 1740 0182 B4F8FE21 		ldrh	r2, [r4, #510]
2410:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 1741              		.loc 1 2410 16 view .LVU614
 1742 0186 84F80502 		strb	r0, [r4, #517]
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1743              		.loc 1 2411 3 is_stmt 1 view .LVU615
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1744              		.loc 1 2411 6 is_stmt 0 view .LVU616
 1745 018a 4AF65523 		movw	r3, #43605
 1746 018e 9A42     		cmp	r2, r3
 1747 0190 14D1     		bne	.L179
2412:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 1748              		.loc 1 2412 4 view .LVU617
 1749 0192 2268     		ldr	r2, [r4]
 1750 0194 264B     		ldr	r3, .L221+4
 1751 0196 9A42     		cmp	r2, r3
 1752 0198 10D1     		bne	.L179
2413:source\fatfs/ff.c **** 		{
 1753              		.loc 1 2413 4 view .LVU618
 1754 019a 03F1FF53 		add	r3, r3, #534773760
 1755 019e D4F8E421 		ldr	r2, [r4, #484]
 1756 01a2 03F50053 		add	r3, r3, #8192
 1757 01a6 2033     		adds	r3, r3, #32
 1758 01a8 9A42     		cmp	r2, r3
2416:source\fatfs/ff.c **** #endif
 1759              		.loc 1 2416 4 is_stmt 1 view .LVU619
2416:source\fatfs/ff.c **** #endif
 1760              		.loc 1 2416 19 is_stmt 0 view .LVU620
 1761 01aa 01BF     		itttt	eq
 1762 01ac D4F8E831 		ldreq	r3, [r4, #488]
 1763 01b0 C4F81032 		streq	r3, [r4, #528]
2419:source\fatfs/ff.c **** #endif
 1764              		.loc 1 2419 4 is_stmt 1 view .LVU621
2419:source\fatfs/ff.c **** #endif
 1765              		.loc 1 2419 19 is_stmt 0 view .LVU622
 1766 01b4 D4F8EC31 		ldreq	r3, [r4, #492]
 1767 01b8 C4F80C32 		streq	r3, [r4, #524]
 1768              	.L179:
2425:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 1769              		.loc 1 2425 2 is_stmt 1 view .LVU623
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1770              		.loc 1 2426 11 is_stmt 0 view .LVU624
 1771 01bc 1D4A     		ldr	r2, .L221+8
2425:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 1772              		.loc 1 2425 14 view .LVU625
 1773 01be 84F80052 		strb	r5, [r4, #512]
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1774              		.loc 1 2426 2 is_stmt 1 view .LVU626
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1775              		.loc 1 2426 11 is_stmt 0 view .LVU627
 1776 01c2 1388     		ldrh	r3, [r2]
 1777 01c4 0133     		adds	r3, r3, #1
 1778 01c6 9BB2     		uxth	r3, r3
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1779              		.loc 1 2426 9 view .LVU628
 1780 01c8 A4F80632 		strh	r3, [r4, #518]	@ movhi
2431:source\fatfs/ff.c **** #endif
 1781              		.loc 1 2431 2 is_stmt 1 view .LVU629
 1782 01cc 2046     		mov	r0, r4
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1783              		.loc 1 2426 9 is_stmt 0 view .LVU630
 1784 01ce 1380     		strh	r3, [r2]	@ movhi
2434:source\fatfs/ff.c **** }
 1785              		.loc 1 2434 9 view .LVU631
 1786 01d0 0025     		movs	r5, #0
2431:source\fatfs/ff.c **** #endif
 1787              		.loc 1 2431 2 view .LVU632
 1788 01d2 FFF7FEFF 		bl	clear_lock
 1789              	.LVL179:
2434:source\fatfs/ff.c **** }
 1790              		.loc 1 2434 2 is_stmt 1 view .LVU633
2434:source\fatfs/ff.c **** }
 1791              		.loc 1 2434 9 is_stmt 0 view .LVU634
 1792 01d6 34E7     		b	.L199
 1793              	.LVL180:
 1794              	.L185:
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1795              		.loc 1 2338 8 view .LVU635
 1796 01d8 0220     		movs	r0, #2
 1797              	.L167:
2339:source\fatfs/ff.c **** 	}
 1798              		.loc 1 2339 31 discriminator 1 view .LVU636
 1799 01da 0137     		adds	r7, r7, #1
 1800              	.LVL181:
2339:source\fatfs/ff.c **** 	}
 1801              		.loc 1 2339 31 discriminator 1 view .LVU637
 1802 01dc 042F     		cmp	r7, #4
 1803 01de 7FF459AF 		bne	.L169
 1804              	.LVL182:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1805              		.loc 1 2341 2 is_stmt 1 view .LVU638
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1806              		.loc 1 2341 5 is_stmt 0 view .LVU639
 1807 01e2 0328     		cmp	r0, #3
 1808 01e4 03D1     		bne	.L171
 1809 01e6 2CE7     		b	.L199
 1810              	.LVL183:
 1811              	.L164:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1812              		.loc 1 2341 2 is_stmt 1 view .LVU640
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1813              		.loc 1 2341 5 is_stmt 0 view .LVU641
 1814 01e8 0328     		cmp	r0, #3
 1815 01ea 1DD0     		beq	.L186
2342:source\fatfs/ff.c **** 
 1816              		.loc 1 2342 2 is_stmt 1 view .LVU642
2342:source\fatfs/ff.c **** 
 1817              		.loc 1 2342 5 is_stmt 0 view .LVU643
 1818 01ec 08B1     		cbz	r0, .L187
 1819              	.LVL184:
 1820              	.L171:
2342:source\fatfs/ff.c **** 
 1821              		.loc 1 2342 18 view .LVU644
 1822 01ee 0D25     		movs	r5, #13
 1823 01f0 27E7     		b	.L199
 1824              	.LVL185:
 1825              	.L187:
2327:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 1826              		.loc 1 2327 8 view .LVU645
 1827 01f2 0646     		mov	r6, r0
 1828              	.LVL186:
2327:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 1829              		.loc 1 2327 8 view .LVU646
 1830 01f4 5AE7     		b	.L168
 1831              	.LVL187:
 1832              	.L188:
2377:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1833              		.loc 1 2377 6 view .LVU647
 1834 01f6 0125     		movs	r5, #1
 1835 01f8 97E7     		b	.L174
 1836              	.LVL188:
 1837              	.L175:
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1838              		.loc 1 2391 3 is_stmt 1 view .LVU648
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1839              		.loc 1 2391 6 is_stmt 0 view .LVU649
 1840 01fa BCF1000F 		cmp	ip, #0
 1841 01fe F6D0     		beq	.L171
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1842              		.loc 1 2392 3 is_stmt 1 view .LVU650
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1843              		.loc 1 2392 29 is_stmt 0 view .LVU651
 1844 0200 3A44     		add	r2, r2, r7
2394:source\fatfs/ff.c **** 	}
 1845              		.loc 1 2394 21 view .LVU652
 1846 0202 022D     		cmp	r5, #2
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1847              		.loc 1 2392 15 view .LVU653
 1848 0204 C4F82422 		str	r2, [r4, #548]
2393:source\fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1849              		.loc 1 2393 3 is_stmt 1 view .LVU654
 1850 0208 4FEA4302 		lsl	r2, r3, #1
2394:source\fatfs/ff.c **** 	}
 1851              		.loc 1 2394 36 is_stmt 0 view .LVU655
 1852 020c 1BBF     		ittet	ne
 1853 020e D218     		addne	r2, r2, r3
2394:source\fatfs/ff.c **** 	}
 1854              		.loc 1 2394 60 view .LVU656
 1855 0210 03F00103 		andne	r3, r3, #1
2394:source\fatfs/ff.c **** 	}
 1856              		.loc 1 2394 21 view .LVU657
 1857 0214 1346     		moveq	r3, r2
 1858 0216 03EB5203 		addne	r3, r3, r2, lsr #1
 1859 021a 9BE7     		b	.L176
 1860              	.LVL189:
 1861              	.L181:
2294:source\fatfs/ff.c **** 
 1862              		.loc 1 2294 22 view .LVU658
 1863 021c 0B25     		movs	r5, #11
 1864 021e 10E7     		b	.L199
 1865              	.LVL190:
 1866              	.L182:
2298:source\fatfs/ff.c **** 
 1867              		.loc 1 2298 18 view .LVU659
 1868 0220 0C25     		movs	r5, #12
 1869 0222 0EE7     		b	.L199
 1870              	.LVL191:
 1871              	.L183:
2319:source\fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1872              		.loc 1 2319 10 view .LVU660
 1873 0224 0325     		movs	r5, #3
 1874 0226 0CE7     		b	.L199
 1875              	.LVL192:
 1876              	.L186:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1877              		.loc 1 2341 23 view .LVU661
 1878 0228 0125     		movs	r5, #1
 1879 022a 0AE7     		b	.L199
 1880              	.L222:
 1881              		.align	2
 1882              	.L221:
 1883 022c 00000000 		.word	.LANCHOR1
 1884 0230 52526141 		.word	1096897106
 1885 0234 00000000 		.word	.LANCHOR2
 1886              		.cfi_endproc
 1887              	.LFE167:
 1889              		.section	.text.sync_fs,"ax",%progbits
 1890              		.align	1
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1895              	sync_fs:
 1896              	.LVL193:
 1897              	.LFB141:
 836:source\fatfs/ff.c **** 	FRESULT res;
 1898              		.loc 1 836 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 837:source\fatfs/ff.c **** 
 1902              		.loc 1 837 2 view .LVU663
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1903              		.loc 1 840 2 view .LVU664
 836:source\fatfs/ff.c **** 	FRESULT res;
 1904              		.loc 1 836 1 is_stmt 0 view .LVU665
 1905 0000 38B5     		push	{r3, r4, r5, lr}
 1906              		.cfi_def_cfa_offset 16
 1907              		.cfi_offset 3, -16
 1908              		.cfi_offset 4, -12
 1909              		.cfi_offset 5, -8
 1910              		.cfi_offset 14, -4
 836:source\fatfs/ff.c **** 	FRESULT res;
 1911              		.loc 1 836 1 view .LVU666
 1912 0002 0446     		mov	r4, r0
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1913              		.loc 1 840 8 view .LVU667
 1914 0004 FFF7FEFF 		bl	sync_window
 1915              	.LVL194:
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1916              		.loc 1 840 8 view .LVU668
 1917 0008 0546     		mov	r5, r0
 1918              	.LVL195:
 841:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 1919              		.loc 1 841 2 is_stmt 1 view .LVU669
 841:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 1920              		.loc 1 841 5 is_stmt 0 view .LVU670
 1921 000a B8BB     		cbnz	r0, .L224
 1922              	.LVL196:
 1923              	.LBB14:
 1924              	.LBI14:
 833:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 1925              		.loc 1 833 9 is_stmt 1 view .LVU671
 1926              	.LBB15:
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 1927              		.loc 1 843 3 view .LVU672
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 1928              		.loc 1 843 6 is_stmt 0 view .LVU673
 1929 000c 94F80032 		ldrb	r3, [r4, #512]	@ zero_extendqisi2
 1930 0010 032B     		cmp	r3, #3
 1931 0012 2AD1     		bne	.L225
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 1932              		.loc 1 843 31 view .LVU674
 1933 0014 94F80532 		ldrb	r3, [r4, #517]	@ zero_extendqisi2
 1934 0018 012B     		cmp	r3, #1
 1935 001a 26D1     		bne	.L225
 845:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 1936              		.loc 1 845 4 is_stmt 1 view .LVU675
 1937 001c 0146     		mov	r1, r0
 1938 001e 4FF40072 		mov	r2, #512
 1939 0022 2046     		mov	r0, r4
 1940              	.LVL197:
 845:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 1941              		.loc 1 845 4 is_stmt 0 view .LVU676
 1942 0024 FFF7FEFF 		bl	mem_set
 1943              	.LVL198:
 846:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 1944              		.loc 1 846 4 is_stmt 1 view .LVU677
 846:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 1945              		.loc 1 846 4 view .LVU678
 1946 0028 4AF65522 		movw	r2, #43605
 1947 002c A4F8FE21 		strh	r2, [r4, #510]	@ movhi
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 1948              		.loc 1 847 4 view .LVU679
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 1949              		.loc 1 847 4 view .LVU680
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 1950              		.loc 1 847 4 view .LVU681
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 1951              		.loc 1 847 4 view .LVU682
 1952 0030 134A     		ldr	r2, .L226
 1953 0032 2260     		str	r2, [r4]
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 1954              		.loc 1 848 4 view .LVU683
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 1955              		.loc 1 848 4 view .LVU684
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 1956              		.loc 1 848 4 view .LVU685
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 1957              		.loc 1 848 4 view .LVU686
 1958 0034 02F1FF52 		add	r2, r2, #534773760
 1959 0038 02F50052 		add	r2, r2, #8192
 1960 003c 2032     		adds	r2, r2, #32
 1961 003e C4F8E421 		str	r2, [r4, #484]
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 1962              		.loc 1 849 4 view .LVU687
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 1963              		.loc 1 849 4 view .LVU688
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 1964              		.loc 1 849 4 view .LVU689
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 1965              		.loc 1 849 4 view .LVU690
 1966 0042 D4F81022 		ldr	r2, [r4, #528]
 1967 0046 C4F8E821 		str	r2, [r4, #488]
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 1968              		.loc 1 850 4 view .LVU691
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 1969              		.loc 1 850 4 view .LVU692
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 1970              		.loc 1 850 4 view .LVU693
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 1971              		.loc 1 850 4 view .LVU694
 1972 004a D4F80C22 		ldr	r2, [r4, #524]
 1973 004e C4F8EC21 		str	r2, [r4, #492]
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 1974              		.loc 1 852 4 view .LVU695
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 1975              		.loc 1 852 30 is_stmt 0 view .LVU696
 1976 0052 D4F81C22 		ldr	r2, [r4, #540]
 853:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 1977              		.loc 1 853 4 view .LVU697
 1978 0056 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 1979              		.loc 1 852 30 view .LVU698
 1980 005a 0132     		adds	r2, r2, #1
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 1981              		.loc 1 852 16 view .LVU699
 1982 005c C4F82C22 		str	r2, [r4, #556]
 853:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 1983              		.loc 1 853 4 is_stmt 1 view .LVU700
 1984 0060 2146     		mov	r1, r4
 1985 0062 FFF7FEFF 		bl	disk_write
 1986              	.LVL199:
 854:source\fatfs/ff.c **** 		}
 1987              		.loc 1 854 4 view .LVU701
 854:source\fatfs/ff.c **** 		}
 1988              		.loc 1 854 17 is_stmt 0 view .LVU702
 1989 0066 84F80552 		strb	r5, [r4, #517]
 1990              	.L225:
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1991              		.loc 1 857 3 is_stmt 1 view .LVU703
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 1992              		.loc 1 857 7 is_stmt 0 view .LVU704
 1993 006a 0022     		movs	r2, #0
 1994 006c 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 1995 0070 1146     		mov	r1, r2
 1996 0072 FFF7FEFF 		bl	disk_ioctl
 1997              	.LVL200:
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1998              		.loc 1 840 8 view .LVU705
 1999 0076 0038     		subs	r0, r0, #0
 2000 0078 18BF     		it	ne
 2001 007a 0120     		movne	r0, #1
 2002              	.LVL201:
 2003              	.L224:
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 2004              		.loc 1 840 8 view .LVU706
 2005              	.LBE15:
 2006              	.LBE14:
 861:source\fatfs/ff.c **** }
 2007              		.loc 1 861 2 is_stmt 1 view .LVU707
 862:source\fatfs/ff.c **** #endif
 2008              		.loc 1 862 1 is_stmt 0 view .LVU708
 2009 007c 38BD     		pop	{r3, r4, r5, pc}
 2010              	.LVL202:
 2011              	.L227:
 862:source\fatfs/ff.c **** #endif
 2012              		.loc 1 862 1 view .LVU709
 2013 007e 00BF     		.align	2
 2014              	.L226:
 2015 0080 52526141 		.word	1096897106
 2016              		.cfi_endproc
 2017              	.LFE141:
 2019              		.section	.text.ld_clust.isra.0,"ax",%progbits
 2020              		.align	1
 2021              		.syntax unified
 2022              		.thumb
 2023              		.thumb_func
 2025              	ld_clust.isra.0:
 2026              	.LVL203:
 2027              	.LFB204:
1308:source\fatfs/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
 2028              		.loc 1 1308 7 is_stmt 1 view -0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 2032              		@ link register save eliminated.
1313:source\fatfs/ff.c **** 
 2033              		.loc 1 1313 2 view .LVU711
1315:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2034              		.loc 1 1315 2 view .LVU712
1316:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 2035              		.loc 1 1316 5 is_stmt 0 view .LVU713
 2036 0000 0328     		cmp	r0, #3
1315:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2037              		.loc 1 1315 5 view .LVU714
 2038 0002 4B8B     		ldrh	r3, [r1, #26]	@ unaligned
 2039              	.LVL204:
1316:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 2040              		.loc 1 1316 2 is_stmt 1 view .LVU715
1317:source\fatfs/ff.c **** 
 2041              		.loc 1 1317 3 view .LVU716
1317:source\fatfs/ff.c **** 
 2042              		.loc 1 1317 9 is_stmt 0 view .LVU717
 2043 0004 04BF     		itt	eq
 2044 0006 8A8A     		ldrheq	r2, [r1, #20]	@ unaligned
1317:source\fatfs/ff.c **** 
 2045              		.loc 1 1317 6 view .LVU718
 2046 0008 43EA0243 		orreq	r3, r3, r2, lsl #16
 2047              	.LVL205:
1319:source\fatfs/ff.c **** }
 2048              		.loc 1 1319 2 is_stmt 1 view .LVU719
1320:source\fatfs/ff.c **** 
 2049              		.loc 1 1320 1 is_stmt 0 view .LVU720
 2050 000c 1846     		mov	r0, r3
 2051 000e 7047     		bx	lr
 2052              		.cfi_endproc
 2053              	.LFE204:
 2055              		.section	.text.clust2sect,"ax",%progbits
 2056              		.align	1
 2057              		.global	clust2sect
 2058              		.syntax unified
 2059              		.thumb
 2060              		.thumb_func
 2062              	clust2sect:
 2063              	.LVL206:
 2064              	.LFB142:
 877:source\fatfs/ff.c **** 	clst -= 2;
 2065              		.loc 1 877 1 is_stmt 1 view -0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069              		@ link register save eliminated.
 878:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 2070              		.loc 1 878 2 view .LVU722
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2071              		.loc 1 879 27 is_stmt 0 view .LVU723
 2072 0000 D0F81432 		ldr	r3, [r0, #532]
 878:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 2073              		.loc 1 878 7 view .LVU724
 2074 0004 0239     		subs	r1, r1, #2
 2075              	.LVL207:
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2076              		.loc 1 879 2 is_stmt 1 view .LVU725
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2077              		.loc 1 879 27 is_stmt 0 view .LVU726
 2078 0006 023B     		subs	r3, r3, #2
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2079              		.loc 1 879 5 view .LVU727
 2080 0008 8B42     		cmp	r3, r1
 880:source\fatfs/ff.c **** }
 2081              		.loc 1 880 2 is_stmt 1 view .LVU728
 880:source\fatfs/ff.c **** }
 2082              		.loc 1 880 18 is_stmt 0 view .LVU729
 2083 000a 83BF     		ittte	hi
 2084 000c 90F80232 		ldrbhi	r3, [r0, #514]	@ zero_extendqisi2
 880:source\fatfs/ff.c **** }
 2085              		.loc 1 880 26 view .LVU730
 2086 0010 D0F82802 		ldrhi	r0, [r0, #552]
 2087              	.LVL208:
 880:source\fatfs/ff.c **** }
 2088              		.loc 1 880 26 view .LVU731
 2089 0014 01FB0300 		mlahi	r0, r1, r3, r0
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2090              		.loc 1 879 39 view .LVU732
 2091 0018 0020     		movls	r0, #0
 881:source\fatfs/ff.c **** 
 2092              		.loc 1 881 1 view .LVU733
 2093 001a 7047     		bx	lr
 2094              		.cfi_endproc
 2095              	.LFE142:
 2097              		.section	.text.get_fat,"ax",%progbits
 2098              		.align	1
 2099              		.global	get_fat
 2100              		.syntax unified
 2101              		.thumb
 2102              		.thumb_func
 2104              	get_fat:
 2105              	.LVL209:
 2106              	.LFB143:
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2107              		.loc 1 895 1 is_stmt 1 view -0
 2108              		.cfi_startproc
 2109              		@ args = 0, pretend = 0, frame = 0
 2110              		@ frame_needed = 0, uses_anonymous_args = 0
 896:source\fatfs/ff.c **** 	BYTE *p;
 2111              		.loc 1 896 2 view .LVU735
 897:source\fatfs/ff.c **** 	DWORD val;
 2112              		.loc 1 897 2 view .LVU736
 898:source\fatfs/ff.c **** 
 2113              		.loc 1 898 2 view .LVU737
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2114              		.loc 1 901 2 view .LVU738
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2115              		.loc 1 901 5 is_stmt 0 view .LVU739
 2116 0000 0129     		cmp	r1, #1
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2117              		.loc 1 895 1 view .LVU740
 2118 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2119              		.cfi_def_cfa_offset 24
 2120              		.cfi_offset 3, -24
 2121              		.cfi_offset 4, -20
 2122              		.cfi_offset 5, -16
 2123              		.cfi_offset 6, -12
 2124              		.cfi_offset 7, -8
 2125              		.cfi_offset 14, -4
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2126              		.loc 1 895 1 view .LVU741
 2127 0004 0646     		mov	r6, r0
 2128 0006 0D46     		mov	r5, r1
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2129              		.loc 1 901 5 view .LVU742
 2130 0008 59D9     		bls	.L242
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2131              		.loc 1 901 15 discriminator 1 view .LVU743
 2132 000a D0F81432 		ldr	r3, [r0, #532]
 2133 000e 8B42     		cmp	r3, r1
 2134 0010 55D9     		bls	.L242
 2135              	.LVL210:
 2136              	.LBB18:
 2137              	.LBI18:
 891:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 2138              		.loc 1 891 7 is_stmt 1 view .LVU744
 2139              	.LBB19:
 905:source\fatfs/ff.c **** 
 2140              		.loc 1 905 3 view .LVU745
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2141              		.loc 1 907 3 view .LVU746
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2142              		.loc 1 907 13 is_stmt 0 view .LVU747
 2143 0012 90F80032 		ldrb	r3, [r0, #512]	@ zero_extendqisi2
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2144              		.loc 1 907 3 view .LVU748
 2145 0016 022B     		cmp	r3, #2
 2146 0018 27D0     		beq	.L235
 2147 001a 032B     		cmp	r3, #3
 2148 001c 36D0     		beq	.L236
 2149 001e 012B     		cmp	r3, #1
 2150 0020 4DD1     		bne	.L242
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2151              		.loc 1 909 4 is_stmt 1 view .LVU749
 2152              	.LVL211:
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2153              		.loc 1 909 21 view .LVU750
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2154              		.loc 1 909 24 is_stmt 0 view .LVU751
 2155 0022 01EB5104 		add	r4, r1, r1, lsr #1
 2156              	.LVL212:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2157              		.loc 1 910 4 is_stmt 1 view .LVU752
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2158              		.loc 1 910 8 is_stmt 0 view .LVU753
 2159 0026 D0F82012 		ldr	r1, [r0, #544]
 2160              	.LVL213:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2161              		.loc 1 910 8 view .LVU754
 2162 002a 01EB5421 		add	r1, r1, r4, lsr #9
 2163 002e FFF7FEFF 		bl	move_window
 2164              	.LVL214:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2165              		.loc 1 910 7 view .LVU755
 2166 0032 10B1     		cbz	r0, .L237
 2167              	.LVL215:
 2168              	.L238:
 905:source\fatfs/ff.c **** 
 2169              		.loc 1 905 7 view .LVU756
 2170 0034 4FF0FF30 		mov	r0, #-1
 2171              	.LVL216:
 2172              	.L233:
 905:source\fatfs/ff.c **** 
 2173              		.loc 1 905 7 view .LVU757
 2174              	.LBE19:
 2175              	.LBE18:
 935:source\fatfs/ff.c **** 
 2176              		.loc 1 935 1 view .LVU758
 2177 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2178              	.LVL217:
 2179              	.L237:
 2180              	.LBB21:
 2181              	.LBB20:
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2182              		.loc 1 911 4 is_stmt 1 view .LVU759
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2183              		.loc 1 912 8 is_stmt 0 view .LVU760
 2184 003a D6F82012 		ldr	r1, [r6, #544]
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2185              		.loc 1 911 22 view .LVU761
 2186 003e 671C     		adds	r7, r4, #1
 2187              	.LVL218:
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2188              		.loc 1 911 25 view .LVU762
 2189 0040 C4F30804 		ubfx	r4, r4, #0, #9
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2190              		.loc 1 912 8 view .LVU763
 2191 0044 01EB5721 		add	r1, r1, r7, lsr #9
 2192 0048 3046     		mov	r0, r6
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2193              		.loc 1 911 19 view .LVU764
 2194 004a 345D     		ldrb	r4, [r6, r4]	@ zero_extendqisi2
 2195              	.LVL219:
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2196              		.loc 1 912 4 is_stmt 1 view .LVU765
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2197              		.loc 1 912 8 is_stmt 0 view .LVU766
 2198 004c FFF7FEFF 		bl	move_window
 2199              	.LVL220:
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2200              		.loc 1 912 7 view .LVU767
 2201 0050 0028     		cmp	r0, #0
 2202 0052 EFD1     		bne	.L238
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2203              		.loc 1 913 4 is_stmt 1 view .LVU768
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2204              		.loc 1 913 24 is_stmt 0 view .LVU769
 2205 0054 C7F30807 		ubfx	r7, r7, #0, #9
 2206              	.LVL221:
 914:source\fatfs/ff.c **** 			break;
 2207              		.loc 1 914 29 view .LVU770
 2208 0058 EB07     		lsls	r3, r5, #31
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2209              		.loc 1 913 20 view .LVU771
 2210 005a F05D     		ldrb	r0, [r6, r7]	@ zero_extendqisi2
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2211              		.loc 1 913 7 view .LVU772
 2212 005c 44EA0020 		orr	r0, r4, r0, lsl #8
 2213              	.LVL222:
 914:source\fatfs/ff.c **** 			break;
 2214              		.loc 1 914 4 is_stmt 1 view .LVU773
 914:source\fatfs/ff.c **** 			break;
 2215              		.loc 1 914 29 is_stmt 0 view .LVU774
 2216 0060 4CBF     		ite	mi
 2217 0062 0009     		lsrmi	r0, r0, #4
 2218              	.LVL223:
 914:source\fatfs/ff.c **** 			break;
 2219              		.loc 1 914 29 view .LVU775
 2220 0064 C0F30B00 		ubfxpl	r0, r0, #0, #12
 2221 0068 E6E7     		b	.L233
 2222              	.LVL224:
 2223              	.L235:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2224              		.loc 1 918 4 is_stmt 1 view .LVU776
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2225              		.loc 1 918 8 is_stmt 0 view .LVU777
 2226 006a D0F82012 		ldr	r1, [r0, #544]
 2227              	.LVL225:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2228              		.loc 1 918 8 view .LVU778
 2229 006e 01EB1521 		add	r1, r1, r5, lsr #8
 2230 0072 FFF7FEFF 		bl	move_window
 2231              	.LVL226:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2232              		.loc 1 918 7 view .LVU779
 2233 0076 0028     		cmp	r0, #0
 2234 0078 DCD1     		bne	.L238
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2235              		.loc 1 919 4 is_stmt 1 view .LVU780
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2236              		.loc 1 919 25 is_stmt 0 view .LVU781
 2237 007a 6D00     		lsls	r5, r5, #1
 2238              	.LVL227:
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2239              		.loc 1 919 29 view .LVU782
 2240 007c 05F4FF75 		and	r5, r5, #510
 2241              	.LVL228:
 920:source\fatfs/ff.c **** 			break;
 2242              		.loc 1 920 4 is_stmt 1 view .LVU783
 920:source\fatfs/ff.c **** 			break;
 2243              		.loc 1 920 10 is_stmt 0 view .LVU784
 2244 0080 7319     		adds	r3, r6, r5
 2245              	.LVL229:
 920:source\fatfs/ff.c **** 			break;
 2246              		.loc 1 920 10 view .LVU785
 2247 0082 705D     		ldrb	r0, [r6, r5]	@ zero_extendqisi2
 2248 0084 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2249              	.LVL230:
 920:source\fatfs/ff.c **** 			break;
 2250              		.loc 1 920 8 view .LVU786
 2251 0086 40EA0320 		orr	r0, r0, r3, lsl #8
 2252              	.LVL231:
 921:source\fatfs/ff.c **** 
 2253              		.loc 1 921 4 is_stmt 1 view .LVU787
 2254 008a D5E7     		b	.L233
 2255              	.LVL232:
 2256              	.L236:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2257              		.loc 1 924 4 view .LVU788
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2258              		.loc 1 924 8 is_stmt 0 view .LVU789
 2259 008c D0F82012 		ldr	r1, [r0, #544]
 2260              	.LVL233:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2261              		.loc 1 924 8 view .LVU790
 2262 0090 01EBD511 		add	r1, r1, r5, lsr #7
 2263 0094 FFF7FEFF 		bl	move_window
 2264              	.LVL234:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2265              		.loc 1 924 7 view .LVU791
 2266 0098 0028     		cmp	r0, #0
 2267 009a CBD1     		bne	.L238
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2268              		.loc 1 925 4 is_stmt 1 view .LVU792
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2269              		.loc 1 925 25 is_stmt 0 view .LVU793
 2270 009c AD00     		lsls	r5, r5, #2
 2271              	.LVL235:
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2272              		.loc 1 925 29 view .LVU794
 2273 009e 05F4FE75 		and	r5, r5, #508
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2274              		.loc 1 925 6 view .LVU795
 2275 00a2 7219     		adds	r2, r6, r5
 2276              	.LVL236:
 926:source\fatfs/ff.c **** 			break;
 2277              		.loc 1 926 4 is_stmt 1 view .LVU796
 926:source\fatfs/ff.c **** 			break;
 2278              		.loc 1 926 10 is_stmt 0 view .LVU797
 2279 00a4 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 2280 00a6 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 2281 00a8 1B04     		lsls	r3, r3, #16
 2282 00aa 43EA0063 		orr	r3, r3, r0, lsl #24
 2283 00ae 705D     		ldrb	r0, [r6, r5]	@ zero_extendqisi2
 2284 00b0 1843     		orrs	r0, r0, r3
 2285 00b2 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2286 00b4 40EA0320 		orr	r0, r0, r3, lsl #8
 926:source\fatfs/ff.c **** 			break;
 2287              		.loc 1 926 8 view .LVU798
 2288 00b8 20F07040 		bic	r0, r0, #-268435456
 2289              	.LVL237:
 927:source\fatfs/ff.c **** 
 2290              		.loc 1 927 4 is_stmt 1 view .LVU799
 2291 00bc BCE7     		b	.L233
 2292              	.LVL238:
 2293              	.L242:
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2294              		.loc 1 907 3 is_stmt 0 view .LVU800
 2295 00be 0120     		movs	r0, #1
 2296              	.LVL239:
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2297              		.loc 1 907 3 view .LVU801
 2298              	.LBE20:
 2299              	.LBE21:
 934:source\fatfs/ff.c **** }
 2300              		.loc 1 934 2 is_stmt 1 view .LVU802
 934:source\fatfs/ff.c **** }
 2301              		.loc 1 934 9 is_stmt 0 view .LVU803
 2302 00c0 BAE7     		b	.L233
 2303              		.cfi_endproc
 2304              	.LFE143:
 2306              		.section	.text.dir_sdi,"ax",%progbits
 2307              		.align	1
 2308              		.syntax unified
 2309              		.thumb
 2310              		.thumb_func
 2312              	dir_sdi:
 2313              	.LVL240:
 2314              	.LFB148:
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2315              		.loc 1 1157 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
1158:source\fatfs/ff.c **** 	UINT ic;
 2319              		.loc 1 1158 2 view .LVU805
1159:source\fatfs/ff.c **** 
 2320              		.loc 1 1159 2 view .LVU806
1162:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
 2321              		.loc 1 1162 2 view .LVU807
1163:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 2322              		.loc 1 1163 7 is_stmt 0 view .LVU808
 2323 0000 D0F80822 		ldr	r2, [r0, #520]
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2324              		.loc 1 1164 5 view .LVU809
 2325 0004 012A     		cmp	r2, #1
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2326              		.loc 1 1157 1 view .LVU810
 2327 0006 70B5     		push	{r4, r5, r6, lr}
 2328              		.cfi_def_cfa_offset 16
 2329              		.cfi_offset 4, -16
 2330              		.cfi_offset 5, -12
 2331              		.cfi_offset 6, -8
 2332              		.cfi_offset 14, -4
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2333              		.loc 1 1157 1 view .LVU811
 2334 0008 0446     		mov	r4, r0
 2335 000a 0D46     		mov	r5, r1
1162:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
 2336              		.loc 1 1162 14 view .LVU812
 2337 000c A0F80612 		strh	r1, [r0, #518]	@ movhi
1163:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 2338              		.loc 1 1163 2 is_stmt 1 view .LVU813
 2339              	.LVL241:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2340              		.loc 1 1164 2 view .LVU814
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2341              		.loc 1 1164 5 is_stmt 0 view .LVU815
 2342 0010 01D1     		bne	.L244
 2343              	.LVL242:
 2344              	.L246:
1165:source\fatfs/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2345              		.loc 1 1165 10 view .LVU816
 2346 0012 0220     		movs	r0, #2
 2347              	.LVL243:
 2348              	.L245:
1191:source\fatfs/ff.c **** 
 2349              		.loc 1 1191 1 view .LVU817
 2350 0014 70BD     		pop	{r4, r5, r6, pc}
 2351              	.LVL244:
 2352              	.L244:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2353              		.loc 1 1164 29 discriminator 1 view .LVU818
 2354 0016 D0F80032 		ldr	r3, [r0, #512]
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2355              		.loc 1 1164 16 discriminator 1 view .LVU819
 2356 001a D3F81412 		ldr	r1, [r3, #532]
 2357              	.LVL245:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2358              		.loc 1 1164 16 discriminator 1 view .LVU820
 2359 001e 9142     		cmp	r1, r2
 2360 0020 F7D9     		bls	.L246
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2361              		.loc 1 1166 2 is_stmt 1 view .LVU821
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2362              		.loc 1 1166 5 is_stmt 0 view .LVU822
 2363 0022 FAB9     		cbnz	r2, .L247
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2364              		.loc 1 1166 12 discriminator 1 view .LVU823
 2365 0024 93F80012 		ldrb	r1, [r3, #512]	@ zero_extendqisi2
 2366 0028 0329     		cmp	r1, #3
 2367 002a 02D1     		bne	.L248
1167:source\fatfs/ff.c **** 
 2368              		.loc 1 1167 3 is_stmt 1 view .LVU824
1167:source\fatfs/ff.c **** 
 2369              		.loc 1 1167 8 is_stmt 0 view .LVU825
 2370 002c D3F82412 		ldr	r1, [r3, #548]
 2371              	.LVL246:
1169:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 2372              		.loc 1 1169 2 is_stmt 1 view .LVU826
1169:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 2373              		.loc 1 1169 5 is_stmt 0 view .LVU827
 2374 0030 B9B9     		cbnz	r1, .L252
 2375              	.LVL247:
 2376              	.L248:
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2377              		.loc 1 1170 3 is_stmt 1 view .LVU828
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2378              		.loc 1 1170 20 is_stmt 0 view .LVU829
 2379 0032 B3F80812 		ldrh	r1, [r3, #520]
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2380              		.loc 1 1170 6 view .LVU830
 2381 0036 A942     		cmp	r1, r5
 2382 0038 EBD9     		bls	.L246
1172:source\fatfs/ff.c **** 	}
 2383              		.loc 1 1172 3 is_stmt 1 view .LVU831
1172:source\fatfs/ff.c **** 	}
 2384              		.loc 1 1172 8 is_stmt 0 view .LVU832
 2385 003a D3F82402 		ldr	r0, [r3, #548]
 2386              	.LVL248:
 2387              	.L249:
1185:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
 2388              		.loc 1 1185 2 is_stmt 1 view .LVU833
1185:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
 2389              		.loc 1 1185 12 is_stmt 0 view .LVU834
 2390 003e C4F80C22 		str	r2, [r4, #524]
1186:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 2391              		.loc 1 1186 2 is_stmt 1 view .LVU835
1186:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 2392              		.loc 1 1186 5 is_stmt 0 view .LVU836
 2393 0042 0028     		cmp	r0, #0
 2394 0044 E5D0     		beq	.L246
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2395              		.loc 1 1187 2 is_stmt 1 view .LVU837
1188:source\fatfs/ff.c **** 
 2396              		.loc 1 1188 27 is_stmt 0 view .LVU838
 2397 0046 D4F80012 		ldr	r1, [r4, #512]
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2398              		.loc 1 1187 18 view .LVU839
 2399 004a 00EB1510 		add	r0, r0, r5, lsr #4
 2400              	.LVL249:
1188:source\fatfs/ff.c **** 
 2401              		.loc 1 1188 34 view .LVU840
 2402 004e 05F00F05 		and	r5, r5, #15
 2403              	.LVL250:
1188:source\fatfs/ff.c **** 
 2404              		.loc 1 1188 27 view .LVU841
 2405 0052 01EB4515 		add	r5, r1, r5, lsl #5
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2406              		.loc 1 1187 11 view .LVU842
 2407 0056 C4F81002 		str	r0, [r4, #528]
1188:source\fatfs/ff.c **** 
 2408              		.loc 1 1188 2 is_stmt 1 view .LVU843
1188:source\fatfs/ff.c **** 
 2409              		.loc 1 1188 10 is_stmt 0 view .LVU844
 2410 005a C4F81452 		str	r5, [r4, #532]
1190:source\fatfs/ff.c **** }
 2411              		.loc 1 1190 2 is_stmt 1 view .LVU845
1190:source\fatfs/ff.c **** }
 2412              		.loc 1 1190 9 is_stmt 0 view .LVU846
 2413 005e 0020     		movs	r0, #0
 2414 0060 D8E7     		b	.L245
 2415              	.LVL251:
 2416              	.L252:
1190:source\fatfs/ff.c **** }
 2417              		.loc 1 1190 9 view .LVU847
 2418 0062 0A46     		mov	r2, r1
 2419              	.LVL252:
 2420              	.L247:
1175:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2421              		.loc 1 1175 3 is_stmt 1 view .LVU848
1175:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2422              		.loc 1 1175 6 is_stmt 0 view .LVU849
 2423 0064 93F80262 		ldrb	r6, [r3, #514]	@ zero_extendqisi2
 2424 0068 3601     		lsls	r6, r6, #4
 2425              	.LVL253:
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2426              		.loc 1 1176 3 is_stmt 1 view .LVU850
 2427              	.L250:
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2428              		.loc 1 1176 9 view .LVU851
 2429 006a B542     		cmp	r5, r6
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2430              		.loc 1 1177 11 is_stmt 0 view .LVU852
 2431 006c D4F80002 		ldr	r0, [r4, #512]
 2432 0070 1146     		mov	r1, r2
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2433              		.loc 1 1176 9 view .LVU853
 2434 0072 02D2     		bcs	.L251
 2435              	.LVL254:
1183:source\fatfs/ff.c **** 	}
 2436              		.loc 1 1183 3 is_stmt 1 view .LVU854
1183:source\fatfs/ff.c **** 	}
 2437              		.loc 1 1183 10 is_stmt 0 view .LVU855
 2438 0074 FFF7FEFF 		bl	clust2sect
 2439              	.LVL255:
1183:source\fatfs/ff.c **** 	}
 2440              		.loc 1 1183 10 view .LVU856
 2441 0078 E1E7     		b	.L249
 2442              	.LVL256:
 2443              	.L251:
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2444              		.loc 1 1177 4 is_stmt 1 view .LVU857
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2445              		.loc 1 1177 11 is_stmt 0 view .LVU858
 2446 007a FFF7FEFF 		bl	get_fat
 2447              	.LVL257:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2448              		.loc 1 1178 7 view .LVU859
 2449 007e 431C     		adds	r3, r0, #1
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2450              		.loc 1 1177 11 view .LVU860
 2451 0080 0246     		mov	r2, r0
 2452              	.LVL258:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2453              		.loc 1 1178 4 is_stmt 1 view .LVU861
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2454              		.loc 1 1178 7 is_stmt 0 view .LVU862
 2455 0082 09D0     		beq	.L253
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2456              		.loc 1 1179 4 is_stmt 1 view .LVU863
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2457              		.loc 1 1179 7 is_stmt 0 view .LVU864
 2458 0084 0128     		cmp	r0, #1
 2459 0086 C4D9     		bls	.L246
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2460              		.loc 1 1179 34 discriminator 1 view .LVU865
 2461 0088 D4F80032 		ldr	r3, [r4, #512]
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2462              		.loc 1 1179 17 discriminator 1 view .LVU866
 2463 008c D3F81432 		ldr	r3, [r3, #532]
 2464 0090 8342     		cmp	r3, r0
 2465 0092 BED9     		bls	.L246
1181:source\fatfs/ff.c **** 		}
 2466              		.loc 1 1181 4 is_stmt 1 view .LVU867
1181:source\fatfs/ff.c **** 		}
 2467              		.loc 1 1181 8 is_stmt 0 view .LVU868
 2468 0094 AD1B     		subs	r5, r5, r6
 2469              	.LVL259:
1181:source\fatfs/ff.c **** 		}
 2470              		.loc 1 1181 8 view .LVU869
 2471 0096 E8E7     		b	.L250
 2472              	.L253:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2473              		.loc 1 1178 35 view .LVU870
 2474 0098 0120     		movs	r0, #1
 2475              	.LVL260:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2476              		.loc 1 1178 35 view .LVU871
 2477 009a BBE7     		b	.L245
 2478              		.cfi_endproc
 2479              	.LFE148:
 2481              		.section	.text.put_fat,"ax",%progbits
 2482              		.align	1
 2483              		.global	put_fat
 2484              		.syntax unified
 2485              		.thumb
 2486              		.thumb_func
 2488              	put_fat:
 2489              	.LVL261:
 2490              	.LFB144:
 951:source\fatfs/ff.c **** 	UINT bc;
 2491              		.loc 1 951 1 is_stmt 1 view -0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 0
 2494              		@ frame_needed = 0, uses_anonymous_args = 0
 952:source\fatfs/ff.c **** 	BYTE *p;
 2495              		.loc 1 952 2 view .LVU873
 953:source\fatfs/ff.c **** 	FRESULT res;
 2496              		.loc 1 953 2 view .LVU874
 954:source\fatfs/ff.c **** 
 2497              		.loc 1 954 2 view .LVU875
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2498              		.loc 1 957 2 view .LVU876
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2499              		.loc 1 957 5 is_stmt 0 view .LVU877
 2500 0000 0129     		cmp	r1, #1
 951:source\fatfs/ff.c **** 	UINT bc;
 2501              		.loc 1 951 1 view .LVU878
 2502 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2503              		.cfi_def_cfa_offset 24
 2504              		.cfi_offset 4, -24
 2505              		.cfi_offset 5, -20
 2506              		.cfi_offset 6, -16
 2507              		.cfi_offset 7, -12
 2508              		.cfi_offset 8, -8
 2509              		.cfi_offset 14, -4
 951:source\fatfs/ff.c **** 	UINT bc;
 2510              		.loc 1 951 1 view .LVU879
 2511 0006 0546     		mov	r5, r0
 2512 0008 0C46     		mov	r4, r1
 2513 000a 1646     		mov	r6, r2
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2514              		.loc 1 957 5 view .LVU880
 2515 000c 70D9     		bls	.L267
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2516              		.loc 1 957 15 discriminator 1 view .LVU881
 2517 000e D0F81432 		ldr	r3, [r0, #532]
 2518 0012 8B42     		cmp	r3, r1
 2519 0014 6CD9     		bls	.L267
 2520              	.LVL262:
 2521              	.LBB24:
 2522              	.LBI24:
 946:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 2523              		.loc 1 946 9 is_stmt 1 view .LVU882
 2524              	.LBB25:
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2525              		.loc 1 961 3 view .LVU883
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2526              		.loc 1 961 13 is_stmt 0 view .LVU884
 2527 0016 90F80032 		ldrb	r3, [r0, #512]	@ zero_extendqisi2
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2528              		.loc 1 961 3 view .LVU885
 2529 001a 022B     		cmp	r3, #2
 2530 001c 3CD0     		beq	.L259
 2531 001e 032B     		cmp	r3, #3
 2532 0020 4BD0     		beq	.L260
 2533 0022 012B     		cmp	r3, #1
 2534 0024 64D1     		bne	.L267
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2535              		.loc 1 963 4 is_stmt 1 view .LVU886
 2536              	.LVL263:
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2537              		.loc 1 963 21 view .LVU887
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2538              		.loc 1 963 24 is_stmt 0 view .LVU888
 2539 0026 01EB5107 		add	r7, r1, r1, lsr #1
 2540              	.LVL264:
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2541              		.loc 1 964 4 is_stmt 1 view .LVU889
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2542              		.loc 1 964 10 is_stmt 0 view .LVU890
 2543 002a D0F82012 		ldr	r1, [r0, #544]
 2544              	.LVL265:
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2545              		.loc 1 964 10 view .LVU891
 2546 002e 01EB5721 		add	r1, r1, r7, lsr #9
 2547 0032 FFF7FEFF 		bl	move_window
 2548              	.LVL266:
 965:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 2549              		.loc 1 965 4 is_stmt 1 view .LVU892
 965:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 2550              		.loc 1 965 7 is_stmt 0 view .LVU893
 2551 0036 28BB     		cbnz	r0, .L258
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2552              		.loc 1 966 4 is_stmt 1 view .LVU894
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2553              		.loc 1 966 22 is_stmt 0 view .LVU895
 2554 0038 07F10108 		add	r8, r7, #1
 2555              	.LVL267:
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2556              		.loc 1 966 25 view .LVU896
 2557 003c C7F30807 		ubfx	r7, r7, #0, #9
 2558              	.LVL268:
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2559              		.loc 1 967 4 is_stmt 1 view .LVU897
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2560              		.loc 1 967 7 is_stmt 0 view .LVU898
 2561 0040 14F00104 		ands	r4, r4, #1
 2562              	.LVL269:
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2563              		.loc 1 967 27 view .LVU899
 2564 0044 1FBF     		itttt	ne
 2565 0046 EB5D     		ldrbne	r3, [r5, r7]	@ zero_extendqisi2
 2566 0048 03F00F02 		andne	r2, r3, #15
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2567              		.loc 1 967 48 view .LVU900
 2568 004c 3301     		lslne	r3, r6, #4
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2569              		.loc 1 967 35 view .LVU901
 2570 004e 03F0F003 		andne	r3, r3, #240
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2571              		.loc 1 967 7 view .LVU902
 2572 0052 14BF     		ite	ne
 2573 0054 1343     		orrne	r3, r3, r2
 2574 0056 F3B2     		uxtbeq	r3, r6
 2575 0058 EB55     		strb	r3, [r5, r7]
 968:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2576              		.loc 1 968 4 is_stmt 1 view .LVU903
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2577              		.loc 1 969 10 is_stmt 0 view .LVU904
 2578 005a D5F82012 		ldr	r1, [r5, #544]
 968:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2579              		.loc 1 968 14 view .LVU905
 2580 005e 0123     		movs	r3, #1
 2581 0060 85F80432 		strb	r3, [r5, #516]
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2582              		.loc 1 969 4 is_stmt 1 view .LVU906
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2583              		.loc 1 969 10 is_stmt 0 view .LVU907
 2584 0064 01EB5821 		add	r1, r1, r8, lsr #9
 2585 0068 2846     		mov	r0, r5
 2586              	.LVL270:
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2587              		.loc 1 969 10 view .LVU908
 2588 006a FFF7FEFF 		bl	move_window
 2589              	.LVL271:
 970:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 2590              		.loc 1 970 4 is_stmt 1 view .LVU909
 970:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 2591              		.loc 1 970 7 is_stmt 0 view .LVU910
 2592 006e 48B9     		cbnz	r0, .L258
 971:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2593              		.loc 1 971 4 is_stmt 1 view .LVU911
 971:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2594              		.loc 1 971 23 is_stmt 0 view .LVU912
 2595 0070 C8F30808 		ubfx	r8, r8, #0, #9
 2596              	.LVL272:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2597              		.loc 1 972 4 is_stmt 1 view .LVU913
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2598              		.loc 1 972 7 is_stmt 0 view .LVU914
 2599 0074 44B1     		cbz	r4, .L263
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2600              		.loc 1 972 7 view .LVU915
 2601 0076 C6F30712 		ubfx	r2, r6, #4, #8
 2602              	.LVL273:
 2603              	.L264:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2604              		.loc 1 972 7 view .LVU916
 2605 007a 05F80820 		strb	r2, [r5, r8]
 973:source\fatfs/ff.c **** 			break;
 2606              		.loc 1 973 4 is_stmt 1 view .LVU917
 2607              	.LVL274:
 2608              	.L268:
 990:source\fatfs/ff.c **** 			break;
 2609              		.loc 1 990 4 view .LVU918
 990:source\fatfs/ff.c **** 			break;
 2610              		.loc 1 990 14 is_stmt 0 view .LVU919
 2611 007e 0123     		movs	r3, #1
 2612 0080 85F80432 		strb	r3, [r5, #516]
 991:source\fatfs/ff.c **** 
 2613              		.loc 1 991 4 is_stmt 1 view .LVU920
 2614              	.LVL275:
 2615              	.L258:
 991:source\fatfs/ff.c **** 
 2616              		.loc 1 991 4 is_stmt 0 view .LVU921
 2617              	.LBE25:
 2618              	.LBE24:
 998:source\fatfs/ff.c **** }
 2619              		.loc 1 998 2 is_stmt 1 view .LVU922
 999:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 2620              		.loc 1 999 1 is_stmt 0 view .LVU923
 2621 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2622              	.LVL276:
 2623              	.L263:
 2624              	.LBB27:
 2625              	.LBB26:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2626              		.loc 1 972 46 view .LVU924
 2627 0088 15F80820 		ldrb	r2, [r5, r8]	@ zero_extendqisi2
 2628 008c 22F00F03 		bic	r3, r2, #15
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2629              		.loc 1 972 74 view .LVU925
 2630 0090 C6F30322 		ubfx	r2, r6, #8, #4
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2631              		.loc 1 972 7 view .LVU926
 2632 0094 1A43     		orrs	r2, r2, r3
 2633 0096 F0E7     		b	.L264
 2634              	.LVL277:
 2635              	.L259:
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2636              		.loc 1 977 4 is_stmt 1 view .LVU927
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2637              		.loc 1 977 10 is_stmt 0 view .LVU928
 2638 0098 D0F82012 		ldr	r1, [r0, #544]
 2639              	.LVL278:
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2640              		.loc 1 977 10 view .LVU929
 2641 009c 01EB1421 		add	r1, r1, r4, lsr #8
 2642 00a0 FFF7FEFF 		bl	move_window
 2643              	.LVL279:
 978:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2644              		.loc 1 978 4 is_stmt 1 view .LVU930
 978:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2645              		.loc 1 978 7 is_stmt 0 view .LVU931
 2646 00a4 0028     		cmp	r0, #0
 2647 00a6 EDD1     		bne	.L258
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2648              		.loc 1 979 4 is_stmt 1 view .LVU932
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2649              		.loc 1 979 25 is_stmt 0 view .LVU933
 2650 00a8 6400     		lsls	r4, r4, #1
 2651              	.LVL280:
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2652              		.loc 1 979 29 view .LVU934
 2653 00aa 04F4FF74 		and	r4, r4, #510
 2654              	.LVL281:
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2655              		.loc 1 980 4 is_stmt 1 view .LVU935
 2656 00ae C6F30722 		ubfx	r2, r6, #8, #8
 2657 00b2 2E55     		strb	r6, [r5, r4]
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2658              		.loc 1 980 4 view .LVU936
 2659 00b4 2C44     		add	r4, r4, r5
 2660              	.LVL282:
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2661              		.loc 1 980 4 is_stmt 0 view .LVU937
 2662 00b6 6270     		strb	r2, [r4, #1]
 981:source\fatfs/ff.c **** 			break;
 2663              		.loc 1 981 4 is_stmt 1 view .LVU938
 2664 00b8 E1E7     		b	.L268
 2665              	.LVL283:
 2666              	.L260:
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2667              		.loc 1 985 4 view .LVU939
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2668              		.loc 1 985 10 is_stmt 0 view .LVU940
 2669 00ba D0F82012 		ldr	r1, [r0, #544]
 2670              	.LVL284:
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2671              		.loc 1 985 10 view .LVU941
 2672 00be 01EBD411 		add	r1, r1, r4, lsr #7
 2673 00c2 FFF7FEFF 		bl	move_window
 2674              	.LVL285:
 986:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2675              		.loc 1 986 4 is_stmt 1 view .LVU942
 986:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2676              		.loc 1 986 7 is_stmt 0 view .LVU943
 2677 00c6 0028     		cmp	r0, #0
 2678 00c8 DCD1     		bne	.L258
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2679              		.loc 1 987 4 is_stmt 1 view .LVU944
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2680              		.loc 1 987 25 is_stmt 0 view .LVU945
 2681 00ca A400     		lsls	r4, r4, #2
 2682              	.LVL286:
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2683              		.loc 1 987 29 view .LVU946
 2684 00cc 04F4FE74 		and	r4, r4, #508
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2685              		.loc 1 987 6 view .LVU947
 2686 00d0 2919     		adds	r1, r5, r4
 2687              	.LVL287:
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2688              		.loc 1 988 4 is_stmt 1 view .LVU948
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2689              		.loc 1 988 11 is_stmt 0 view .LVU949
 2690 00d2 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 2691 00d4 1B06     		lsls	r3, r3, #24
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2692              		.loc 1 988 23 view .LVU950
 2693 00d6 03F07043 		and	r3, r3, #-268435456
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2694              		.loc 1 988 8 view .LVU951
 2695 00da 43EA0602 		orr	r2, r3, r6
 2696              	.LVL288:
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2697              		.loc 1 989 4 is_stmt 1 view .LVU952
 2698 00de C2F30723 		ubfx	r3, r2, #8, #8
 2699 00e2 2A55     		strb	r2, [r5, r4]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2700              		.loc 1 989 4 view .LVU953
 2701 00e4 4B70     		strb	r3, [r1, #1]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2702              		.loc 1 989 4 view .LVU954
 2703 00e6 130C     		lsrs	r3, r2, #16
 2704 00e8 120E     		lsrs	r2, r2, #24
 2705              	.LVL289:
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2706              		.loc 1 989 4 is_stmt 0 view .LVU955
 2707 00ea 8B70     		strb	r3, [r1, #2]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2708              		.loc 1 989 4 is_stmt 1 view .LVU956
 2709 00ec CA70     		strb	r2, [r1, #3]
 2710              	.LVL290:
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2711              		.loc 1 989 4 is_stmt 0 view .LVU957
 2712 00ee C6E7     		b	.L268
 2713              	.LVL291:
 2714              	.L267:
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2715              		.loc 1 961 3 view .LVU958
 2716 00f0 0220     		movs	r0, #2
 2717              	.LVL292:
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2718              		.loc 1 961 3 view .LVU959
 2719 00f2 C7E7     		b	.L258
 2720              	.LBE26:
 2721              	.LBE27:
 2722              		.cfi_endproc
 2723              	.LFE144:
 2725              		.section	.text.create_chain,"ax",%progbits
 2726              		.align	1
 2727              		.syntax unified
 2728              		.thumb
 2729              		.thumb_func
 2731              	create_chain:
 2732              	.LVL293:
 2733              	.LFB146:
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2734              		.loc 1 1067 1 is_stmt 1 view -0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 0
 2737              		@ frame_needed = 0, uses_anonymous_args = 0
1068:source\fatfs/ff.c **** 	FRESULT res;
 2738              		.loc 1 1068 2 view .LVU961
1069:source\fatfs/ff.c **** 
 2739              		.loc 1 1069 2 view .LVU962
1072:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2740              		.loc 1 1072 2 view .LVU963
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2741              		.loc 1 1067 1 is_stmt 0 view .LVU964
 2742 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2743              		.cfi_def_cfa_offset 24
 2744              		.cfi_offset 3, -24
 2745              		.cfi_offset 4, -20
 2746              		.cfi_offset 5, -16
 2747              		.cfi_offset 6, -12
 2748              		.cfi_offset 7, -8
 2749              		.cfi_offset 14, -4
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2750              		.loc 1 1067 1 view .LVU965
 2751 0002 0546     		mov	r5, r0
1072:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2752              		.loc 1 1072 5 view .LVU966
 2753 0004 0F46     		mov	r7, r1
 2754 0006 89B9     		cbnz	r1, .L270
1073:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2755              		.loc 1 1073 3 is_stmt 1 view .LVU967
1073:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2756              		.loc 1 1073 7 is_stmt 0 view .LVU968
 2757 0008 D0F80C62 		ldr	r6, [r0, #524]
 2758              	.LVL294:
1074:source\fatfs/ff.c **** 	}
 2759              		.loc 1 1074 3 is_stmt 1 view .LVU969
1074:source\fatfs/ff.c **** 	}
 2760              		.loc 1 1074 6 is_stmt 0 view .LVU970
 2761 000c F6B1     		cbz	r6, .L284
1074:source\fatfs/ff.c **** 	}
 2762              		.loc 1 1074 12 discriminator 2 view .LVU971
 2763 000e D0F81432 		ldr	r3, [r0, #532]
1074:source\fatfs/ff.c **** 	}
 2764              		.loc 1 1074 40 discriminator 2 view .LVU972
 2765 0012 9E42     		cmp	r6, r3
 2766 0014 28BF     		it	cs
 2767 0016 0126     		movcs	r6, #1
 2768              	.LVL295:
 2769              	.L271:
1084:source\fatfs/ff.c **** 	for (;;) {
 2770              		.loc 1 1084 2 is_stmt 1 view .LVU973
1084:source\fatfs/ff.c **** 	for (;;) {
 2771              		.loc 1 1084 2 is_stmt 0 view .LVU974
 2772 0018 3446     		mov	r4, r6
 2773              	.LVL296:
 2774              	.L279:
1085:source\fatfs/ff.c **** 		ncl++;							/* Next cluster */
 2775              		.loc 1 1085 2 is_stmt 1 view .LVU975
1086:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 2776              		.loc 1 1086 3 view .LVU976
1087:source\fatfs/ff.c **** 			ncl = 2;
 2777              		.loc 1 1087 6 is_stmt 0 view .LVU977
 2778 001a D5F81432 		ldr	r3, [r5, #532]
1086:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 2779              		.loc 1 1086 6 view .LVU978
 2780 001e 0134     		adds	r4, r4, #1
 2781              	.LVL297:
1087:source\fatfs/ff.c **** 			ncl = 2;
 2782              		.loc 1 1087 3 is_stmt 1 view .LVU979
1087:source\fatfs/ff.c **** 			ncl = 2;
 2783              		.loc 1 1087 6 is_stmt 0 view .LVU980
 2784 0020 A342     		cmp	r3, r4
 2785 0022 16D8     		bhi	.L275
1088:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 2786              		.loc 1 1088 4 is_stmt 1 view .LVU981
 2787              	.LVL298:
1089:source\fatfs/ff.c **** 		}
 2788              		.loc 1 1089 4 view .LVU982
1089:source\fatfs/ff.c **** 		}
 2789              		.loc 1 1089 7 is_stmt 0 view .LVU983
 2790 0024 012E     		cmp	r6, #1
 2791 0026 13D8     		bhi	.L285
 2792              	.LVL299:
 2793              	.L278:
1089:source\fatfs/ff.c **** 		}
 2794              		.loc 1 1089 26 view .LVU984
 2795 0028 0024     		movs	r4, #0
 2796 002a 05E0     		b	.L269
 2797              	.LVL300:
 2798              	.L270:
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2799              		.loc 1 1077 3 is_stmt 1 view .LVU985
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2800              		.loc 1 1077 8 is_stmt 0 view .LVU986
 2801 002c FFF7FEFF 		bl	get_fat
 2802              	.LVL301:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2803              		.loc 1 1078 6 view .LVU987
 2804 0030 0128     		cmp	r0, #1
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2805              		.loc 1 1077 8 view .LVU988
 2806 0032 0446     		mov	r4, r0
 2807              	.LVL302:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2808              		.loc 1 1078 3 is_stmt 1 view .LVU989
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2809              		.loc 1 1078 6 is_stmt 0 view .LVU990
 2810 0034 02D8     		bhi	.L272
 2811              	.LVL303:
 2812              	.L277:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2813              		.loc 1 1078 22 view .LVU991
 2814 0036 0124     		movs	r4, #1
 2815              	.L269:
1113:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 2816              		.loc 1 1113 1 view .LVU992
 2817 0038 2046     		mov	r0, r4
 2818 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2819              	.LVL304:
 2820              	.L272:
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2821              		.loc 1 1079 3 is_stmt 1 view .LVU993
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2822              		.loc 1 1079 6 is_stmt 0 view .LVU994
 2823 003c 601C     		adds	r0, r4, #1
 2824              	.LVL305:
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2825              		.loc 1 1079 6 view .LVU995
 2826 003e 35D0     		beq	.L274
1080:source\fatfs/ff.c **** 		scl = clst;
 2827              		.loc 1 1080 3 is_stmt 1 view .LVU996
1080:source\fatfs/ff.c **** 		scl = clst;
 2828              		.loc 1 1080 6 is_stmt 0 view .LVU997
 2829 0040 D5F81432 		ldr	r3, [r5, #532]
 2830 0044 A342     		cmp	r3, r4
 2831 0046 F7D8     		bhi	.L269
 2832 0048 3E46     		mov	r6, r7
 2833 004a E5E7     		b	.L271
 2834              	.LVL306:
 2835              	.L284:
1074:source\fatfs/ff.c **** 	}
 2836              		.loc 1 1074 40 view .LVU998
 2837 004c 0126     		movs	r6, #1
 2838              	.LVL307:
1074:source\fatfs/ff.c **** 	}
 2839              		.loc 1 1074 40 view .LVU999
 2840 004e E3E7     		b	.L271
 2841              	.LVL308:
 2842              	.L285:
1088:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 2843              		.loc 1 1088 8 view .LVU1000
 2844 0050 0224     		movs	r4, #2
 2845              	.LVL309:
 2846              	.L275:
1091:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 2847              		.loc 1 1091 3 is_stmt 1 view .LVU1001
1091:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 2848              		.loc 1 1091 8 is_stmt 0 view .LVU1002
 2849 0052 2146     		mov	r1, r4
 2850 0054 2846     		mov	r0, r5
 2851 0056 FFF7FEFF 		bl	get_fat
 2852              	.LVL310:
1092:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2853              		.loc 1 1092 3 is_stmt 1 view .LVU1003
1092:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2854              		.loc 1 1092 6 is_stmt 0 view .LVU1004
 2855 005a 30B1     		cbz	r0, .L276
1093:source\fatfs/ff.c **** 			return cs;
 2856              		.loc 1 1093 3 is_stmt 1 view .LVU1005
1093:source\fatfs/ff.c **** 			return cs;
 2857              		.loc 1 1093 6 is_stmt 0 view .LVU1006
 2858 005c 411C     		adds	r1, r0, #1
 2859 005e 25D0     		beq	.L274
1093:source\fatfs/ff.c **** 			return cs;
 2860              		.loc 1 1093 24 discriminator 1 view .LVU1007
 2861 0060 0128     		cmp	r0, #1
 2862 0062 E8D0     		beq	.L277
1095:source\fatfs/ff.c **** 	}
 2863              		.loc 1 1095 3 is_stmt 1 view .LVU1008
1095:source\fatfs/ff.c **** 	}
 2864              		.loc 1 1095 6 is_stmt 0 view .LVU1009
 2865 0064 B442     		cmp	r4, r6
 2866 0066 D8D1     		bne	.L279
 2867 0068 DEE7     		b	.L278
 2868              	.L276:
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2869              		.loc 1 1098 2 is_stmt 1 view .LVU1010
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2870              		.loc 1 1098 8 is_stmt 0 view .LVU1011
 2871 006a 6FF07042 		mvn	r2, #-268435456
 2872 006e 2146     		mov	r1, r4
 2873 0070 2846     		mov	r0, r5
 2874              	.LVL311:
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2875              		.loc 1 1098 8 view .LVU1012
 2876 0072 FFF7FEFF 		bl	put_fat
 2877              	.LVL312:
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2878              		.loc 1 1099 2 is_stmt 1 view .LVU1013
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2879              		.loc 1 1099 5 is_stmt 0 view .LVU1014
 2880 0076 B8B9     		cbnz	r0, .L280
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2881              		.loc 1 1099 19 discriminator 1 view .LVU1015
 2882 0078 7FB9     		cbnz	r7, .L281
 2883              	.L283:
 2884              	.LVL313:
1103:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2885              		.loc 1 1103 3 is_stmt 1 view .LVU1016
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2886              		.loc 1 1104 9 is_stmt 0 view .LVU1017
 2887 007a D5F81032 		ldr	r3, [r5, #528]
1103:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2888              		.loc 1 1103 18 view .LVU1018
 2889 007e C5F80C42 		str	r4, [r5, #524]
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2890              		.loc 1 1104 3 is_stmt 1 view .LVU1019
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2891              		.loc 1 1104 6 is_stmt 0 view .LVU1020
 2892 0082 5A1C     		adds	r2, r3, #1
 2893 0084 D8D0     		beq	.L269
1105:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 2894              		.loc 1 1105 4 is_stmt 1 view .LVU1021
1105:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 2895              		.loc 1 1105 18 is_stmt 0 view .LVU1022
 2896 0086 013B     		subs	r3, r3, #1
 2897 0088 C5F81032 		str	r3, [r5, #528]
1106:source\fatfs/ff.c **** 		}
 2898              		.loc 1 1106 4 is_stmt 1 view .LVU1023
1106:source\fatfs/ff.c **** 		}
 2899              		.loc 1 1106 17 is_stmt 0 view .LVU1024
 2900 008c 95F80532 		ldrb	r3, [r5, #517]	@ zero_extendqisi2
 2901 0090 43F00103 		orr	r3, r3, #1
 2902 0094 85F80532 		strb	r3, [r5, #517]
 2903 0098 CEE7     		b	.L269
 2904              	.LVL314:
 2905              	.L281:
1100:source\fatfs/ff.c **** 	}
 2906              		.loc 1 1100 3 is_stmt 1 view .LVU1025
1100:source\fatfs/ff.c **** 	}
 2907              		.loc 1 1100 9 is_stmt 0 view .LVU1026
 2908 009a 2246     		mov	r2, r4
 2909 009c 3946     		mov	r1, r7
 2910 009e 2846     		mov	r0, r5
 2911              	.LVL315:
1100:source\fatfs/ff.c **** 	}
 2912              		.loc 1 1100 9 view .LVU1027
 2913 00a0 FFF7FEFF 		bl	put_fat
 2914              	.LVL316:
1102:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 2915              		.loc 1 1102 2 is_stmt 1 view .LVU1028
1102:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 2916              		.loc 1 1102 5 is_stmt 0 view .LVU1029
 2917 00a4 0028     		cmp	r0, #0
 2918 00a6 E8D0     		beq	.L283
 2919              	.L280:
1109:source\fatfs/ff.c **** 	}
 2920              		.loc 1 1109 3 is_stmt 1 view .LVU1030
1109:source\fatfs/ff.c **** 	}
 2921              		.loc 1 1109 43 is_stmt 0 view .LVU1031
 2922 00a8 0128     		cmp	r0, #1
 2923 00aa C4D1     		bne	.L277
 2924              	.LVL317:
 2925              	.L274:
1109:source\fatfs/ff.c **** 	}
 2926              		.loc 1 1109 43 view .LVU1032
 2927 00ac 4FF0FF34 		mov	r4, #-1
 2928 00b0 C2E7     		b	.L269
 2929              		.cfi_endproc
 2930              	.LFE146:
 2932              		.section	.text.dir_next,"ax",%progbits
 2933              		.align	1
 2934              		.syntax unified
 2935              		.thumb
 2936              		.thumb_func
 2938              	dir_next:
 2939              	.LVL318:
 2940              	.LFB149:
1205:source\fatfs/ff.c **** 	DWORD clst;
 2941              		.loc 1 1205 1 is_stmt 1 view -0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 0
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
1206:source\fatfs/ff.c **** 	UINT i;
 2945              		.loc 1 1206 2 view .LVU1034
1207:source\fatfs/ff.c **** #if !_FS_READONLY
 2946              		.loc 1 1207 2 view .LVU1035
1209:source\fatfs/ff.c **** #endif
 2947              		.loc 1 1209 2 view .LVU1036
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 2948              		.loc 1 1213 2 view .LVU1037
1205:source\fatfs/ff.c **** 	DWORD clst;
 2949              		.loc 1 1205 1 is_stmt 0 view .LVU1038
 2950 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2951              		.cfi_def_cfa_offset 32
 2952              		.cfi_offset 3, -32
 2953              		.cfi_offset 4, -28
 2954              		.cfi_offset 5, -24
 2955              		.cfi_offset 6, -20
 2956              		.cfi_offset 7, -16
 2957              		.cfi_offset 8, -12
 2958              		.cfi_offset 9, -8
 2959              		.cfi_offset 14, -4
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 2960              		.loc 1 1213 8 view .LVU1039
 2961 0004 B0F80662 		ldrh	r6, [r0, #518]
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 2962              		.loc 1 1213 16 view .LVU1040
 2963 0008 0136     		adds	r6, r6, #1
 2964              	.LVL319:
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 2965              		.loc 1 1214 2 is_stmt 1 view .LVU1041
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 2966              		.loc 1 1214 10 is_stmt 0 view .LVU1042
 2967 000a B3B2     		uxth	r3, r6
1205:source\fatfs/ff.c **** 	DWORD clst;
 2968              		.loc 1 1205 1 view .LVU1043
 2969 000c 0446     		mov	r4, r0
 2970 000e 8946     		mov	r9, r1
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 2971              		.loc 1 1214 5 view .LVU1044
 2972 0010 13B9     		cbnz	r3, .L299
 2973              	.LVL320:
 2974              	.L301:
1215:source\fatfs/ff.c **** 
 2975              		.loc 1 1215 10 view .LVU1045
 2976 0012 0420     		movs	r0, #4
 2977              	.LVL321:
 2978              	.L300:
1261:source\fatfs/ff.c **** 
 2979              		.loc 1 1261 1 view .LVU1046
 2980 0014 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2981              	.LVL322:
 2982              	.L299:
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 2983              		.loc 1 1214 26 discriminator 1 view .LVU1047
 2984 0018 D0F81032 		ldr	r3, [r0, #528]
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 2985              		.loc 1 1214 20 discriminator 1 view .LVU1048
 2986 001c 002B     		cmp	r3, #0
 2987 001e F8D0     		beq	.L301
1217:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
 2988              		.loc 1 1217 2 is_stmt 1 view .LVU1049
1217:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
 2989              		.loc 1 1217 5 is_stmt 0 view .LVU1050
 2990 0020 16F00F08 		ands	r8, r6, #15
 2991 0024 0BD1     		bne	.L303
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 2992              		.loc 1 1220 10 view .LVU1051
 2993 0026 D4F80C12 		ldr	r1, [r4, #524]
 2994              	.LVL323:
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 2995              		.loc 1 1221 15 view .LVU1052
 2996 002a D0F80002 		ldr	r0, [r0, #512]
 2997              	.LVL324:
1218:source\fatfs/ff.c **** 
 2998              		.loc 1 1218 3 is_stmt 1 view .LVU1053
1218:source\fatfs/ff.c **** 
 2999              		.loc 1 1218 11 is_stmt 0 view .LVU1054
 3000 002e 0133     		adds	r3, r3, #1
 3001 0030 C4F81032 		str	r3, [r4, #528]
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 3002              		.loc 1 1220 3 is_stmt 1 view .LVU1055
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 3003              		.loc 1 1220 6 is_stmt 0 view .LVU1056
 3004 0034 69B9     		cbnz	r1, .L304
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3005              		.loc 1 1221 4 is_stmt 1 view .LVU1057
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3006              		.loc 1 1221 19 is_stmt 0 view .LVU1058
 3007 0036 B0F80832 		ldrh	r3, [r0, #520]
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3008              		.loc 1 1221 7 view .LVU1059
 3009 003a B342     		cmp	r3, r6
 3010 003c E9D9     		bls	.L301
 3011              	.LVL325:
 3012              	.L303:
1257:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
 3013              		.loc 1 1257 2 is_stmt 1 view .LVU1060
1258:source\fatfs/ff.c **** 
 3014              		.loc 1 1258 27 is_stmt 0 view .LVU1061
 3015 003e D4F80032 		ldr	r3, [r4, #512]
1257:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
 3016              		.loc 1 1257 12 view .LVU1062
 3017 0042 A4F80662 		strh	r6, [r4, #518]	@ movhi
1258:source\fatfs/ff.c **** 
 3018              		.loc 1 1258 2 is_stmt 1 view .LVU1063
1258:source\fatfs/ff.c **** 
 3019              		.loc 1 1258 27 is_stmt 0 view .LVU1064
 3020 0046 03EB4813 		add	r3, r3, r8, lsl #5
1258:source\fatfs/ff.c **** 
 3021              		.loc 1 1258 10 view .LVU1065
 3022 004a C4F81432 		str	r3, [r4, #532]
1260:source\fatfs/ff.c **** }
 3023              		.loc 1 1260 2 is_stmt 1 view .LVU1066
1260:source\fatfs/ff.c **** }
 3024              		.loc 1 1260 9 is_stmt 0 view .LVU1067
 3025 004e 0020     		movs	r0, #0
 3026 0050 E0E7     		b	.L300
 3027              	.LVL326:
 3028              	.L304:
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3029              		.loc 1 1225 4 is_stmt 1 view .LVU1068
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3030              		.loc 1 1225 47 is_stmt 0 view .LVU1069
 3031 0052 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3032              		.loc 1 1225 55 view .LVU1070
 3033 0056 013F     		subs	r7, r7, #1
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3034              		.loc 1 1225 7 view .LVU1071
 3035 0058 17EA1617 		ands	r7, r7, r6, lsr #4
 3036 005c EFD1     		bne	.L303
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3037              		.loc 1 1226 5 is_stmt 1 view .LVU1072
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3038              		.loc 1 1226 12 is_stmt 0 view .LVU1073
 3039 005e FFF7FEFF 		bl	get_fat
 3040              	.LVL327:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3041              		.loc 1 1227 8 view .LVU1074
 3042 0062 0128     		cmp	r0, #1
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3043              		.loc 1 1226 12 view .LVU1075
 3044 0064 0546     		mov	r5, r0
 3045              	.LVL328:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3046              		.loc 1 1227 5 is_stmt 1 view .LVU1076
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3047              		.loc 1 1227 8 is_stmt 0 view .LVU1077
 3048 0066 01D8     		bhi	.L306
 3049              	.L309:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3050              		.loc 1 1227 27 view .LVU1078
 3051 0068 0220     		movs	r0, #2
 3052              	.LVL329:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3053              		.loc 1 1227 27 view .LVU1079
 3054 006a D3E7     		b	.L300
 3055              	.LVL330:
 3056              	.L306:
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3057              		.loc 1 1228 5 is_stmt 1 view .LVU1080
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3058              		.loc 1 1228 8 is_stmt 0 view .LVU1081
 3059 006c 421C     		adds	r2, r0, #1
 3060 006e 01D1     		bne	.L307
 3061              	.LVL331:
 3062              	.L310:
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3063              		.loc 1 1228 36 view .LVU1082
 3064 0070 0120     		movs	r0, #1
 3065 0072 CFE7     		b	.L300
 3066              	.LVL332:
 3067              	.L307:
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3068              		.loc 1 1229 5 is_stmt 1 view .LVU1083
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3069              		.loc 1 1229 19 is_stmt 0 view .LVU1084
 3070 0074 D4F80002 		ldr	r0, [r4, #512]
 3071              	.LVL333:
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3072              		.loc 1 1229 8 view .LVU1085
 3073 0078 D0F81432 		ldr	r3, [r0, #532]
 3074 007c AB42     		cmp	r3, r5
 3075 007e 2FD8     		bhi	.L308
1231:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 3076              		.loc 1 1231 6 is_stmt 1 view .LVU1086
1231:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 3077              		.loc 1 1231 9 is_stmt 0 view .LVU1087
 3078 0080 B9F1000F 		cmp	r9, #0
 3079 0084 C5D0     		beq	.L301
1232:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3080              		.loc 1 1232 6 is_stmt 1 view .LVU1088
1232:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3081              		.loc 1 1232 13 is_stmt 0 view .LVU1089
 3082 0086 D4F80C12 		ldr	r1, [r4, #524]
 3083 008a FFF7FEFF 		bl	create_chain
 3084              	.LVL334:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3085              		.loc 1 1233 6 is_stmt 1 view .LVU1090
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3086              		.loc 1 1233 9 is_stmt 0 view .LVU1091
 3087 008e 0546     		mov	r5, r0
 3088 0090 0028     		cmp	r0, #0
 3089 0092 3ED0     		beq	.L313
1234:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3090              		.loc 1 1234 6 is_stmt 1 view .LVU1092
1234:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3091              		.loc 1 1234 9 is_stmt 0 view .LVU1093
 3092 0094 0128     		cmp	r0, #1
 3093 0096 E7D0     		beq	.L309
1235:source\fatfs/ff.c **** 					/* Clean-up stretched table */
 3094              		.loc 1 1235 6 is_stmt 1 view .LVU1094
1235:source\fatfs/ff.c **** 					/* Clean-up stretched table */
 3095              		.loc 1 1235 9 is_stmt 0 view .LVU1095
 3096 0098 431C     		adds	r3, r0, #1
 3097 009a E9D0     		beq	.L310
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3098              		.loc 1 1237 6 is_stmt 1 view .LVU1096
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3099              		.loc 1 1237 10 is_stmt 0 view .LVU1097
 3100 009c D4F80002 		ldr	r0, [r4, #512]
 3101              	.LVL335:
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3102              		.loc 1 1237 10 view .LVU1098
 3103 00a0 FFF7FEFF 		bl	sync_window
 3104              	.LVL336:
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3105              		.loc 1 1237 9 view .LVU1099
 3106 00a4 0146     		mov	r1, r0
 3107 00a6 0028     		cmp	r0, #0
 3108 00a8 E2D1     		bne	.L310
1238:source\fatfs/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 3109              		.loc 1 1238 6 is_stmt 1 view .LVU1100
 3110 00aa D4F80002 		ldr	r0, [r4, #512]
 3111 00ae 4FF40072 		mov	r2, #512
 3112 00b2 FFF7FEFF 		bl	mem_set
 3113              	.LVL337:
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3114              		.loc 1 1239 6 view .LVU1101
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3115              		.loc 1 1239 24 is_stmt 0 view .LVU1102
 3116 00b6 D4F80022 		ldr	r2, [r4, #512]
 3117 00ba 2946     		mov	r1, r5
 3118 00bc 1046     		mov	r0, r2
 3119 00be FFF7FEFF 		bl	clust2sect
 3120              	.LVL338:
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3121              		.loc 1 1241 21 view .LVU1103
 3122 00c2 4FF00109 		mov	r9, #1
 3123              	.LVL339:
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3124              		.loc 1 1239 22 view .LVU1104
 3125 00c6 C2F82C02 		str	r0, [r2, #556]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3126              		.loc 1 1240 6 is_stmt 1 view .LVU1105
 3127              	.LVL340:
 3128              	.L311:
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3129              		.loc 1 1240 18 discriminator 1 view .LVU1106
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3130              		.loc 1 1240 24 is_stmt 0 discriminator 1 view .LVU1107
 3131 00ca D4F80002 		ldr	r0, [r4, #512]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3132              		.loc 1 1240 28 discriminator 1 view .LVU1108
 3133 00ce 90F80232 		ldrb	r3, [r0, #514]	@ zero_extendqisi2
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3134              		.loc 1 1240 6 discriminator 1 view .LVU1109
 3135 00d2 BB42     		cmp	r3, r7
 3136 00d4 0ED8     		bhi	.L312
1245:source\fatfs/ff.c **** #else
 3137              		.loc 1 1245 6 is_stmt 1 view .LVU1110
1245:source\fatfs/ff.c **** #else
 3138              		.loc 1 1245 22 is_stmt 0 view .LVU1111
 3139 00d6 D0F82C32 		ldr	r3, [r0, #556]
 3140 00da DB1B     		subs	r3, r3, r7
 3141 00dc C0F82C32 		str	r3, [r0, #556]
 3142              	.LVL341:
 3143              	.L308:
1251:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 3144              		.loc 1 1251 5 is_stmt 1 view .LVU1112
1252:source\fatfs/ff.c **** 			}
 3145              		.loc 1 1252 16 is_stmt 0 view .LVU1113
 3146 00e0 D4F80002 		ldr	r0, [r4, #512]
1251:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 3147              		.loc 1 1251 15 view .LVU1114
 3148 00e4 C4F80C52 		str	r5, [r4, #524]
1252:source\fatfs/ff.c **** 			}
 3149              		.loc 1 1252 5 is_stmt 1 view .LVU1115
1252:source\fatfs/ff.c **** 			}
 3150              		.loc 1 1252 16 is_stmt 0 view .LVU1116
 3151 00e8 2946     		mov	r1, r5
 3152 00ea FFF7FEFF 		bl	clust2sect
 3153              	.LVL342:
1252:source\fatfs/ff.c **** 			}
 3154              		.loc 1 1252 14 view .LVU1117
 3155 00ee C4F81002 		str	r0, [r4, #528]
 3156 00f2 A4E7     		b	.L303
 3157              	.LVL343:
 3158              	.L312:
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3159              		.loc 1 1241 7 is_stmt 1 view .LVU1118
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3160              		.loc 1 1241 21 is_stmt 0 view .LVU1119
 3161 00f4 80F80492 		strb	r9, [r0, #516]
1242:source\fatfs/ff.c **** 						dp->fs->winsect++;
 3162              		.loc 1 1242 7 is_stmt 1 view .LVU1120
 3163              	.LVL344:
 3164              	.LBB30:
 3165              	.LBI30:
 773:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 3166              		.loc 1 773 9 view .LVU1121
 3167              	.LBB31:
 777:source\fatfs/ff.c **** 	UINT nf;
 3168              		.loc 1 777 2 view .LVU1122
 778:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 3169              		.loc 1 778 2 view .LVU1123
 779:source\fatfs/ff.c **** 
 3170              		.loc 1 779 2 view .LVU1124
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 3171              		.loc 1 782 2 view .LVU1125
 3172 00f8 FFF7FEFF 		bl	sync_window.part.0
 3173              	.LVL345:
 796:source\fatfs/ff.c **** }
 3174              		.loc 1 796 2 view .LVU1126
 796:source\fatfs/ff.c **** }
 3175              		.loc 1 796 2 is_stmt 0 view .LVU1127
 3176              	.LBE31:
 3177              	.LBE30:
1242:source\fatfs/ff.c **** 						dp->fs->winsect++;
 3178              		.loc 1 1242 10 view .LVU1128
 3179 00fc 0028     		cmp	r0, #0
 3180 00fe B7D1     		bne	.L310
1243:source\fatfs/ff.c **** 					}
 3181              		.loc 1 1243 7 is_stmt 1 discriminator 2 view .LVU1129
1243:source\fatfs/ff.c **** 					}
 3182              		.loc 1 1243 9 is_stmt 0 discriminator 2 view .LVU1130
 3183 0100 D4F80022 		ldr	r2, [r4, #512]
1243:source\fatfs/ff.c **** 					}
 3184              		.loc 1 1243 22 discriminator 2 view .LVU1131
 3185 0104 D2F82C32 		ldr	r3, [r2, #556]
 3186 0108 0133     		adds	r3, r3, #1
 3187 010a C2F82C32 		str	r3, [r2, #556]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3188              		.loc 1 1240 37 is_stmt 1 discriminator 2 view .LVU1132
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3189              		.loc 1 1240 38 is_stmt 0 discriminator 2 view .LVU1133
 3190 010e 0137     		adds	r7, r7, #1
 3191              	.LVL346:
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3192              		.loc 1 1240 38 discriminator 2 view .LVU1134
 3193 0110 DBE7     		b	.L311
 3194              	.LVL347:
 3195              	.L313:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3196              		.loc 1 1233 28 view .LVU1135
 3197 0112 0720     		movs	r0, #7
 3198              	.LVL348:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3199              		.loc 1 1233 28 view .LVU1136
 3200 0114 7EE7     		b	.L300
 3201              		.cfi_endproc
 3202              	.LFE149:
 3204              		.section	.text.dir_find,"ax",%progbits
 3205              		.align	1
 3206              		.syntax unified
 3207              		.thumb
 3208              		.thumb_func
 3210              	dir_find:
 3211              	.LVL349:
 3212              	.LFB158:
1531:source\fatfs/ff.c **** 	FRESULT res;
 3213              		.loc 1 1531 1 is_stmt 1 view -0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 8
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
1532:source\fatfs/ff.c **** 	BYTE c, *dir;
 3217              		.loc 1 1532 2 view .LVU1138
1533:source\fatfs/ff.c **** #if _USE_LFN
 3218              		.loc 1 1533 2 view .LVU1139
1535:source\fatfs/ff.c **** #endif
 3219              		.loc 1 1535 2 view .LVU1140
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3220              		.loc 1 1538 2 view .LVU1141
1531:source\fatfs/ff.c **** 	FRESULT res;
 3221              		.loc 1 1531 1 is_stmt 0 view .LVU1142
 3222 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3223              		.cfi_def_cfa_offset 48
 3224              		.cfi_offset 4, -36
 3225              		.cfi_offset 5, -32
 3226              		.cfi_offset 6, -28
 3227              		.cfi_offset 7, -24
 3228              		.cfi_offset 8, -20
 3229              		.cfi_offset 9, -16
 3230              		.cfi_offset 10, -12
 3231              		.cfi_offset 11, -8
 3232              		.cfi_offset 14, -4
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3233              		.loc 1 1538 8 view .LVU1143
 3234 0004 0021     		movs	r1, #0
1531:source\fatfs/ff.c **** 	FRESULT res;
 3235              		.loc 1 1531 1 view .LVU1144
 3236 0006 0646     		mov	r6, r0
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3237              		.loc 1 1538 8 view .LVU1145
 3238 0008 FFF7FEFF 		bl	dir_sdi
 3239              	.LVL350:
1539:source\fatfs/ff.c **** 
 3240              		.loc 1 1539 2 is_stmt 1 view .LVU1146
1539:source\fatfs/ff.c **** 
 3241              		.loc 1 1539 5 is_stmt 0 view .LVU1147
 3242 000c 0446     		mov	r4, r0
 3243 000e 0028     		cmp	r0, #0
 3244 0010 71D1     		bne	.L327
 3245              	.LVL351:
 3246              	.LBB38:
 3247              	.LBI38:
1528:source\fatfs/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
 3248              		.loc 1 1528 9 is_stmt 1 view .LVU1148
 3249              	.LBB39:
1542:source\fatfs/ff.c **** #endif
 3250              		.loc 1 1542 2 view .LVU1149
1542:source\fatfs/ff.c **** #endif
 3251              		.loc 1 1542 20 view .LVU1150
1542:source\fatfs/ff.c **** #endif
 3252              		.loc 1 1542 32 is_stmt 0 view .LVU1151
 3253 0012 4FF6FF79 		movw	r9, #65535
1542:source\fatfs/ff.c **** #endif
 3254              		.loc 1 1542 12 view .LVU1152
 3255 0016 4FF0FF08 		mov	r8, #255
1542:source\fatfs/ff.c **** #endif
 3256              		.loc 1 1542 32 view .LVU1153
 3257 001a A6F82492 		strh	r9, [r6, #548]	@ movhi
1542:source\fatfs/ff.c **** #endif
 3258              		.loc 1 1542 6 view .LVU1154
 3259 001e 4546     		mov	r5, r8
 3260              	.LVL352:
 3261              	.L342:
1544:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3262              		.loc 1 1544 2 is_stmt 1 view .LVU1155
1545:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 3263              		.loc 1 1545 3 view .LVU1156
1545:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 3264              		.loc 1 1545 9 is_stmt 0 view .LVU1157
 3265 0020 D6F81012 		ldr	r1, [r6, #528]
 3266 0024 D6F80002 		ldr	r0, [r6, #512]
 3267 0028 FFF7FEFF 		bl	move_window
 3268              	.LVL353:
1546:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3269              		.loc 1 1546 3 is_stmt 1 view .LVU1158
1546:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3270              		.loc 1 1546 6 is_stmt 0 view .LVU1159
 3271 002c 0446     		mov	r4, r0
 3272 002e 0028     		cmp	r0, #0
 3273 0030 61D1     		bne	.L327
1547:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 3274              		.loc 1 1547 3 is_stmt 1 view .LVU1160
1547:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 3275              		.loc 1 1547 7 is_stmt 0 view .LVU1161
 3276 0032 D6F81472 		ldr	r7, [r6, #532]
 3277              	.LVL354:
1548:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3278              		.loc 1 1548 3 is_stmt 1 view .LVU1162
1548:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3279              		.loc 1 1548 5 is_stmt 0 view .LVU1163
 3280 0036 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 3281              	.LVL355:
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3282              		.loc 1 1549 3 is_stmt 1 view .LVU1164
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3283              		.loc 1 1549 6 is_stmt 0 view .LVU1165
 3284 0038 002B     		cmp	r3, #0
 3285 003a 7ED0     		beq	.L343
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3286              		.loc 1 1551 3 is_stmt 1 view .LVU1166
 3287              	.LVL356:
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3288              		.loc 1 1552 3 view .LVU1167
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3289              		.loc 1 1552 6 is_stmt 0 view .LVU1168
 3290 003c E52B     		cmp	r3, #229
 3291 003e 06D0     		beq	.L340
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3292              		.loc 1 1551 10 view .LVU1169
 3293 0040 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3294              		.loc 1 1551 5 view .LVU1170
 3295 0042 01F03F02 		and	r2, r1, #63
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3296              		.loc 1 1552 17 view .LVU1171
 3297 0046 0907     		lsls	r1, r1, #28
 3298 0048 04D5     		bpl	.L329
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3299              		.loc 1 1552 34 view .LVU1172
 3300 004a 0F2A     		cmp	r2, #15
 3301 004c 04D0     		beq	.L330
 3302              	.LVL357:
 3303              	.L340:
1568:source\fatfs/ff.c **** 			}
 3304              		.loc 1 1568 5 is_stmt 1 view .LVU1173
1568:source\fatfs/ff.c **** 			}
 3305              		.loc 1 1568 17 view .LVU1174
1568:source\fatfs/ff.c **** 			}
 3306              		.loc 1 1568 29 is_stmt 0 view .LVU1175
 3307 004e A6F82492 		strh	r9, [r6, #548]	@ movhi
 3308 0052 56E0     		b	.L349
 3309              	.LVL358:
 3310              	.L329:
1555:source\fatfs/ff.c **** 				if (dp->lfn) {
 3311              		.loc 1 1555 4 is_stmt 1 view .LVU1176
1555:source\fatfs/ff.c **** 				if (dp->lfn) {
 3312              		.loc 1 1555 7 is_stmt 0 view .LVU1177
 3313 0054 0F2A     		cmp	r2, #15
 3314 0056 59D1     		bne	.L332
 3315              	.L330:
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3316              		.loc 1 1556 5 is_stmt 1 view .LVU1178
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3317              		.loc 1 1556 11 is_stmt 0 view .LVU1179
 3318 0058 D6F82042 		ldr	r4, [r6, #544]
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3319              		.loc 1 1556 8 view .LVU1180
 3320 005c 002C     		cmp	r4, #0
 3321 005e 43D0     		beq	.L331
1557:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3322              		.loc 1 1557 6 is_stmt 1 view .LVU1181
1557:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3323              		.loc 1 1557 9 is_stmt 0 view .LVU1182
 3324 0060 5A06     		lsls	r2, r3, #25
 3325 0062 4CD5     		bpl	.L333
1558:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
 3326              		.loc 1 1558 7 is_stmt 1 view .LVU1183
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3327              		.loc 1 1559 9 is_stmt 0 view .LVU1184
 3328 0064 03F0BF05 		and	r5, r3, #191
 3329              	.LVL359:
1560:source\fatfs/ff.c **** 					}
 3330              		.loc 1 1560 19 view .LVU1185
 3331 0068 B6F80632 		ldrh	r3, [r6, #518]
 3332              	.LVL360:
1558:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
 3333              		.loc 1 1558 11 view .LVU1186
 3334 006c 97F80D80 		ldrb	r8, [r7, #13]	@ zero_extendqisi2
 3335              	.LVL361:
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3336              		.loc 1 1559 7 is_stmt 1 view .LVU1187
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3337              		.loc 1 1559 19 view .LVU1188
1560:source\fatfs/ff.c **** 					}
 3338              		.loc 1 1560 7 view .LVU1189
1560:source\fatfs/ff.c **** 					}
 3339              		.loc 1 1560 19 is_stmt 0 view .LVU1190
 3340 0070 A6F82432 		strh	r3, [r6, #548]	@ movhi
 3341              	.LVL362:
1563:source\fatfs/ff.c **** 				}
 3342              		.loc 1 1563 6 is_stmt 1 view .LVU1191
 3343              	.L334:
1563:source\fatfs/ff.c **** 				}
 3344              		.loc 1 1563 22 is_stmt 0 view .LVU1192
 3345 0074 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 3346 0076 4345     		cmp	r3, r8
 3347 0078 43D1     		bne	.L349
 3348              	.LVL363:
 3349              	.LBB40:
 3350              	.LBI40:
1347:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
 3351              		.loc 1 1347 5 is_stmt 1 view .LVU1193
 3352              	.LBB41:
1352:source\fatfs/ff.c **** 	WCHAR wc, uc;
 3353              		.loc 1 1352 2 view .LVU1194
1353:source\fatfs/ff.c **** 
 3354              		.loc 1 1353 2 view .LVU1195
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3355              		.loc 1 1356 2 view .LVU1196
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3356              		.loc 1 1356 11 is_stmt 0 view .LVU1197
 3357 007a 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 3358 007c DFF8C4A0 		ldr	r10, .L371+4
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3359              		.loc 1 1356 22 view .LVU1198
 3360 0080 23F04003 		bic	r3, r3, #64
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3361              		.loc 1 1356 31 view .LVU1199
 3362 0084 013B     		subs	r3, r3, #1
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3363              		.loc 1 1356 36 view .LVU1200
 3364 0086 4FF00D0B 		mov	fp, #13
 3365 008a 0BFB03FB 		mul	fp, fp, r3
 3366              	.LVL364:
1357:source\fatfs/ff.c **** 	do {
 3367              		.loc 1 1357 2 is_stmt 1 view .LVU1201
1357:source\fatfs/ff.c **** 	do {
 3368              		.loc 1 1357 9 view .LVU1202
1357:source\fatfs/ff.c **** 	do {
 3369              		.loc 1 1357 12 is_stmt 0 view .LVU1203
 3370 008e 4FF0010C 		mov	ip, #1
 3371              	.LVL365:
 3372              	.L337:
1358:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 3373              		.loc 1 1358 2 is_stmt 1 view .LVU1204
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3374              		.loc 1 1359 3 view .LVU1205
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3375              		.loc 1 1359 8 is_stmt 0 view .LVU1206
 3376 0092 1AF8012B 		ldrb	r2, [r10], #1	@ zero_extendqisi2
 3377              	.LVL366:
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3378              		.loc 1 1359 8 view .LVU1207
 3379 0096 B918     		adds	r1, r7, r2
 3380 0098 BA5C     		ldrb	r2, [r7, r2]	@ zero_extendqisi2
 3381 009a 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3382              		.loc 1 1359 6 view .LVU1208
 3383 009c 42EA0020 		orr	r0, r2, r0, lsl #8
 3384              	.LVL367:
1360:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 3385              		.loc 1 1360 3 is_stmt 1 view .LVU1209
1360:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 3386              		.loc 1 1360 6 is_stmt 0 view .LVU1210
 3387 00a0 BCF1000F 		cmp	ip, #0
 3388 00a4 2FD0     		beq	.L335
 3389              	.LVL368:
1361:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 3390              		.loc 1 1361 4 is_stmt 1 view .LVU1211
1361:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 3391              		.loc 1 1361 9 is_stmt 0 view .LVU1212
 3392 00a6 FFF7FEFF 		bl	ff_wtoupper
 3393              	.LVL369:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3394              		.loc 1 1362 7 view .LVU1213
 3395 00aa BBF1FE0F 		cmp	fp, #254
1361:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 3396              		.loc 1 1361 9 view .LVU1214
 3397 00ae 0190     		str	r0, [sp, #4]
 3398              	.LVL370:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3399              		.loc 1 1362 4 is_stmt 1 view .LVU1215
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3400              		.loc 1 1362 7 is_stmt 0 view .LVU1216
 3401 00b0 27D8     		bhi	.L349
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3402              		.loc 1 1362 51 view .LVU1217
 3403 00b2 0BF10101 		add	r1, fp, #1
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3404              		.loc 1 1362 31 view .LVU1218
 3405 00b6 34F81B00 		ldrh	r0, [r4, fp, lsl #1]
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3406              		.loc 1 1362 51 view .LVU1219
 3407 00ba 0091     		str	r1, [sp]
 3408              	.LVL371:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3409              		.loc 1 1362 31 view .LVU1220
 3410 00bc FFF7FEFF 		bl	ff_wtoupper
 3411              	.LVL372:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3412              		.loc 1 1362 22 view .LVU1221
 3413 00c0 019A     		ldr	r2, [sp, #4]
 3414 00c2 8242     		cmp	r2, r0
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3415              		.loc 1 1362 31 view .LVU1222
 3416 00c4 8446     		mov	ip, r0
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3417              		.loc 1 1362 22 view .LVU1223
 3418 00c6 1CD1     		bne	.L349
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3419              		.loc 1 1362 51 view .LVU1224
 3420 00c8 0099     		ldr	r1, [sp]
 3421 00ca 8B46     		mov	fp, r1
 3422              	.LVL373:
 3423              	.L336:
1367:source\fatfs/ff.c **** 
 3424              		.loc 1 1367 10 is_stmt 1 view .LVU1225
1367:source\fatfs/ff.c **** 
 3425              		.loc 1 1367 2 is_stmt 0 view .LVU1226
 3426 00cc 1C4B     		ldr	r3, .L371
 3427 00ce 5345     		cmp	r3, r10
 3428 00d0 DFD1     		bne	.L337
1369:source\fatfs/ff.c **** 		return 0;
 3429              		.loc 1 1369 2 is_stmt 1 view .LVU1227
1369:source\fatfs/ff.c **** 		return 0;
 3430              		.loc 1 1369 5 is_stmt 0 view .LVU1228
 3431 00d2 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 3432 00d4 5B06     		lsls	r3, r3, #25
 3433 00d6 05D5     		bpl	.L338
1369:source\fatfs/ff.c **** 		return 0;
 3434              		.loc 1 1369 29 view .LVU1229
 3435 00d8 BCF1000F 		cmp	ip, #0
 3436 00dc 02D0     		beq	.L338
1369:source\fatfs/ff.c **** 		return 0;
 3437              		.loc 1 1369 35 view .LVU1230
 3438 00de 34F81B30 		ldrh	r3, [r4, fp, lsl #1]
 3439 00e2 73B9     		cbnz	r3, .L349
 3440              	.L338:
 3441              	.LVL374:
1369:source\fatfs/ff.c **** 		return 0;
 3442              		.loc 1 1369 35 view .LVU1231
 3443              	.LBE41:
 3444              	.LBE40:
1563:source\fatfs/ff.c **** 				}
 3445              		.loc 1 1563 10 view .LVU1232
 3446 00e4 013D     		subs	r5, r5, #1
 3447              	.LVL375:
1563:source\fatfs/ff.c **** 				}
 3448              		.loc 1 1563 10 view .LVU1233
 3449 00e6 EDB2     		uxtb	r5, r5
 3450              	.LVL376:
 3451              	.L331:
1575:source\fatfs/ff.c **** 	} while (res == FR_OK);
 3452              		.loc 1 1575 3 is_stmt 1 view .LVU1234
1575:source\fatfs/ff.c **** 	} while (res == FR_OK);
 3453              		.loc 1 1575 9 is_stmt 0 view .LVU1235
 3454 00e8 0021     		movs	r1, #0
 3455 00ea 3046     		mov	r0, r6
 3456 00ec FFF7FEFF 		bl	dir_next
 3457              	.LVL377:
1576:source\fatfs/ff.c **** 
 3458              		.loc 1 1576 10 is_stmt 1 view .LVU1236
1576:source\fatfs/ff.c **** 
 3459              		.loc 1 1576 2 is_stmt 0 view .LVU1237
 3460 00f0 0446     		mov	r4, r0
 3461 00f2 0028     		cmp	r0, #0
 3462 00f4 94D0     		beq	.L342
 3463              	.LVL378:
 3464              	.L327:
1576:source\fatfs/ff.c **** 
 3465              		.loc 1 1576 2 view .LVU1238
 3466              	.LBE39:
 3467              	.LBE38:
1579:source\fatfs/ff.c **** 
 3468              		.loc 1 1579 1 view .LVU1239
 3469 00f6 2046     		mov	r0, r4
 3470 00f8 03B0     		add	sp, sp, #12
 3471              		.cfi_remember_state
 3472              		.cfi_def_cfa_offset 36
 3473              		@ sp needed
 3474 00fa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3475              	.LVL379:
 3476              	.L333:
 3477              		.cfi_restore_state
 3478              	.LBB47:
 3479              	.LBB46:
1563:source\fatfs/ff.c **** 				}
 3480              		.loc 1 1563 6 is_stmt 1 view .LVU1240
1563:source\fatfs/ff.c **** 				}
 3481              		.loc 1 1563 10 is_stmt 0 view .LVU1241
 3482 00fe AB42     		cmp	r3, r5
 3483 0100 B8D0     		beq	.L334
 3484              	.LVL380:
 3485              	.L349:
1563:source\fatfs/ff.c **** 				}
 3486              		.loc 1 1563 10 view .LVU1242
 3487 0102 FF25     		movs	r5, #255
 3488 0104 F0E7     		b	.L331
 3489              	.LVL381:
 3490              	.L335:
 3491              	.LBB43:
 3492              	.LBB42:
1365:source\fatfs/ff.c **** 		}
 3493              		.loc 1 1365 4 is_stmt 1 view .LVU1243
1365:source\fatfs/ff.c **** 		}
 3494              		.loc 1 1365 7 is_stmt 0 view .LVU1244
 3495 0106 4845     		cmp	r0, r9
 3496 0108 E0D0     		beq	.L336
 3497 010a FAE7     		b	.L349
 3498              	.LVL382:
 3499              	.L332:
1365:source\fatfs/ff.c **** 		}
 3500              		.loc 1 1365 7 view .LVU1245
 3501              	.LBE42:
 3502              	.LBE43:
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3503              		.loc 1 1566 5 is_stmt 1 view .LVU1246
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3504              		.loc 1 1566 8 is_stmt 0 view .LVU1247
 3505 010c 25B9     		cbnz	r5, .L339
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3506              		.loc 1 1566 24 view .LVU1248
 3507 010e 3846     		mov	r0, r7
 3508              	.LVL383:
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3509              		.loc 1 1566 24 view .LVU1249
 3510 0110 FFF7FEFF 		bl	sum_sfn
 3511              	.LVL384:
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3512              		.loc 1 1566 14 view .LVU1250
 3513 0114 4045     		cmp	r0, r8
 3514 0116 EED0     		beq	.L327
 3515              	.L339:
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3516              		.loc 1 1567 5 is_stmt 1 view .LVU1251
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3517              		.loc 1 1567 13 is_stmt 0 view .LVU1252
 3518 0118 D6F81832 		ldr	r3, [r6, #536]
 3519 011c DC7A     		ldrb	r4, [r3, #11]	@ zero_extendqisi2
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3520              		.loc 1 1567 8 view .LVU1253
 3521 011e 14F00104 		ands	r4, r4, #1
 3522 0122 94D1     		bne	.L340
 3523 0124 07F10B00 		add	r0, r7, #11
 3524              	.LVL385:
 3525              	.L341:
 3526              	.LBB44:
 3527              	.LBB45:
 610:source\fatfs/ff.c **** 	return r;
 3528              		.loc 1 610 42 is_stmt 1 view .LVU1254
 610:source\fatfs/ff.c **** 	return r;
 3529              		.loc 1 610 8 view .LVU1255
 610:source\fatfs/ff.c **** 	return r;
 3530              		.loc 1 610 8 is_stmt 0 view .LVU1256
 3531 0128 8742     		cmp	r7, r0
 3532 012a E4D0     		beq	.L327
 3533              	.LVL386:
 610:source\fatfs/ff.c **** 	return r;
 3534              		.loc 1 610 15 view .LVU1257
 3535 012c 17F8011B 		ldrb	r1, [r7], #1	@ zero_extendqisi2
 3536              	.LVL387:
 610:source\fatfs/ff.c **** 	return r;
 3537              		.loc 1 610 15 view .LVU1258
 3538 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3539              	.LVL388:
 610:source\fatfs/ff.c **** 	return r;
 3540              		.loc 1 610 15 view .LVU1259
 3541 0134 9142     		cmp	r1, r2
 3542 0136 F7D0     		beq	.L341
 3543 0138 89E7     		b	.L340
 3544              	.LVL389:
 3545              	.L343:
 610:source\fatfs/ff.c **** 	return r;
 3546              		.loc 1 610 15 view .LVU1260
 3547              	.LBE45:
 3548              	.LBE44:
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3549              		.loc 1 1549 21 view .LVU1261
 3550 013a 0424     		movs	r4, #4
 3551 013c DBE7     		b	.L327
 3552              	.L372:
 3553 013e 00BF     		.align	2
 3554              	.L371:
 3555 0140 0D000000 		.word	.LANCHOR3+13
 3556 0144 00000000 		.word	.LANCHOR3
 3557              	.LBE46:
 3558              	.LBE47:
 3559              		.cfi_endproc
 3560              	.LFE158:
 3562              		.section	.rodata.follow_path.str1.1,"aMS",%progbits,1
 3563              	.LC0:
 3564 0000 222A3A3C 		.ascii	"\"*:<>?|\177\000"
 3564      3E3F7C7F 
 3564      00
 3565              	.LC1:
 3566 0009 2B2C3B3D 		.ascii	"+,;=[]\000"
 3566      5B5D00
 3567              		.section	.text.follow_path,"ax",%progbits
 3568              		.align	1
 3569              		.syntax unified
 3570              		.thumb
 3571              		.thumb_func
 3573              	follow_path:
 3574              	.LVL390:
 3575              	.LFB164:
2129:source\fatfs/ff.c **** 	FRESULT res;
 3576              		.loc 1 2129 1 is_stmt 1 view -0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 8
 3579              		@ frame_needed = 0, uses_anonymous_args = 0
2130:source\fatfs/ff.c **** 	BYTE *dir, ns;
 3580              		.loc 1 2130 2 view .LVU1263
2131:source\fatfs/ff.c **** 
 3581              		.loc 1 2131 2 view .LVU1264
2141:source\fatfs/ff.c **** 		path++;
 3582              		.loc 1 2141 2 view .LVU1265
2129:source\fatfs/ff.c **** 	FRESULT res;
 3583              		.loc 1 2129 1 is_stmt 0 view .LVU1266
 3584 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3585              		.cfi_def_cfa_offset 48
 3586              		.cfi_offset 4, -36
 3587              		.cfi_offset 5, -32
 3588              		.cfi_offset 6, -28
 3589              		.cfi_offset 7, -24
 3590              		.cfi_offset 8, -20
 3591              		.cfi_offset 9, -16
 3592              		.cfi_offset 10, -12
 3593              		.cfi_offset 11, -8
 3594              		.cfi_offset 14, -4
2141:source\fatfs/ff.c **** 		path++;
 3595              		.loc 1 2141 6 view .LVU1267
 3596 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
2141:source\fatfs/ff.c **** 		path++;
 3597              		.loc 1 2141 5 view .LVU1268
 3598 0006 2F2B     		cmp	r3, #47
2129:source\fatfs/ff.c **** 	FRESULT res;
 3599              		.loc 1 2129 1 view .LVU1269
 3600 0008 0746     		mov	r7, r0
 3601 000a 8846     		mov	r8, r1
2141:source\fatfs/ff.c **** 		path++;
 3602              		.loc 1 2141 5 view .LVU1270
 3603 000c 01D0     		beq	.L374
2141:source\fatfs/ff.c **** 		path++;
 3604              		.loc 1 2141 19 discriminator 1 view .LVU1271
 3605 000e 5C2B     		cmp	r3, #92
 3606 0010 01D1     		bne	.L375
 3607              	.L374:
2142:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
 3608              		.loc 1 2142 3 is_stmt 1 view .LVU1272
2142:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
 3609              		.loc 1 2142 7 is_stmt 0 view .LVU1273
 3610 0012 08F10108 		add	r8, r8, #1
 3611              	.LVL391:
 3612              	.L375:
2143:source\fatfs/ff.c **** #endif
 3613              		.loc 1 2143 2 is_stmt 1 view .LVU1274
2143:source\fatfs/ff.c **** #endif
 3614              		.loc 1 2143 13 is_stmt 0 view .LVU1275
 3615 0016 0023     		movs	r3, #0
 3616 0018 C7F80832 		str	r3, [r7, #520]
2146:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
 3617              		.loc 1 2146 2 is_stmt 1 view .LVU1276
2146:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
 3618              		.loc 1 2146 5 is_stmt 0 view .LVU1277
 3619 001c 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 3620 0020 1F2B     		cmp	r3, #31
 3621 0022 00F2E980 		bhi	.L467
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3622              		.loc 1 2147 3 is_stmt 1 view .LVU1278
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3623              		.loc 1 2147 9 is_stmt 0 view .LVU1279
 3624 0026 0021     		movs	r1, #0
 3625 0028 3846     		mov	r0, r7
 3626              	.LVL392:
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3627              		.loc 1 2147 9 view .LVU1280
 3628 002a FFF7FEFF 		bl	dir_sdi
 3629              	.LVL393:
2148:source\fatfs/ff.c **** 	} else {								/* Follow path */
 3630              		.loc 1 2148 3 is_stmt 1 view .LVU1281
2148:source\fatfs/ff.c **** 	} else {								/* Follow path */
 3631              		.loc 1 2148 11 is_stmt 0 view .LVU1282
 3632 002e 0023     		movs	r3, #0
 3633 0030 C7F81432 		str	r3, [r7, #532]
 3634              	.LVL394:
 3635              	.L430:
2177:source\fatfs/ff.c **** 
 3636              		.loc 1 2177 1 view .LVU1283
 3637 0034 03B0     		add	sp, sp, #12
 3638              		.cfi_remember_state
 3639              		.cfi_def_cfa_offset 36
 3640              		@ sp needed
 3641 0036 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3642              	.LVL395:
 3643              	.L425:
 3644              		.cfi_restore_state
 3645              	.LBB54:
 3646              	.LBB55:
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 3647              		.loc 1 1929 11 view .LVU1284
 3648 003a 4646     		mov	r6, r8
 3649              	.LVL396:
 3650              	.L381:
1943:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 3651              		.loc 1 1943 3 is_stmt 1 view .LVU1285
1943:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 3652              		.loc 1 1943 7 is_stmt 0 view .LVU1286
 3653 003c 0121     		movs	r1, #1
 3654 003e FFF7FEFF 		bl	ff_convert
 3655              	.LVL397:
1944:source\fatfs/ff.c **** #endif
 3656              		.loc 1 1944 3 is_stmt 1 view .LVU1287
1944:source\fatfs/ff.c **** #endif
 3657              		.loc 1 1944 6 is_stmt 0 view .LVU1288
 3658 0042 0028     		cmp	r0, #0
 3659 0044 00F00B81 		beq	.L380
1946:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 3660              		.loc 1 1946 3 is_stmt 1 view .LVU1289
1946:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 3661              		.loc 1 1946 6 is_stmt 0 view .LVU1290
 3662 0048 7F28     		cmp	r0, #127
 3663 004a 06D8     		bhi	.L382
 3664 004c 9349     		ldr	r1, .L488
 3665              	.L383:
 3666              	.LVL398:
 3667              	.LBB56:
 3668              	.LBB57:
 617:source\fatfs/ff.c **** 	return *str;
 3669              		.loc 1 617 8 is_stmt 1 view .LVU1291
 617:source\fatfs/ff.c **** 	return *str;
 3670              		.loc 1 617 9 is_stmt 0 view .LVU1292
 3671 004e 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 3672              	.LVL399:
 617:source\fatfs/ff.c **** 	return *str;
 3673              		.loc 1 617 8 view .LVU1293
 3674 0052 12B1     		cbz	r2, .L382
 617:source\fatfs/ff.c **** 	return *str;
 3675              		.loc 1 617 14 view .LVU1294
 3676 0054 8242     		cmp	r2, r0
 3677 0056 FAD1     		bne	.L383
 3678 0058 01E1     		b	.L380
 3679              	.LVL400:
 3680              	.L382:
 617:source\fatfs/ff.c **** 	return *str;
 3681              		.loc 1 617 14 view .LVU1295
 3682              	.LBE57:
 3683              	.LBE56:
1948:source\fatfs/ff.c **** 	}
 3684              		.loc 1 1948 3 is_stmt 1 view .LVU1296
1948:source\fatfs/ff.c **** 	}
 3685              		.loc 1 1948 13 is_stmt 0 view .LVU1297
 3686 005a 2BF81500 		strh	r0, [fp, r5, lsl #1]	@ movhi
1928:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
 3687              		.loc 1 1928 8 is_stmt 1 view .LVU1298
 3688 005e 0135     		adds	r5, r5, #1
 3689              	.LVL401:
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 3690              		.loc 1 1929 5 is_stmt 0 view .LVU1299
 3691 0060 D7E0     		b	.L384
 3692              	.LVL402:
 3693              	.L379:
1950:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3694              		.loc 1 1950 2 is_stmt 1 view .LVU1300
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3695              		.loc 1 1951 5 is_stmt 0 view .LVU1301
 3696 0062 2028     		cmp	r0, #32
1950:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3697              		.loc 1 1950 10 view .LVU1302
 3698 0064 A044     		add	r8, r8, r4
 3699              	.LVL403:
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3700              		.loc 1 1951 2 is_stmt 1 view .LVU1303
 3701 0066 ABF10206 		sub	r6, fp, #2
 3702              	.LVL404:
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3703              		.loc 1 1951 5 is_stmt 0 view .LVU1304
 3704 006a 34BF     		ite	cc
 3705 006c 0424     		movcc	r4, #4
 3706              	.LVL405:
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3707              		.loc 1 1951 5 view .LVU1305
 3708 006e 0024     		movcs	r4, #0
 3709              	.LVL406:
1962:source\fatfs/ff.c **** 		w = lfn[di - 1];
 3710              		.loc 1 1962 2 is_stmt 1 view .LVU1306
 3711              	.L386:
1962:source\fatfs/ff.c **** 		w = lfn[di - 1];
 3712              		.loc 1 1962 8 view .LVU1307
 3713 0070 002D     		cmp	r5, #0
 3714 0072 00F0F480 		beq	.L380
1963:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
 3715              		.loc 1 1963 3 view .LVU1308
1963:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
 3716              		.loc 1 1963 5 is_stmt 0 view .LVU1309
 3717 0076 36F81520 		ldrh	r2, [r6, r5, lsl #1]
 3718              	.LVL407:
1964:source\fatfs/ff.c **** 		di--;
 3719              		.loc 1 1964 3 is_stmt 1 view .LVU1310
1964:source\fatfs/ff.c **** 		di--;
 3720              		.loc 1 1964 6 is_stmt 0 view .LVU1311
 3721 007a 202A     		cmp	r2, #32
 3722 007c 02D0     		beq	.L387
1964:source\fatfs/ff.c **** 		di--;
 3723              		.loc 1 1964 16 view .LVU1312
 3724 007e 2E2A     		cmp	r2, #46
 3725 0080 40F0F180 		bne	.L388
 3726              	.L387:
1965:source\fatfs/ff.c **** 	}
 3727              		.loc 1 1965 3 is_stmt 1 view .LVU1313
1965:source\fatfs/ff.c **** 	}
 3728              		.loc 1 1965 5 is_stmt 0 view .LVU1314
 3729 0084 013D     		subs	r5, r5, #1
 3730              	.LVL408:
1965:source\fatfs/ff.c **** 	}
 3731              		.loc 1 1965 5 view .LVU1315
 3732 0086 F3E7     		b	.L386
 3733              	.LVL409:
 3734              	.L390:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3735              		.loc 1 1973 55 is_stmt 1 view .LVU1316
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3736              		.loc 1 1973 49 view .LVU1317
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3737              		.loc 1 1973 51 is_stmt 0 view .LVU1318
 3738 0088 0131     		adds	r1, r1, #1
 3739              	.LVL410:
 3740              	.L422:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3741              		.loc 1 1973 15 is_stmt 1 view .LVU1319
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3742              		.loc 1 1973 18 is_stmt 0 view .LVU1320
 3743 008a 3BF81120 		ldrh	r2, [fp, r1, lsl #1]
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3744              		.loc 1 1973 2 view .LVU1321
 3745 008e 202A     		cmp	r2, #32
 3746 0090 FAD0     		beq	.L390
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3747              		.loc 1 1973 30 view .LVU1322
 3748 0092 2E2A     		cmp	r2, #46
 3749 0094 F8D0     		beq	.L390
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3750              		.loc 1 1974 2 is_stmt 1 view .LVU1323
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3751              		.loc 1 1974 5 is_stmt 0 view .LVU1324
 3752 0096 09B1     		cbz	r1, .L392
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3753              		.loc 1 1974 10 is_stmt 1 view .LVU1325
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3754              		.loc 1 1974 13 is_stmt 0 view .LVU1326
 3755 0098 44F00304 		orr	r4, r4, #3
 3756              	.LVL411:
1975:source\fatfs/ff.c **** 
 3757              		.loc 1 1975 8 is_stmt 1 view .LVU1327
 3758              	.L392:
1975:source\fatfs/ff.c **** 
 3759              		.loc 1 1975 12 is_stmt 0 view .LVU1328
 3760 009c 36F81520 		ldrh	r2, [r6, r5, lsl #1]
 3761 00a0 2E2A     		cmp	r2, #46
 3762 00a2 01D0     		beq	.L393
1975:source\fatfs/ff.c **** 
 3763              		.loc 1 1975 35 is_stmt 1 view .LVU1329
 3764              	.LVL412:
1975:source\fatfs/ff.c **** 
 3765              		.loc 1 1975 8 view .LVU1330
 3766 00a4 013D     		subs	r5, r5, #1
 3767              	.LVL413:
1975:source\fatfs/ff.c **** 
 3768              		.loc 1 1975 8 is_stmt 0 view .LVU1331
 3769 00a6 F9D1     		bne	.L392
 3770              	.L393:
2007:source\fatfs/ff.c **** 			}
 3771              		.loc 1 2007 5 view .LVU1332
 3772 00a8 4FF00009 		mov	r9, #0
 3773 00ac 4FF0080A 		mov	r10, #8
 3774 00b0 4E46     		mov	r6, r9
 3775              	.LVL414:
 3776              	.L394:
1978:source\fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
 3777              		.loc 1 1978 2 is_stmt 1 view .LVU1333
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3778              		.loc 1 1979 3 view .LVU1334
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3779              		.loc 1 1979 5 is_stmt 0 view .LVU1335
 3780 00b2 3BF81100 		ldrh	r0, [fp, r1, lsl #1]
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3781              		.loc 1 1979 13 view .LVU1336
 3782 00b6 4A1C     		adds	r2, r1, #1
 3783              	.LVL415:
1980:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 3784              		.loc 1 1980 3 is_stmt 1 view .LVU1337
1980:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 3785              		.loc 1 1980 6 is_stmt 0 view .LVU1338
 3786 00b8 C0B1     		cbz	r0, .L396
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3787              		.loc 1 1981 3 is_stmt 1 view .LVU1339
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3788              		.loc 1 1981 6 is_stmt 0 view .LVU1340
 3789 00ba 2028     		cmp	r0, #32
 3790 00bc 03D0     		beq	.L397
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3791              		.loc 1 1981 16 view .LVU1341
 3792 00be 2E28     		cmp	r0, #46
 3793 00c0 05D1     		bne	.L398
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3794              		.loc 1 1981 29 view .LVU1342
 3795 00c2 9542     		cmp	r5, r2
 3796 00c4 07D0     		beq	.L421
 3797              	.L397:
1982:source\fatfs/ff.c **** 		}
 3798              		.loc 1 1982 4 is_stmt 1 view .LVU1343
1982:source\fatfs/ff.c **** 		}
 3799              		.loc 1 1982 7 is_stmt 0 view .LVU1344
 3800 00c6 44F00304 		orr	r4, r4, #3
 3801              	.LVL416:
1982:source\fatfs/ff.c **** 		}
 3802              		.loc 1 1982 28 is_stmt 1 view .LVU1345
 3803              	.L400:
2007:source\fatfs/ff.c **** 			}
 3804              		.loc 1 2007 5 is_stmt 0 view .LVU1346
 3805 00ca 1146     		mov	r1, r2
 3806 00cc F1E7     		b	.L394
 3807              	.LVL417:
 3808              	.L398:
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3809              		.loc 1 1985 3 is_stmt 1 view .LVU1347
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3810              		.loc 1 1985 6 is_stmt 0 view .LVU1348
 3811 00ce D145     		cmp	r9, r10
 3812 00d0 05D2     		bcs	.L401
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3813              		.loc 1 1985 15 view .LVU1349
 3814 00d2 9542     		cmp	r5, r2
 3815 00d4 4CD1     		bne	.L485
 3816              	.L421:
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3817              		.loc 1 1986 4 is_stmt 1 view .LVU1350
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3818              		.loc 1 1986 7 is_stmt 0 view .LVU1351
 3819 00d6 BAF10B0F 		cmp	r10, #11
 3820 00da 41D1     		bne	.L405
 3821 00dc 02E0     		b	.L420
 3822              	.L401:
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3823              		.loc 1 1986 4 is_stmt 1 view .LVU1352
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3824              		.loc 1 1986 7 is_stmt 0 view .LVU1353
 3825 00de BAF10B0F 		cmp	r10, #11
 3826 00e2 38D1     		bne	.L404
 3827              	.L420:
1987:source\fatfs/ff.c **** 			}
 3828              		.loc 1 1987 5 is_stmt 1 view .LVU1354
1987:source\fatfs/ff.c **** 			}
 3829              		.loc 1 1987 8 is_stmt 0 view .LVU1355
 3830 00e4 44F00304 		orr	r4, r4, #3
 3831              	.LVL418:
1987:source\fatfs/ff.c **** 			}
 3832              		.loc 1 1987 29 is_stmt 1 view .LVU1356
1987:source\fatfs/ff.c **** 			}
 3833              		.loc 1 1987 5 is_stmt 0 view .LVU1357
 3834 00e8 4FF00B0A 		mov	r10, #11
 3835              	.LVL419:
 3836              	.L396:
2026:source\fatfs/ff.c **** 
 3837              		.loc 1 2026 2 is_stmt 1 view .LVU1358
2026:source\fatfs/ff.c **** 
 3838              		.loc 1 2026 8 is_stmt 0 view .LVU1359
 3839 00ec D7F81832 		ldr	r3, [r7, #536]
2026:source\fatfs/ff.c **** 
 3840              		.loc 1 2026 5 view .LVU1360
 3841 00f0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3842              	.LVL420:
2026:source\fatfs/ff.c **** 
 3843              		.loc 1 2026 5 view .LVU1361
 3844 00f2 E52A     		cmp	r2, #229
2026:source\fatfs/ff.c **** 
 3845              		.loc 1 2026 25 is_stmt 1 view .LVU1362
2026:source\fatfs/ff.c **** 
 3846              		.loc 1 2026 35 is_stmt 0 view .LVU1363
 3847 00f4 04BF     		itt	eq
 3848 00f6 0522     		moveq	r2, #5
 3849 00f8 1A70     		strbeq	r2, [r3]
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3850              		.loc 1 2028 2 is_stmt 1 view .LVU1364
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3851              		.loc 1 2028 5 is_stmt 0 view .LVU1365
 3852 00fa BAF1080F 		cmp	r10, #8
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3853              		.loc 1 2028 15 is_stmt 1 view .LVU1366
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3854              		.loc 1 2028 17 is_stmt 0 view .LVU1367
 3855 00fe 04BF     		itt	eq
 3856 0100 B600     		lsleq	r6, r6, #2
 3857              	.LVL421:
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3858              		.loc 1 2028 17 view .LVU1368
 3859 0102 F6B2     		uxtbeq	r6, r6
 3860              	.LVL422:
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3861              		.loc 1 2029 2 is_stmt 1 view .LVU1369
 3862 0104 06F00C03 		and	r3, r6, #12
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3863              		.loc 1 2029 5 is_stmt 0 view .LVU1370
 3864 0108 0C2B     		cmp	r3, #12
 3865 010a 03D0     		beq	.L415
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3866              		.loc 1 2029 25 view .LVU1371
 3867 010c 06F00302 		and	r2, r6, #3
 3868 0110 032A     		cmp	r2, #3
 3869 0112 01D1     		bne	.L416
 3870              	.L415:
2030:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 3871              		.loc 1 2030 3 is_stmt 1 view .LVU1372
2030:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 3872              		.loc 1 2030 6 is_stmt 0 view .LVU1373
 3873 0114 44F00204 		orr	r4, r4, #2
 3874              	.LVL423:
 3875              	.L416:
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3876              		.loc 1 2031 2 is_stmt 1 view .LVU1374
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3877              		.loc 1 2031 5 is_stmt 0 view .LVU1375
 3878 0118 A107     		lsls	r1, r4, #30
 3879              	.LVL424:
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3880              		.loc 1 2031 5 view .LVU1376
 3881 011a 09D4     		bmi	.L417
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3882              		.loc 1 2032 3 is_stmt 1 view .LVU1377
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3883              		.loc 1 2032 6 is_stmt 0 view .LVU1378
 3884 011c 06F00306 		and	r6, r6, #3
 3885              	.LVL425:
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3886              		.loc 1 2032 6 view .LVU1379
 3887 0120 012E     		cmp	r6, #1
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3888              		.loc 1 2032 27 is_stmt 1 view .LVU1380
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3889              		.loc 1 2032 30 is_stmt 0 view .LVU1381
 3890 0122 08BF     		it	eq
 3891 0124 44F01004 		orreq	r4, r4, #16
 3892              	.LVL426:
2033:source\fatfs/ff.c **** 	}
 3893              		.loc 1 2033 3 is_stmt 1 view .LVU1382
2033:source\fatfs/ff.c **** 	}
 3894              		.loc 1 2033 6 is_stmt 0 view .LVU1383
 3895 0128 042B     		cmp	r3, #4
2033:source\fatfs/ff.c **** 	}
 3896              		.loc 1 2033 27 is_stmt 1 view .LVU1384
2033:source\fatfs/ff.c **** 	}
 3897              		.loc 1 2033 30 is_stmt 0 view .LVU1385
 3898 012a 08BF     		it	eq
 3899 012c 44F00804 		orreq	r4, r4, #8
 3900              	.LVL427:
 3901              	.L417:
2036:source\fatfs/ff.c **** 
 3902              		.loc 1 2036 2 is_stmt 1 view .LVU1386
2036:source\fatfs/ff.c **** 
 3903              		.loc 1 2036 4 is_stmt 0 view .LVU1387
 3904 0130 D7F81832 		ldr	r3, [r7, #536]
 3905              	.LBE55:
 3906              	.LBE54:
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 3907              		.loc 1 2153 10 view .LVU1388
 3908 0134 3846     		mov	r0, r7
 3909              	.LVL428:
 3910              	.LBB66:
 3911              	.LBB62:
2036:source\fatfs/ff.c **** 
 3912              		.loc 1 2036 17 view .LVU1389
 3913 0136 DC72     		strb	r4, [r3, #11]
2038:source\fatfs/ff.c **** 
 3914              		.loc 1 2038 2 is_stmt 1 view .LVU1390
 3915              	.LVL429:
2038:source\fatfs/ff.c **** 
 3916              		.loc 1 2038 2 is_stmt 0 view .LVU1391
 3917              	.LBE62:
 3918              	.LBE66:
2152:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
 3919              		.loc 1 2152 4 is_stmt 1 view .LVU1392
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 3920              		.loc 1 2153 4 view .LVU1393
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 3921              		.loc 1 2153 10 is_stmt 0 view .LVU1394
 3922 0138 FFF7FEFF 		bl	dir_find
 3923              	.LVL430:
2154:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3924              		.loc 1 2154 4 is_stmt 1 view .LVU1395
2154:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3925              		.loc 1 2154 7 is_stmt 0 view .LVU1396
 3926 013c D7F81832 		ldr	r3, [r7, #536]
 3927 0140 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3928              	.LVL431:
2155:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3929              		.loc 1 2155 4 is_stmt 1 view .LVU1397
2155:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3930              		.loc 1 2155 7 is_stmt 0 view .LVU1398
 3931 0142 0028     		cmp	r0, #0
 3932 0144 48D0     		beq	.L419
2156:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 3933              		.loc 1 2156 5 is_stmt 1 view .LVU1399
2156:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 3934              		.loc 1 2156 8 is_stmt 0 view .LVU1400
 3935 0146 0428     		cmp	r0, #4
 3936 0148 7FF474AF 		bne	.L430
2157:source\fatfs/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 3937              		.loc 1 2157 6 is_stmt 1 view .LVU1401
2162:source\fatfs/ff.c **** 					}
 3938              		.loc 1 2162 7 view .LVU1402
2162:source\fatfs/ff.c **** 					}
 3939              		.loc 1 2162 32 is_stmt 0 view .LVU1403
 3940 014c 13F0040F 		tst	r3, #4
 3941 0150 08BF     		it	eq
 3942 0152 0520     		moveq	r0, #5
 3943              	.LVL432:
2162:source\fatfs/ff.c **** 					}
 3944              		.loc 1 2162 32 view .LVU1404
 3945 0154 6EE7     		b	.L430
 3946              	.LVL433:
 3947              	.L404:
 3948              	.LBB67:
 3949              	.LBB63:
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 3950              		.loc 1 1989 4 is_stmt 1 view .LVU1405
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 3951              		.loc 1 1989 7 is_stmt 0 view .LVU1406
 3952 0156 9542     		cmp	r5, r2
 3953 0158 02D0     		beq	.L405
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 3954              		.loc 1 1989 18 is_stmt 1 view .LVU1407
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 3955              		.loc 1 1989 21 is_stmt 0 view .LVU1408
 3956 015a 44F00304 		orr	r4, r4, #3
 3957              	.LVL434:
1990:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 3958              		.loc 1 1990 4 is_stmt 1 view .LVU1409
1990:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 3959              		.loc 1 1990 7 is_stmt 0 view .LVU1410
 3960 015e C5D3     		bcc	.L396
 3961              	.L405:
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 3962              		.loc 1 1991 4 is_stmt 1 view .LVU1411
 3963              	.LVL435:
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 3964              		.loc 1 1991 13 view .LVU1412
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 3965              		.loc 1 1991 20 view .LVU1413
1992:source\fatfs/ff.c **** 		}
 3966              		.loc 1 1992 4 view .LVU1414
1992:source\fatfs/ff.c **** 		}
 3967              		.loc 1 1992 6 is_stmt 0 view .LVU1415
 3968 0160 B600     		lsls	r6, r6, #2
 3969              	.LVL436:
1992:source\fatfs/ff.c **** 		}
 3970              		.loc 1 1992 6 view .LVU1416
 3971 0162 F6B2     		uxtb	r6, r6
 3972              	.LVL437:
1992:source\fatfs/ff.c **** 		}
 3973              		.loc 1 1992 13 is_stmt 1 view .LVU1417
1992:source\fatfs/ff.c **** 		}
 3974              		.loc 1 1992 4 is_stmt 0 view .LVU1418
 3975 0164 2A46     		mov	r2, r5
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 3976              		.loc 1 1991 23 view .LVU1419
 3977 0166 4FF00B0A 		mov	r10, #11
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 3978              		.loc 1 1991 15 view .LVU1420
 3979 016a 4FF00809 		mov	r9, #8
1992:source\fatfs/ff.c **** 		}
 3980              		.loc 1 1992 4 view .LVU1421
 3981 016e ACE7     		b	.L400
 3982              	.LVL438:
 3983              	.L485:
1995:source\fatfs/ff.c **** #ifdef _EXCVT
 3984              		.loc 1 1995 3 is_stmt 1 view .LVU1422
1995:source\fatfs/ff.c **** #ifdef _EXCVT
 3985              		.loc 1 1995 6 is_stmt 0 view .LVU1423
 3986 0170 7F28     		cmp	r0, #127
 3987 0172 23D9     		bls	.L406
 3988 0174 0192     		str	r2, [sp, #4]
2000:source\fatfs/ff.c **** #endif
 3989              		.loc 1 2000 4 is_stmt 1 view .LVU1424
2000:source\fatfs/ff.c **** #endif
 3990              		.loc 1 2000 8 is_stmt 0 view .LVU1425
 3991 0176 FFF7FEFF 		bl	ff_wtoupper
 3992              	.LVL439:
2000:source\fatfs/ff.c **** #endif
 3993              		.loc 1 2000 8 view .LVU1426
 3994 017a 0021     		movs	r1, #0
 3995 017c FFF7FEFF 		bl	ff_convert
 3996              	.LVL440:
2002:source\fatfs/ff.c **** 		}
 3997              		.loc 1 2002 4 is_stmt 1 view .LVU1427
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 3998              		.loc 1 2005 6 is_stmt 0 view .LVU1428
 3999 0180 FF28     		cmp	r0, #255
 4000 0182 019A     		ldr	r2, [sp, #4]
2002:source\fatfs/ff.c **** 		}
 4001              		.loc 1 2002 7 view .LVU1429
 4002 0184 44F0020C 		orr	ip, r4, #2
 4003              	.LVL441:
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 4004              		.loc 1 2005 3 is_stmt 1 view .LVU1430
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 4005              		.loc 1 2005 6 is_stmt 0 view .LVU1431
 4006 0188 16D9     		bls	.L407
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4007              		.loc 1 2006 4 is_stmt 1 view .LVU1432
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4008              		.loc 1 2006 16 is_stmt 0 view .LVU1433
 4009 018a 0AF1FF31 		add	r1, r10, #-1
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4010              		.loc 1 2006 7 view .LVU1434
 4011 018e 8945     		cmp	r9, r1
 4012 0190 03D3     		bcc	.L408
2007:source\fatfs/ff.c **** 			}
 4013              		.loc 1 2007 5 is_stmt 1 view .LVU1435
2007:source\fatfs/ff.c **** 			}
 4014              		.loc 1 2007 8 is_stmt 0 view .LVU1436
 4015 0192 44F00304 		orr	r4, r4, #3
 4016              	.LVL442:
2007:source\fatfs/ff.c **** 			}
 4017              		.loc 1 2007 29 is_stmt 1 view .LVU1437
2007:source\fatfs/ff.c **** 			}
 4018              		.loc 1 2007 37 view .LVU1438
2007:source\fatfs/ff.c **** 			}
 4019              		.loc 1 2007 5 is_stmt 0 view .LVU1439
 4020 0196 D146     		mov	r9, r10
 4021 0198 97E7     		b	.L400
 4022              	.LVL443:
 4023              	.L408:
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4024              		.loc 1 2009 4 is_stmt 1 view .LVU1440
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4025              		.loc 1 2009 16 is_stmt 0 view .LVU1441
 4026 019a D7F81812 		ldr	r1, [r7, #536]
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4027              		.loc 1 2009 18 view .LVU1442
 4028 019e 040A     		lsrs	r4, r0, #8
 4029 01a0 01F80940 		strb	r4, [r1, r9]
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4030              		.loc 1 2009 12 view .LVU1443
 4031 01a4 09F10109 		add	r9, r9, #1
 4032              	.LVL444:
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4033              		.loc 1 2009 12 view .LVU1444
 4034 01a8 6446     		mov	r4, ip
 4035              	.LVL445:
 4036              	.L409:
2023:source\fatfs/ff.c **** 	}
 4037              		.loc 1 2023 3 is_stmt 1 view .LVU1445
2023:source\fatfs/ff.c **** 	}
 4038              		.loc 1 2023 15 is_stmt 0 view .LVU1446
 4039 01aa D7F81812 		ldr	r1, [r7, #536]
2023:source\fatfs/ff.c **** 	}
 4040              		.loc 1 2023 17 view .LVU1447
 4041 01ae 01F80900 		strb	r0, [r1, r9]
2023:source\fatfs/ff.c **** 	}
 4042              		.loc 1 2023 11 view .LVU1448
 4043 01b2 09F10109 		add	r9, r9, #1
 4044              	.LVL446:
2023:source\fatfs/ff.c **** 	}
 4045              		.loc 1 2023 11 view .LVU1449
 4046 01b6 88E7     		b	.L400
 4047              	.LVL447:
 4048              	.L407:
2011:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4049              		.loc 1 2011 4 is_stmt 1 view .LVU1450
2002:source\fatfs/ff.c **** 		}
 4050              		.loc 1 2002 7 is_stmt 0 view .LVU1451
 4051 01b8 6446     		mov	r4, ip
2011:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4052              		.loc 1 2011 7 view .LVU1452
 4053 01ba 30B1     		cbz	r0, .L410
 4054              	.LVL448:
 4055              	.L406:
 4056              	.LBB58:
 4057              	.LBI58:
 616:source\fatfs/ff.c **** 	while (*str && *str != chr) str++;
 4058              		.loc 1 616 5 is_stmt 1 view .LVU1453
 4059              	.LBB59:
 617:source\fatfs/ff.c **** 	return *str;
 4060              		.loc 1 617 2 view .LVU1454
 4061 01bc 384B     		ldr	r3, .L488+4
 4062              	.LVL449:
 4063              	.L412:
 617:source\fatfs/ff.c **** 	return *str;
 4064              		.loc 1 617 8 view .LVU1455
 617:source\fatfs/ff.c **** 	return *str;
 4065              		.loc 1 617 9 is_stmt 0 view .LVU1456
 4066 01be 13F8011B 		ldrb	r1, [r3], #1	@ zero_extendqisi2
 4067              	.LVL450:
 617:source\fatfs/ff.c **** 	return *str;
 4068              		.loc 1 617 8 view .LVU1457
 4069 01c2 0029     		cmp	r1, #0
 4070 01c4 5BD0     		beq	.L411
 617:source\fatfs/ff.c **** 	return *str;
 4071              		.loc 1 617 14 view .LVU1458
 4072 01c6 8142     		cmp	r1, r0
 4073 01c8 F9D1     		bne	.L412
 4074              	.LVL451:
 4075              	.L410:
 617:source\fatfs/ff.c **** 	return *str;
 4076              		.loc 1 617 14 view .LVU1459
 4077              	.LBE59:
 4078              	.LBE58:
2012:source\fatfs/ff.c **** 			} else {
 4079              		.loc 1 2012 5 is_stmt 1 view .LVU1460
2012:source\fatfs/ff.c **** 			} else {
 4080              		.loc 1 2012 14 view .LVU1461
2012:source\fatfs/ff.c **** 			} else {
 4081              		.loc 1 2012 17 is_stmt 0 view .LVU1462
 4082 01ca 44F00304 		orr	r4, r4, #3
 4083              	.LVL452:
2012:source\fatfs/ff.c **** 			} else {
 4084              		.loc 1 2012 7 view .LVU1463
 4085 01ce 5F20     		movs	r0, #95
2012:source\fatfs/ff.c **** 			} else {
 4086              		.loc 1 2012 17 view .LVU1464
 4087 01d0 EBE7     		b	.L409
 4088              	.LVL453:
 4089              	.L423:
2015:source\fatfs/ff.c **** 				} else {
 4090              		.loc 1 2015 6 is_stmt 1 view .LVU1465
2015:source\fatfs/ff.c **** 				} else {
 4091              		.loc 1 2015 8 is_stmt 0 view .LVU1466
 4092 01d2 46F00206 		orr	r6, r6, #2
 4093              	.LVL454:
2015:source\fatfs/ff.c **** 				} else {
 4094              		.loc 1 2015 8 view .LVU1467
 4095 01d6 E8E7     		b	.L409
 4096              	.LVL455:
 4097              	.L419:
2015:source\fatfs/ff.c **** 				} else {
 4098              		.loc 1 2015 8 view .LVU1468
 4099              	.LBE63:
 4100              	.LBE67:
2167:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4101              		.loc 1 2167 4 is_stmt 1 view .LVU1469
2167:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4102              		.loc 1 2167 7 is_stmt 0 view .LVU1470
 4103 01d8 5A07     		lsls	r2, r3, #29
 4104 01da 3FF52BAF 		bmi	.L430
2168:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 4105              		.loc 1 2168 4 is_stmt 1 view .LVU1471
2168:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 4106              		.loc 1 2168 8 is_stmt 0 view .LVU1472
 4107 01de D7F81412 		ldr	r1, [r7, #532]
 4108              	.LVL456:
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4109              		.loc 1 2169 4 is_stmt 1 view .LVU1473
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4110              		.loc 1 2169 7 is_stmt 0 view .LVU1474
 4111 01e2 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 4112              	.LVL457:
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4113              		.loc 1 2169 7 view .LVU1475
 4114 01e4 DB06     		lsls	r3, r3, #27
 4115 01e6 3CD5     		bpl	.L429
2172:source\fatfs/ff.c **** 		}
 4116              		.loc 1 2172 4 is_stmt 1 view .LVU1476
2172:source\fatfs/ff.c **** 		}
 4117              		.loc 1 2172 17 is_stmt 0 view .LVU1477
 4118 01e8 D7F80032 		ldr	r3, [r7, #512]
 4119 01ec 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 4120              	.LVL458:
2172:source\fatfs/ff.c **** 		}
 4121              		.loc 1 2172 17 view .LVU1478
 4122 01f0 FFF7FEFF 		bl	ld_clust.isra.0
 4123              	.LVL459:
2172:source\fatfs/ff.c **** 		}
 4124              		.loc 1 2172 15 view .LVU1479
 4125 01f4 C7F80802 		str	r0, [r7, #520]
2150:source\fatfs/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4126              		.loc 1 2150 9 is_stmt 1 view .LVU1480
 4127              	.LVL460:
 4128              	.L467:
 4129              	.LBB68:
 4130              	.LBB64:
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4131              		.loc 1 1925 18 is_stmt 0 view .LVU1481
 4132 01f8 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4133              		.loc 1 1925 2 view .LVU1482
 4134 01fc 2F2B     		cmp	r3, #47
 4135 01fe 4446     		mov	r4, r8
 4136              	.LVL461:
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4137              		.loc 1 1925 18 is_stmt 1 view .LVU1483
 4138 0200 08F10108 		add	r8, r8, #1
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4139              		.loc 1 1925 2 is_stmt 0 view .LVU1484
 4140 0204 F8D0     		beq	.L467
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4141              		.loc 1 1925 28 view .LVU1485
 4142 0206 5C2B     		cmp	r3, #92
 4143 0208 F6D0     		beq	.L467
1926:source\fatfs/ff.c **** 	si = di = 0;
 4144              		.loc 1 1926 2 is_stmt 1 view .LVU1486
1926:source\fatfs/ff.c **** 	si = di = 0;
 4145              		.loc 1 1926 6 is_stmt 0 view .LVU1487
 4146 020a 0025     		movs	r5, #0
 4147 020c D7F820B2 		ldr	fp, [r7, #544]
 4148              	.LVL462:
1927:source\fatfs/ff.c **** 	for (;;) {
 4149              		.loc 1 1927 2 is_stmt 1 view .LVU1488
1927:source\fatfs/ff.c **** 	for (;;) {
 4150              		.loc 1 1927 5 is_stmt 0 view .LVU1489
 4151 0210 2E46     		mov	r6, r5
 4152              	.LVL463:
 4153              	.L384:
1928:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
 4154              		.loc 1 1928 2 is_stmt 1 view .LVU1490
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4155              		.loc 1 1929 3 view .LVU1491
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4156              		.loc 1 1929 8 is_stmt 0 view .LVU1492
 4157 0212 A25D     		ldrb	r2, [r4, r6]	@ zero_extendqisi2
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4158              		.loc 1 1930 6 view .LVU1493
 4159 0214 1F2A     		cmp	r2, #31
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4160              		.loc 1 1929 11 view .LVU1494
 4161 0216 06F10108 		add	r8, r6, #1
 4162              	.LVL464:
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4163              		.loc 1 1929 5 view .LVU1495
 4164 021a 1046     		mov	r0, r2
 4165              	.LVL465:
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4166              		.loc 1 1930 3 is_stmt 1 view .LVU1496
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4167              		.loc 1 1930 6 is_stmt 0 view .LVU1497
 4168 021c 7FF621AF 		bls	.L379
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4169              		.loc 1 1930 15 view .LVU1498
 4170 0220 2F2A     		cmp	r2, #47
 4171 0222 3FF41EAF 		beq	.L379
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4172              		.loc 1 1930 27 view .LVU1499
 4173 0226 5C2A     		cmp	r2, #92
 4174 0228 3FF41BAF 		beq	.L379
1931:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 4175              		.loc 1 1931 3 is_stmt 1 view .LVU1500
1931:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 4176              		.loc 1 1931 6 is_stmt 0 view .LVU1501
 4177 022c FF2D     		cmp	r5, #255
 4178 022e 16D0     		beq	.L380
1934:source\fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 4179              		.loc 1 1934 3 is_stmt 1 view .LVU1502
1935:source\fatfs/ff.c **** #if _DF1S
 4180              		.loc 1 1935 3 view .LVU1503
1935:source\fatfs/ff.c **** #if _DF1S
 4181              		.loc 1 1935 7 is_stmt 0 view .LVU1504
 4182 0230 7F32     		adds	r2, r2, #127
 4183              	.LVL466:
1935:source\fatfs/ff.c **** #if _DF1S
 4184              		.loc 1 1935 6 view .LVU1505
 4185 0232 D2B2     		uxtb	r2, r2
 4186 0234 7D2A     		cmp	r2, #125
 4187 0236 3FF600AF 		bhi	.L425
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4188              		.loc 1 1937 4 is_stmt 1 view .LVU1506
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4189              		.loc 1 1937 6 is_stmt 0 view .LVU1507
 4190 023a 14F80820 		ldrb	r2, [r4, r8]	@ zero_extendqisi2
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4191              		.loc 1 1939 7 view .LVU1508
 4192 023e 22F02001 		bic	r1, r2, #32
 4193 0242 4139     		subs	r1, r1, #65
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4194              		.loc 1 1938 6 view .LVU1509
 4195 0244 02EB0020 		add	r0, r2, r0, lsl #8
 4196              	.LVL467:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4197              		.loc 1 1939 7 view .LVU1510
 4198 0248 1929     		cmp	r1, #25
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4199              		.loc 1 1937 18 view .LVU1511
 4200 024a 06F10206 		add	r6, r6, #2
 4201              	.LVL468:
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4202              		.loc 1 1938 4 is_stmt 1 view .LVU1512
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4203              		.loc 1 1938 6 is_stmt 0 view .LVU1513
 4204 024e 80B2     		uxth	r0, r0
 4205              	.LVL469:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4206              		.loc 1 1939 4 is_stmt 1 view .LVU1514
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4207              		.loc 1 1939 7 is_stmt 0 view .LVU1515
 4208 0250 7FF6F4AE 		bls	.L381
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4209              		.loc 1 1939 9 view .LVU1516
 4210 0254 7F32     		adds	r2, r2, #127
 4211              	.LVL470:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4212              		.loc 1 1939 8 view .LVU1517
 4213 0256 D2B2     		uxtb	r2, r2
 4214              	.LVL471:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4215              		.loc 1 1939 8 view .LVU1518
 4216 0258 7D2A     		cmp	r2, #125
 4217 025a 7FF6EFAE 		bls	.L381
 4218              	.LVL472:
 4219              	.L380:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4220              		.loc 1 1939 8 view .LVU1519
 4221              	.LBE64:
 4222              	.LBE68:
2162:source\fatfs/ff.c **** 					}
 4223              		.loc 1 2162 32 view .LVU1520
 4224 025e 0620     		movs	r0, #6
 4225 0260 E8E6     		b	.L430
 4226              	.LVL473:
 4227              	.L429:
2162:source\fatfs/ff.c **** 					}
 4228              		.loc 1 2162 32 view .LVU1521
 4229 0262 0520     		movs	r0, #5
 4230              	.LVL474:
2176:source\fatfs/ff.c **** }
 4231              		.loc 1 2176 2 is_stmt 1 view .LVU1522
2176:source\fatfs/ff.c **** }
 4232              		.loc 1 2176 9 is_stmt 0 view .LVU1523
 4233 0264 E6E6     		b	.L430
 4234              	.LVL475:
 4235              	.L388:
 4236              	.LBB69:
 4237              	.LBB65:
1967:source\fatfs/ff.c **** 
 4238              		.loc 1 1967 2 is_stmt 1 view .LVU1524
1969:source\fatfs/ff.c **** 
 4239              		.loc 1 1969 2 view .LVU1525
1969:source\fatfs/ff.c **** 
 4240              		.loc 1 1969 10 is_stmt 0 view .LVU1526
 4241 0266 4FF00003 		mov	r3, #0	@ movhi
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 4242              		.loc 1 1972 2 view .LVU1527
 4243 026a 2021     		movs	r1, #32
1969:source\fatfs/ff.c **** 
 4244              		.loc 1 1969 10 view .LVU1528
 4245 026c 2BF81530 		strh	r3, [fp, r5, lsl #1]	@ movhi
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 4246              		.loc 1 1972 2 is_stmt 1 view .LVU1529
 4247 0270 D7F81802 		ldr	r0, [r7, #536]
 4248 0274 0B22     		movs	r2, #11
 4249              	.LVL476:
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 4250              		.loc 1 1972 2 is_stmt 0 view .LVU1530
 4251 0276 FFF7FEFF 		bl	mem_set
 4252              	.LVL477:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4253              		.loc 1 1973 2 is_stmt 1 view .LVU1531
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4254              		.loc 1 1973 10 is_stmt 0 view .LVU1532
 4255 027a 0021     		movs	r1, #0
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 4256              		.loc 1 1973 2 view .LVU1533
 4257 027c 05E7     		b	.L422
 4258              	.LVL478:
 4259              	.L411:
 4260              	.LBB61:
 4261              	.LBB60:
 618:source\fatfs/ff.c **** }
 4262              		.loc 1 618 2 is_stmt 1 view .LVU1534
 618:source\fatfs/ff.c **** }
 4263              		.loc 1 618 2 is_stmt 0 view .LVU1535
 4264              	.LBE60:
 4265              	.LBE61:
2014:source\fatfs/ff.c **** 					b |= 2;
 4266              		.loc 1 2014 5 is_stmt 1 view .LVU1536
2014:source\fatfs/ff.c **** 					b |= 2;
 4267              		.loc 1 2014 9 is_stmt 0 view .LVU1537
 4268 027e A0F14101 		sub	r1, r0, #65
2014:source\fatfs/ff.c **** 					b |= 2;
 4269              		.loc 1 2014 8 view .LVU1538
 4270 0282 89B2     		uxth	r1, r1
 4271 0284 1929     		cmp	r1, #25
 4272 0286 A4D9     		bls	.L423
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4273              		.loc 1 2017 6 is_stmt 1 view .LVU1539
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4274              		.loc 1 2017 10 is_stmt 0 view .LVU1540
 4275 0288 A0F16101 		sub	r1, r0, #97
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4276              		.loc 1 2017 9 view .LVU1541
 4277 028c 89B2     		uxth	r1, r1
 4278 028e 1929     		cmp	r1, #25
2018:source\fatfs/ff.c **** 					}
 4279              		.loc 1 2018 7 is_stmt 1 view .LVU1542
2018:source\fatfs/ff.c **** 					}
 4280              		.loc 1 2018 17 is_stmt 0 view .LVU1543
 4281 0290 9EBF     		ittt	ls
 4282 0292 2038     		subls	r0, r0, #32
2018:source\fatfs/ff.c **** 					}
 4283              		.loc 1 2018 9 view .LVU1544
 4284 0294 46F00106 		orrls	r6, r6, #1
 4285              	.LVL479:
2018:source\fatfs/ff.c **** 					}
 4286              		.loc 1 2018 15 is_stmt 1 view .LVU1545
2018:source\fatfs/ff.c **** 					}
 4287              		.loc 1 2018 17 is_stmt 0 view .LVU1546
 4288 0298 80B2     		uxthls	r0, r0
 4289              	.LVL480:
2018:source\fatfs/ff.c **** 					}
 4290              		.loc 1 2018 17 view .LVU1547
 4291 029a 86E7     		b	.L409
 4292              	.L489:
 4293              		.align	2
 4294              	.L488:
 4295 029c 00000000 		.word	.LC0
 4296 02a0 09000000 		.word	.LC1
 4297              	.LBE65:
 4298              	.LBE69:
 4299              		.cfi_endproc
 4300              	.LFE164:
 4302              		.section	.text.dir_register,"ax",%progbits
 4303              		.align	1
 4304              		.syntax unified
 4305              		.thumb
 4306              		.thumb_func
 4308              	dir_register:
 4309              	.LVL481:
 4310              	.LFB160:
1651:source\fatfs/ff.c **** 	FRESULT res;
 4311              		.loc 1 1651 1 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 24
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
1652:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 4315              		.loc 1 1652 2 view .LVU1549
1654:source\fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
 4316              		.loc 1 1654 2 view .LVU1550
1655:source\fatfs/ff.c **** 	WCHAR *lfn;
 4317              		.loc 1 1655 2 view .LVU1551
1656:source\fatfs/ff.c **** 
 4318              		.loc 1 1656 2 view .LVU1552
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4319              		.loc 1 1659 2 view .LVU1553
1651:source\fatfs/ff.c **** 	FRESULT res;
 4320              		.loc 1 1651 1 is_stmt 0 view .LVU1554
 4321 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4322              		.cfi_def_cfa_offset 36
 4323              		.cfi_offset 4, -36
 4324              		.cfi_offset 5, -32
 4325              		.cfi_offset 6, -28
 4326              		.cfi_offset 7, -24
 4327              		.cfi_offset 8, -20
 4328              		.cfi_offset 9, -16
 4329              		.cfi_offset 10, -12
 4330              		.cfi_offset 11, -8
 4331              		.cfi_offset 14, -4
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4332              		.loc 1 1659 5 view .LVU1555
 4333 0004 D0F81862 		ldr	r6, [r0, #536]
 4334              	.LVL482:
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4335              		.loc 1 1659 15 is_stmt 1 view .LVU1556
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4336              		.loc 1 1659 19 is_stmt 0 view .LVU1557
 4337 0008 D0F82072 		ldr	r7, [r0, #544]
 4338              	.LVL483:
1660:source\fatfs/ff.c **** 
 4339              		.loc 1 1660 2 is_stmt 1 view .LVU1558
1651:source\fatfs/ff.c **** 	FRESULT res;
 4340              		.loc 1 1651 1 is_stmt 0 view .LVU1559
 4341 000c 87B0     		sub	sp, sp, #28
 4342              		.cfi_def_cfa_offset 64
1660:source\fatfs/ff.c **** 
 4343              		.loc 1 1660 2 view .LVU1560
 4344 000e 0C22     		movs	r2, #12
1651:source\fatfs/ff.c **** 	FRESULT res;
 4345              		.loc 1 1651 1 view .LVU1561
 4346 0010 0546     		mov	r5, r0
1660:source\fatfs/ff.c **** 
 4347              		.loc 1 1660 2 view .LVU1562
 4348 0012 3146     		mov	r1, r6
 4349 0014 0DEB0200 		add	r0, sp, r2
 4350              	.LVL484:
1660:source\fatfs/ff.c **** 
 4351              		.loc 1 1660 2 view .LVU1563
 4352 0018 FFF7FEFF 		bl	mem_cpy
 4353              	.LVL485:
1662:source\fatfs/ff.c **** 		return FR_INVALID_NAME;
 4354              		.loc 1 1662 2 is_stmt 1 view .LVU1564
1665:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 4355              		.loc 1 1665 2 view .LVU1565
1665:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 4356              		.loc 1 1665 5 is_stmt 0 view .LVU1566
 4357 001c 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 4358 0020 DB07     		lsls	r3, r3, #31
 4359 0022 40F19280 		bpl	.L491
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4360              		.loc 1 1666 3 is_stmt 1 view .LVU1567
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4361              		.loc 1 1666 14 is_stmt 0 view .LVU1568
 4362 0026 0023     		movs	r3, #0
 4363              	.LBB76:
 4364              	.LBB77:
1471:source\fatfs/ff.c **** 			}
 4365              		.loc 1 1471 26 view .LVU1569
 4366 0028 DFF85882 		ldr	r8, .L552
 4367              	.LBE77:
 4368              	.LBE76:
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4369              		.loc 1 1666 14 view .LVU1570
 4370 002c F372     		strb	r3, [r6, #11]
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4371              		.loc 1 1666 19 is_stmt 1 view .LVU1571
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4372              		.loc 1 1667 10 is_stmt 0 view .LVU1572
 4373 002e 4FF00109 		mov	r9, #1
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4374              		.loc 1 1666 27 view .LVU1573
 4375 0032 C5F82032 		str	r3, [r5, #544]
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4376              		.loc 1 1667 3 is_stmt 1 view .LVU1574
 4377              	.LVL486:
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4378              		.loc 1 1667 15 view .LVU1575
 4379              	.L505:
1668:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 4380              		.loc 1 1668 4 view .LVU1576
 4381              	.LBB80:
 4382              	.LBI76:
1449:source\fatfs/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
 4383              		.loc 1 1449 6 view .LVU1577
 4384              	.LBB78:
1456:source\fatfs/ff.c **** 	UINT i, j;
 4385              		.loc 1 1456 2 view .LVU1578
1457:source\fatfs/ff.c **** 	WCHAR wc;
 4386              		.loc 1 1457 2 view .LVU1579
1458:source\fatfs/ff.c **** 	DWORD sr;
 4387              		.loc 1 1458 2 view .LVU1580
1459:source\fatfs/ff.c **** 
 4388              		.loc 1 1459 2 view .LVU1581
1462:source\fatfs/ff.c **** 
 4389              		.loc 1 1462 2 view .LVU1582
 4390 0036 0B22     		movs	r2, #11
 4391 0038 03A9     		add	r1, sp, #12
 4392              	.LVL487:
1462:source\fatfs/ff.c **** 
 4393              		.loc 1 1462 2 is_stmt 0 view .LVU1583
 4394 003a 3046     		mov	r0, r6
 4395 003c FFF7FEFF 		bl	mem_cpy
 4396              	.LVL488:
1464:source\fatfs/ff.c **** 		sr = seq;
 4397              		.loc 1 1464 2 is_stmt 1 view .LVU1584
1464:source\fatfs/ff.c **** 		sr = seq;
 4398              		.loc 1 1464 5 is_stmt 0 view .LVU1585
 4399 0040 B9F1050F 		cmp	r9, #5
 4400 0044 56D9     		bls	.L525
 4401 0046 B81E     		subs	r0, r7, #2
 4402 0048 4B46     		mov	r3, r9
 4403              	.L493:
 4404              	.LVL489:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4405              		.loc 1 1466 9 is_stmt 1 view .LVU1586
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4406              		.loc 1 1466 10 is_stmt 0 view .LVU1587
 4407 004a 30F8022F 		ldrh	r2, [r0, #2]!
 4408              	.LVL490:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4409              		.loc 1 1466 9 view .LVU1588
 4410 004e 002A     		cmp	r2, #0
 4411 0050 42D1     		bne	.L526
 4412              	.LVL491:
 4413              	.L492:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4414              		.loc 1 1466 9 view .LVU1589
 4415 0052 0DF10B04 		add	r4, sp, #11
 4416 0056 0721     		movs	r1, #7
 4417              	.L497:
 4418              	.LVL492:
1479:source\fatfs/ff.c **** 		c = (seq % 16) + '0';
 4419              		.loc 1 1479 2 is_stmt 1 view .LVU1590
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4420              		.loc 1 1480 3 view .LVU1591
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4421              		.loc 1 1480 12 is_stmt 0 view .LVU1592
 4422 0058 03F00F02 		and	r2, r3, #15
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4423              		.loc 1 1480 5 view .LVU1593
 4424 005c 02F13000 		add	r0, r2, #48
 4425              	.LVL493:
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4426              		.loc 1 1481 3 is_stmt 1 view .LVU1594
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4427              		.loc 1 1481 6 is_stmt 0 view .LVU1595
 4428 0060 3928     		cmp	r0, #57
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4429              		.loc 1 1481 16 is_stmt 1 view .LVU1596
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4430              		.loc 1 1481 18 is_stmt 0 view .LVU1597
 4431 0062 88BF     		it	hi
 4432 0064 02F13700 		addhi	r0, r2, #55
 4433              	.LVL494:
1482:source\fatfs/ff.c **** 		seq /= 16;
 4434              		.loc 1 1482 3 is_stmt 1 view .LVU1598
1484:source\fatfs/ff.c **** 	ns[i] = '~';
 4435              		.loc 1 1484 2 is_stmt 0 view .LVU1599
 4436 0068 0F2B     		cmp	r3, #15
1482:source\fatfs/ff.c **** 		seq /= 16;
 4437              		.loc 1 1482 11 view .LVU1600
 4438 006a 04F80109 		strb	r0, [r4], #-1
1482:source\fatfs/ff.c **** 		seq /= 16;
 4439              		.loc 1 1482 7 view .LVU1601
 4440 006e 01F1FF32 		add	r2, r1, #-1
 4441              	.LVL495:
1483:source\fatfs/ff.c **** 	} while (seq);
 4442              		.loc 1 1483 3 is_stmt 1 view .LVU1602
1483:source\fatfs/ff.c **** 	} while (seq);
 4443              		.loc 1 1483 7 is_stmt 0 view .LVU1603
 4444 0072 4FEA1310 		lsr	r0, r3, #4
 4445              	.LVL496:
1484:source\fatfs/ff.c **** 	ns[i] = '~';
 4446              		.loc 1 1484 10 is_stmt 1 view .LVU1604
1484:source\fatfs/ff.c **** 	ns[i] = '~';
 4447              		.loc 1 1484 2 is_stmt 0 view .LVU1605
 4448 0076 3FD8     		bhi	.L527
1485:source\fatfs/ff.c **** 
 4449              		.loc 1 1485 2 is_stmt 1 view .LVU1606
1485:source\fatfs/ff.c **** 
 4450              		.loc 1 1485 8 is_stmt 0 view .LVU1607
 4451 0078 02F11803 		add	r3, r2, #24
 4452 007c 6B44     		add	r3, sp, r3
 4453 007e 7E20     		movs	r0, #126
 4454              	.LVL497:
1485:source\fatfs/ff.c **** 
 4455              		.loc 1 1485 8 view .LVU1608
 4456 0080 03F8140C 		strb	r0, [r3, #-20]
 4457              	.LVL498:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4458              		.loc 1 1488 2 is_stmt 1 view .LVU1609
1490:source\fatfs/ff.c **** 			j++;
 4459              		.loc 1 1490 15 is_stmt 0 view .LVU1610
 4460 0084 8C1E     		subs	r4, r1, #2
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4461              		.loc 1 1488 9 view .LVU1611
 4462 0086 0023     		movs	r3, #0
 4463              	.LVL499:
 4464              	.L498:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4465              		.loc 1 1488 14 is_stmt 1 view .LVU1612
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4466              		.loc 1 1488 2 is_stmt 0 view .LVU1613
 4467 0088 9A42     		cmp	r2, r3
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4468              		.loc 1 1488 26 view .LVU1614
 4469 008a 06EB0300 		add	r0, r6, r3
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4470              		.loc 1 1488 2 view .LVU1615
 4471 008e 02D9     		bls	.L500
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4472              		.loc 1 1488 26 view .LVU1616
 4473 0090 F15C     		ldrb	r1, [r6, r3]	@ zero_extendqisi2
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4474              		.loc 1 1488 20 view .LVU1617
 4475 0092 2029     		cmp	r1, #32
 4476 0094 33D1     		bne	.L501
 4477              	.L500:
 4478 0096 0346     		mov	r3, r0
 4479              	.LVL500:
 4480              	.L503:
1494:source\fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 4481              		.loc 1 1494 2 is_stmt 1 view .LVU1618
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4482              		.loc 1 1495 3 view .LVU1619
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4483              		.loc 1 1495 12 is_stmt 0 view .LVU1620
 4484 0098 072A     		cmp	r2, #7
 4485 009a 9BBF     		ittet	ls
 4486 009c 02F11801 		addls	r1, r2, #24
 4487 00a0 6944     		addls	r1, sp, r1
 4488 00a2 2021     		movhi	r1, #32
 4489 00a4 11F8141C 		ldrbls	r1, [r1, #-20]	@ zero_extendqisi2
 4490 00a8 03F8011B 		strb	r1, [r3], #1
1496:source\fatfs/ff.c **** }
 4491              		.loc 1 1496 2 view .LVU1621
 4492 00ac A3EB0601 		sub	r1, r3, r6
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4493              		.loc 1 1495 28 view .LVU1622
 4494 00b0 98BF     		it	ls
 4495 00b2 0132     		addls	r2, r2, #1
 4496              	.LVL501:
1496:source\fatfs/ff.c **** }
 4497              		.loc 1 1496 10 is_stmt 1 view .LVU1623
1496:source\fatfs/ff.c **** }
 4498              		.loc 1 1496 2 is_stmt 0 view .LVU1624
 4499 00b4 0729     		cmp	r1, #7
 4500 00b6 EFD9     		bls	.L503
 4501              	.LVL502:
1496:source\fatfs/ff.c **** }
 4502              		.loc 1 1496 2 view .LVU1625
 4503              	.LBE78:
 4504              	.LBE80:
1669:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4505              		.loc 1 1669 4 is_stmt 1 view .LVU1626
1669:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4506              		.loc 1 1669 10 is_stmt 0 view .LVU1627
 4507 00b8 2846     		mov	r0, r5
 4508 00ba FFF7FEFF 		bl	dir_find
 4509              	.LVL503:
 4510 00be 0446     		mov	r4, r0
 4511              	.LVL504:
1670:source\fatfs/ff.c **** 		}
 4512              		.loc 1 1670 4 is_stmt 1 view .LVU1628
1670:source\fatfs/ff.c **** 		}
 4513              		.loc 1 1670 7 is_stmt 0 view .LVU1629
 4514 00c0 0028     		cmp	r0, #0
 4515 00c2 3BD1     		bne	.L504
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4516              		.loc 1 1667 24 is_stmt 1 discriminator 2 view .LVU1630
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4517              		.loc 1 1667 25 is_stmt 0 discriminator 2 view .LVU1631
 4518 00c4 09F10109 		add	r9, r9, #1
 4519              	.LVL505:
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4520              		.loc 1 1667 15 is_stmt 1 discriminator 2 view .LVU1632
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4521              		.loc 1 1667 3 is_stmt 0 discriminator 2 view .LVU1633
 4522 00c8 B9F1640F 		cmp	r9, #100
 4523 00cc B3D1     		bne	.L505
 4524              	.LVL506:
 4525              	.L524:
1672:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 4526              		.loc 1 1672 24 view .LVU1634
 4527 00ce 0724     		movs	r4, #7
 4528              	.L531:
1715:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 4529              		.loc 1 1715 1 view .LVU1635
 4530 00d0 2046     		mov	r0, r4
 4531 00d2 07B0     		add	sp, sp, #28
 4532              		.cfi_remember_state
 4533              		.cfi_def_cfa_offset 36
 4534              		@ sp needed
 4535 00d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4536              	.LVL507:
 4537              	.L526:
 4538              		.cfi_restore_state
 4539              	.LBB81:
 4540              	.LBB79:
1715:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 4541              		.loc 1 1715 1 view .LVU1636
 4542 00d8 1021     		movs	r1, #16
 4543              	.LVL508:
 4544              	.L495:
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4545              		.loc 1 1469 5 is_stmt 1 view .LVU1637
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4546              		.loc 1 1469 26 is_stmt 0 view .LVU1638
 4547 00da 02F00104 		and	r4, r2, #1
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4548              		.loc 1 1469 8 view .LVU1639
 4549 00de 04EB4303 		add	r3, r4, r3, lsl #1
 4550              	.LVL509:
1470:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 4551              		.loc 1 1470 5 is_stmt 1 view .LVU1640
1471:source\fatfs/ff.c **** 			}
 4552              		.loc 1 1471 8 is_stmt 0 view .LVU1641
 4553 00e2 DC03     		lsls	r4, r3, #15
1471:source\fatfs/ff.c **** 			}
 4554              		.loc 1 1471 26 view .LVU1642
 4555 00e4 48BF     		it	mi
 4556 00e6 83EA0803 		eormi	r3, r3, r8
 4557              	.LVL510:
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4558              		.loc 1 1468 4 view .LVU1643
 4559 00ea 0139     		subs	r1, r1, #1
 4560              	.LVL511:
1470:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 4561              		.loc 1 1470 8 view .LVU1644
 4562 00ec 4FEA5202 		lsr	r2, r2, #1
 4563              	.LVL512:
1471:source\fatfs/ff.c **** 			}
 4564              		.loc 1 1471 5 is_stmt 1 view .LVU1645
1471:source\fatfs/ff.c **** 			}
 4565              		.loc 1 1471 23 view .LVU1646
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4566              		.loc 1 1468 24 view .LVU1647
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4567              		.loc 1 1468 16 view .LVU1648
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4568              		.loc 1 1468 4 is_stmt 0 view .LVU1649
 4569 00f0 F3D1     		bne	.L495
 4570 00f2 AAE7     		b	.L493
 4571              	.LVL513:
 4572              	.L525:
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4573              		.loc 1 1468 4 view .LVU1650
 4574 00f4 4B46     		mov	r3, r9
 4575 00f6 ACE7     		b	.L492
 4576              	.LVL514:
 4577              	.L527:
1482:source\fatfs/ff.c **** 		seq /= 16;
 4578              		.loc 1 1482 7 view .LVU1651
 4579 00f8 1146     		mov	r1, r2
1483:source\fatfs/ff.c **** 	} while (seq);
 4580              		.loc 1 1483 7 view .LVU1652
 4581 00fa 0346     		mov	r3, r0
 4582 00fc ACE7     		b	.L497
 4583              	.LVL515:
 4584              	.L501:
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4585              		.loc 1 1489 3 is_stmt 1 view .LVU1653
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4586              		.loc 1 1489 7 is_stmt 0 view .LVU1654
 4587 00fe 7F31     		adds	r1, r1, #127
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4588              		.loc 1 1489 6 view .LVU1655
 4589 0100 C9B2     		uxtb	r1, r1
 4590 0102 7D29     		cmp	r1, #125
 4591 0104 02D8     		bhi	.L499
1490:source\fatfs/ff.c **** 			j++;
 4592              		.loc 1 1490 4 is_stmt 1 view .LVU1656
1490:source\fatfs/ff.c **** 			j++;
 4593              		.loc 1 1490 7 is_stmt 0 view .LVU1657
 4594 0106 9C42     		cmp	r4, r3
 4595 0108 C5D0     		beq	.L500
1491:source\fatfs/ff.c **** 		}
 4596              		.loc 1 1491 5 view .LVU1658
 4597 010a 0133     		adds	r3, r3, #1
 4598              	.LVL516:
 4599              	.L499:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4600              		.loc 1 1488 38 is_stmt 1 view .LVU1659
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4601              		.loc 1 1488 39 is_stmt 0 view .LVU1660
 4602 010c 0133     		adds	r3, r3, #1
 4603              	.LVL517:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4604              		.loc 1 1488 39 view .LVU1661
 4605 010e BBE7     		b	.L498
 4606              	.LVL518:
 4607              	.L509:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4608              		.loc 1 1488 39 view .LVU1662
 4609              	.LBE79:
 4610              	.LBE81:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4611              		.loc 1 1678 28 is_stmt 1 discriminator 3 view .LVU1663
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4612              		.loc 1 1678 23 discriminator 3 view .LVU1664
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4613              		.loc 1 1678 24 is_stmt 0 discriminator 3 view .LVU1665
 4614 0110 0136     		adds	r6, r6, #1
 4615              	.LVL519:
 4616              	.L507:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4617              		.loc 1 1678 15 is_stmt 1 discriminator 1 view .LVU1666
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4618              		.loc 1 1678 3 is_stmt 0 discriminator 1 view .LVU1667
 4619 0112 37F81630 		ldrh	r3, [r7, r6, lsl #1]
 4620 0116 002B     		cmp	r3, #0
 4621 0118 FAD1     		bne	.L509
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4622              		.loc 1 1679 3 is_stmt 1 view .LVU1668
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4623              		.loc 1 1679 13 is_stmt 0 view .LVU1669
 4624 011a 1936     		adds	r6, r6, #25
 4625              	.LVL520:
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4626              		.loc 1 1679 8 view .LVU1670
 4627 011c 0D23     		movs	r3, #13
 4628 011e B6FBF3F6 		udiv	r6, r6, r3
 4629              	.LVL521:
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4630              		.loc 1 1679 8 view .LVU1671
 4631 0122 17E0     		b	.L508
 4632              	.LVL522:
 4633              	.L529:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4634              		.loc 1 1678 10 view .LVU1672
 4635 0124 0026     		movs	r6, #0
 4636              	.LVL523:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4637              		.loc 1 1678 10 view .LVU1673
 4638 0126 F4E7     		b	.L507
 4639              	.LVL524:
 4640              	.L530:
 4641              	.LBB82:
 4642              	.LBB83:
1290:source\fatfs/ff.c **** 			}
 4643              		.loc 1 1290 7 view .LVU1674
 4644 0128 0746     		mov	r7, r0
 4645              	.LVL525:
 4646              	.L512:
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4647              		.loc 1 1292 4 is_stmt 1 view .LVU1675
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4648              		.loc 1 1292 10 is_stmt 0 view .LVU1676
 4649 012a 0121     		movs	r1, #1
 4650 012c 2846     		mov	r0, r5
 4651              	.LVL526:
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4652              		.loc 1 1292 10 view .LVU1677
 4653 012e FFF7FEFF 		bl	dir_next
 4654              	.LVL527:
1293:source\fatfs/ff.c **** 	}
 4655              		.loc 1 1293 11 is_stmt 1 view .LVU1678
1293:source\fatfs/ff.c **** 	}
 4656              		.loc 1 1293 3 is_stmt 0 view .LVU1679
 4657 0132 0446     		mov	r4, r0
 4658 0134 B0B1     		cbz	r0, .L515
 4659              	.LVL528:
 4660              	.L510:
1295:source\fatfs/ff.c **** 	return res;
 4661              		.loc 1 1295 2 is_stmt 1 view .LVU1680
1295:source\fatfs/ff.c **** 	return res;
 4662              		.loc 1 1295 5 is_stmt 0 view .LVU1681
 4663 0136 042C     		cmp	r4, #4
 4664 0138 C9D0     		beq	.L524
 4665 013a C9E7     		b	.L531
 4666              	.LVL529:
 4667              	.L504:
1295:source\fatfs/ff.c **** 	return res;
 4668              		.loc 1 1295 5 view .LVU1682
 4669              	.LBE83:
 4670              	.LBE82:
1672:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 4671              		.loc 1 1672 3 is_stmt 1 view .LVU1683
1673:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 4672              		.loc 1 1673 3 view .LVU1684
1673:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 4673              		.loc 1 1673 6 is_stmt 0 view .LVU1685
 4674 013c 0428     		cmp	r0, #4
 4675 013e C7D1     		bne	.L531
1674:source\fatfs/ff.c **** 	}
 4676              		.loc 1 1674 3 is_stmt 1 view .LVU1686
1674:source\fatfs/ff.c **** 	}
 4677              		.loc 1 1674 18 is_stmt 0 view .LVU1687
 4678 0140 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
1674:source\fatfs/ff.c **** 	}
 4679              		.loc 1 1674 14 view .LVU1688
 4680 0144 F372     		strb	r3, [r6, #11]
1674:source\fatfs/ff.c **** 	}
 4681              		.loc 1 1674 28 is_stmt 1 view .LVU1689
1674:source\fatfs/ff.c **** 	}
 4682              		.loc 1 1674 36 is_stmt 0 view .LVU1690
 4683 0146 C5F82072 		str	r7, [r5, #544]
 4684              	.LVL530:
 4685              	.L491:
1677:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
 4686              		.loc 1 1677 2 is_stmt 1 view .LVU1691
1677:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
 4687              		.loc 1 1677 5 is_stmt 0 view .LVU1692
 4688 014a 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 4689 014e 9B07     		lsls	r3, r3, #30
 4690 0150 E8D4     		bmi	.L529
1681:source\fatfs/ff.c **** 	}
 4691              		.loc 1 1681 8 view .LVU1693
 4692 0152 0126     		movs	r6, #1
 4693              	.LVL531:
 4694              	.L508:
1683:source\fatfs/ff.c **** 
 4695              		.loc 1 1683 2 is_stmt 1 view .LVU1694
 4696              	.LBB85:
 4697              	.LBI82:
1272:source\fatfs/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
 4698              		.loc 1 1272 9 view .LVU1695
 4699              	.LBB84:
1277:source\fatfs/ff.c **** 	UINT n;
 4700              		.loc 1 1277 2 view .LVU1696
1278:source\fatfs/ff.c **** 
 4701              		.loc 1 1278 2 view .LVU1697
1281:source\fatfs/ff.c **** 	if (res == FR_OK) {
 4702              		.loc 1 1281 2 view .LVU1698
1281:source\fatfs/ff.c **** 	if (res == FR_OK) {
 4703              		.loc 1 1281 8 is_stmt 0 view .LVU1699
 4704 0154 0021     		movs	r1, #0
 4705 0156 2846     		mov	r0, r5
 4706 0158 FFF7FEFF 		bl	dir_sdi
 4707              	.LVL532:
1282:source\fatfs/ff.c **** 		n = 0;
 4708              		.loc 1 1282 2 is_stmt 1 view .LVU1700
1282:source\fatfs/ff.c **** 		n = 0;
 4709              		.loc 1 1282 5 is_stmt 0 view .LVU1701
 4710 015c 0446     		mov	r4, r0
 4711 015e 0028     		cmp	r0, #0
 4712 0160 E9D1     		bne	.L510
1283:source\fatfs/ff.c **** 		do {
 4713              		.loc 1 1283 5 view .LVU1702
 4714 0162 0746     		mov	r7, r0
 4715              	.LVL533:
 4716              	.L515:
1284:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
 4717              		.loc 1 1284 3 is_stmt 1 view .LVU1703
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4718              		.loc 1 1285 4 view .LVU1704
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4719              		.loc 1 1285 10 is_stmt 0 view .LVU1705
 4720 0164 D5F81012 		ldr	r1, [r5, #528]
 4721 0168 D5F80002 		ldr	r0, [r5, #512]
 4722              	.LVL534:
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4723              		.loc 1 1285 10 view .LVU1706
 4724 016c FFF7FEFF 		bl	move_window
 4725              	.LVL535:
1286:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 4726              		.loc 1 1286 4 is_stmt 1 view .LVU1707
1286:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 4727              		.loc 1 1286 7 is_stmt 0 view .LVU1708
 4728 0170 0446     		mov	r4, r0
 4729 0172 0028     		cmp	r0, #0
 4730 0174 DFD1     		bne	.L510
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4731              		.loc 1 1287 4 is_stmt 1 view .LVU1709
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4732              		.loc 1 1287 15 is_stmt 0 view .LVU1710
 4733 0176 D5F81432 		ldr	r3, [r5, #532]
 4734 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4735              		.loc 1 1287 7 view .LVU1711
 4736 017c E52B     		cmp	r3, #229
 4737 017e 01D0     		beq	.L511
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4738              		.loc 1 1287 27 view .LVU1712
 4739 0180 002B     		cmp	r3, #0
 4740 0182 D1D1     		bne	.L530
 4741              	.L511:
1288:source\fatfs/ff.c **** 			} else {
 4742              		.loc 1 1288 5 is_stmt 1 view .LVU1713
1288:source\fatfs/ff.c **** 			} else {
 4743              		.loc 1 1288 8 is_stmt 0 view .LVU1714
 4744 0184 0137     		adds	r7, r7, #1
 4745              	.LVL536:
1288:source\fatfs/ff.c **** 			} else {
 4746              		.loc 1 1288 8 view .LVU1715
 4747 0186 BE42     		cmp	r6, r7
 4748 0188 CFD1     		bne	.L512
 4749              	.LVL537:
1288:source\fatfs/ff.c **** 			} else {
 4750              		.loc 1 1288 8 view .LVU1716
 4751              	.LBE84:
 4752              	.LBE85:
1685:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
 4753              		.loc 1 1685 19 view .LVU1717
 4754 018a 013E     		subs	r6, r6, #1
 4755              	.LVL538:
1685:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
 4756              		.loc 1 1685 19 view .LVU1718
 4757 018c 59D0     		beq	.L514
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4758              		.loc 1 1686 3 is_stmt 1 view .LVU1719
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4759              		.loc 1 1686 23 is_stmt 0 view .LVU1720
 4760 018e B5F80612 		ldrh	r1, [r5, #518]
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4761              		.loc 1 1686 9 view .LVU1721
 4762 0192 2846     		mov	r0, r5
 4763 0194 891B     		subs	r1, r1, r6
 4764 0196 FFF7FEFF 		bl	dir_sdi
 4765              	.LVL539:
1687:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 4766              		.loc 1 1687 3 is_stmt 1 view .LVU1722
1687:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 4767              		.loc 1 1687 6 is_stmt 0 view .LVU1723
 4768 019a 0446     		mov	r4, r0
 4769 019c 0028     		cmp	r0, #0
 4770 019e 97D1     		bne	.L531
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4771              		.loc 1 1688 4 is_stmt 1 view .LVU1724
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4772              		.loc 1 1688 10 is_stmt 0 view .LVU1725
 4773 01a0 D5F81802 		ldr	r0, [r5, #536]
 4774              	.LVL540:
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4775              		.loc 1 1688 10 view .LVU1726
 4776 01a4 FFF7FEFF 		bl	sum_sfn
 4777              	.LVL541:
 4778              	.LBB86:
 4779              	.LBB87:
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4780              		.loc 1 1423 17 view .LVU1727
 4781 01a8 4FF00F08 		mov	r8, #15
 4782              	.LBE87:
 4783              	.LBE86:
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4784              		.loc 1 1688 10 view .LVU1728
 4785 01ac 0746     		mov	r7, r0
 4786              	.LVL542:
 4787              	.LBB91:
 4788              	.LBB88:
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4789              		.loc 1 1430 6 view .LVU1729
 4790 01ae 4FF6FF79 		movw	r9, #65535
 4791              	.L522:
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4792              		.loc 1 1430 6 view .LVU1730
 4793              	.LBE88:
 4794              	.LBE91:
1689:source\fatfs/ff.c **** 				res = move_window(dp->fs, dp->sect);
 4795              		.loc 1 1689 4 is_stmt 1 view .LVU1731
1690:source\fatfs/ff.c **** 				if (res != FR_OK) break;
 4796              		.loc 1 1690 5 view .LVU1732
1690:source\fatfs/ff.c **** 				if (res != FR_OK) break;
 4797              		.loc 1 1690 11 is_stmt 0 view .LVU1733
 4798 01b2 D5F81012 		ldr	r1, [r5, #528]
 4799 01b6 D5F80002 		ldr	r0, [r5, #512]
 4800 01ba FFF7FEFF 		bl	move_window
 4801              	.LVL543:
 4802 01be 0346     		mov	r3, r0
 4803 01c0 0446     		mov	r4, r0
 4804              	.LVL544:
1691:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 4805              		.loc 1 1691 5 is_stmt 1 view .LVU1734
1691:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 4806              		.loc 1 1691 8 is_stmt 0 view .LVU1735
 4807 01c2 0028     		cmp	r0, #0
 4808 01c4 84D1     		bne	.L531
1692:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
 4809              		.loc 1 1692 5 is_stmt 1 view .LVU1736
 4810 01c6 D5F81422 		ldr	r2, [r5, #532]
 4811 01ca DFF8BCE0 		ldr	lr, .L552+4
1692:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
 4812              		.loc 1 1692 15 is_stmt 0 view .LVU1737
 4813 01ce D5F820C2 		ldr	ip, [r5, #544]
 4814              	.LBB92:
 4815              	.LBB89:
1422:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4816              		.loc 1 1422 19 view .LVU1738
 4817 01d2 5773     		strb	r7, [r2, #13]
 4818 01d4 F0B2     		uxtb	r0, r6
 4819              	.LVL545:
1422:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4820              		.loc 1 1422 19 view .LVU1739
 4821              	.LBE89:
 4822              	.LBI86:
1411:source\fatfs/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
 4823              		.loc 1 1411 6 is_stmt 1 view .LVU1740
 4824              	.LBB90:
1418:source\fatfs/ff.c **** 	WCHAR wc;
 4825              		.loc 1 1418 2 view .LVU1741
1419:source\fatfs/ff.c **** 
 4826              		.loc 1 1419 2 view .LVU1742
1422:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4827              		.loc 1 1422 2 view .LVU1743
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4828              		.loc 1 1423 2 view .LVU1744
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4829              		.loc 1 1427 11 is_stmt 0 view .LVU1745
 4830 01d6 411E     		subs	r1, r0, #1
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4831              		.loc 1 1427 16 view .LVU1746
 4832 01d8 0D24     		movs	r4, #13
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4833              		.loc 1 1423 17 view .LVU1747
 4834 01da 82F80B80 		strb	r8, [r2, #11]
1424:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
 4835              		.loc 1 1424 2 is_stmt 1 view .LVU1748
1424:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
 4836              		.loc 1 1424 17 is_stmt 0 view .LVU1749
 4837 01de 1373     		strb	r3, [r2, #12]
1425:source\fatfs/ff.c **** 
 4838              		.loc 1 1425 2 is_stmt 1 view .LVU1750
 4839 01e0 9376     		strb	r3, [r2, #26]
1425:source\fatfs/ff.c **** 
 4840              		.loc 1 1425 2 view .LVU1751
 4841 01e2 D376     		strb	r3, [r2, #27]
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4842              		.loc 1 1427 2 view .LVU1752
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4843              		.loc 1 1427 16 is_stmt 0 view .LVU1753
 4844 01e4 6143     		muls	r1, r4, r1
 4845              	.LVL546:
1428:source\fatfs/ff.c **** 	do {
 4846              		.loc 1 1428 2 is_stmt 1 view .LVU1754
1428:source\fatfs/ff.c **** 	do {
 4847              		.loc 1 1428 4 is_stmt 0 view .LVU1755
 4848 01e6 9A46     		mov	r10, r3
 4849              	.LVL547:
 4850              	.L519:
1429:source\fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 4851              		.loc 1 1429 2 is_stmt 1 view .LVU1756
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4852              		.loc 1 1430 3 view .LVU1757
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4853              		.loc 1 1430 6 is_stmt 0 view .LVU1758
 4854 01e8 4B45     		cmp	r3, r9
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4855              		.loc 1 1430 21 is_stmt 1 view .LVU1759
 4856              	.LVL548:
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4857              		.loc 1 1431 3 is_stmt 0 view .LVU1760
 4858 01ea 1EF8014B 		ldrb	r4, [lr], #1	@ zero_extendqisi2
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4859              		.loc 1 1430 24 view .LVU1761
 4860 01ee 18BF     		it	ne
 4861 01f0 3CF81130 		ldrhne	r3, [ip, r1, lsl #1]
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4862              		.loc 1 1431 3 view .LVU1762
 4863 01f4 1355     		strb	r3, [r2, r4]
 4864              	.LVL549:
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4865              		.loc 1 1433 2 view .LVU1763
 4866 01f6 0AF1010A 		add	r10, r10, #1
 4867              	.LVL550:
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4868              		.loc 1 1431 3 view .LVU1764
 4869 01fa 1444     		add	r4, r4, r2
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4870              		.loc 1 1430 34 view .LVU1765
 4871 01fc 18BF     		it	ne
 4872 01fe 0131     		addne	r1, r1, #1
 4873              	.LVL551:
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4874              		.loc 1 1431 3 is_stmt 1 view .LVU1766
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4875              		.loc 1 1431 3 view .LVU1767
 4876 0200 4FEA132B 		lsr	fp, r3, #8
1432:source\fatfs/ff.c **** 	} while (++s < 13);
 4877              		.loc 1 1432 15 is_stmt 0 view .LVU1768
 4878 0204 002B     		cmp	r3, #0
 4879 0206 08BF     		it	eq
 4880 0208 4B46     		moveq	r3, r9
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4881              		.loc 1 1433 2 view .LVU1769
 4882 020a BAF10D0F 		cmp	r10, #13
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4883              		.loc 1 1431 3 view .LVU1770
 4884 020e 84F801B0 		strb	fp, [r4, #1]
1432:source\fatfs/ff.c **** 	} while (++s < 13);
 4885              		.loc 1 1432 3 is_stmt 1 view .LVU1771
 4886              	.LVL552:
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4887              		.loc 1 1433 10 view .LVU1772
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4888              		.loc 1 1433 2 is_stmt 0 view .LVU1773
 4889 0212 E9D1     		bne	.L519
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4890              		.loc 1 1434 2 is_stmt 1 view .LVU1774
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4891              		.loc 1 1434 5 is_stmt 0 view .LVU1775
 4892 0214 4B45     		cmp	r3, r9
 4893 0216 02D0     		beq	.L520
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4894              		.loc 1 1434 19 view .LVU1776
 4895 0218 3CF81130 		ldrh	r3, [ip, r1, lsl #1]
 4896 021c 0BB9     		cbnz	r3, .L521
 4897              	.L520:
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4898              		.loc 1 1434 34 is_stmt 1 view .LVU1777
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4899              		.loc 1 1434 38 is_stmt 0 view .LVU1778
 4900 021e 40F04000 		orr	r0, r0, #64
 4901              	.LVL553:
 4902              	.L521:
1435:source\fatfs/ff.c **** }
 4903              		.loc 1 1435 2 is_stmt 1 view .LVU1779
1435:source\fatfs/ff.c **** }
 4904              		.loc 1 1435 16 is_stmt 0 view .LVU1780
 4905 0222 1070     		strb	r0, [r2]
 4906              	.LVL554:
1435:source\fatfs/ff.c **** }
 4907              		.loc 1 1435 16 view .LVU1781
 4908              	.LBE90:
 4909              	.LBE92:
1693:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 4910              		.loc 1 1693 5 is_stmt 1 view .LVU1782
1693:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 4911              		.loc 1 1693 19 is_stmt 0 view .LVU1783
 4912 0224 D5F80032 		ldr	r3, [r5, #512]
 4913 0228 0122     		movs	r2, #1
 4914 022a 83F80422 		strb	r2, [r3, #516]
1694:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
 4915              		.loc 1 1694 5 is_stmt 1 view .LVU1784
1694:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
 4916              		.loc 1 1694 11 is_stmt 0 view .LVU1785
 4917 022e 0021     		movs	r1, #0
 4918 0230 2846     		mov	r0, r5
 4919 0232 FFF7FEFF 		bl	dir_next
 4920              	.LVL555:
1695:source\fatfs/ff.c **** 		}
 4921              		.loc 1 1695 12 is_stmt 1 view .LVU1786
1695:source\fatfs/ff.c **** 		}
 4922              		.loc 1 1695 4 is_stmt 0 view .LVU1787
 4923 0236 0446     		mov	r4, r0
 4924 0238 0028     		cmp	r0, #0
 4925 023a 7FF449AF 		bne	.L531
 4926              	.LVL556:
1695:source\fatfs/ff.c **** 		}
 4927              		.loc 1 1695 26 discriminator 1 view .LVU1788
 4928 023e 013E     		subs	r6, r6, #1
 4929              	.LVL557:
1695:source\fatfs/ff.c **** 		}
 4930              		.loc 1 1695 26 discriminator 1 view .LVU1789
 4931 0240 B7D1     		bne	.L522
 4932              	.LVL558:
 4933              	.L514:
1703:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4934              		.loc 1 1703 3 is_stmt 1 view .LVU1790
1703:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4935              		.loc 1 1703 9 is_stmt 0 view .LVU1791
 4936 0242 D5F81012 		ldr	r1, [r5, #528]
 4937 0246 D5F80002 		ldr	r0, [r5, #512]
 4938 024a FFF7FEFF 		bl	move_window
 4939              	.LVL559:
1704:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 4940              		.loc 1 1704 3 is_stmt 1 view .LVU1792
1704:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 4941              		.loc 1 1704 6 is_stmt 0 view .LVU1793
 4942 024e 0446     		mov	r4, r0
 4943 0250 0028     		cmp	r0, #0
 4944 0252 7FF43DAF 		bne	.L531
1705:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 4945              		.loc 1 1705 4 is_stmt 1 view .LVU1794
 4946 0256 0146     		mov	r1, r0
 4947 0258 2022     		movs	r2, #32
 4948 025a D5F81402 		ldr	r0, [r5, #532]
 4949              	.LVL560:
1705:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 4950              		.loc 1 1705 4 is_stmt 0 view .LVU1795
 4951 025e FFF7FEFF 		bl	mem_set
 4952              	.LVL561:
1706:source\fatfs/ff.c **** #if _USE_LFN
 4953              		.loc 1 1706 4 is_stmt 1 view .LVU1796
 4954 0262 0B22     		movs	r2, #11
 4955 0264 D5E98501 		ldrd	r0, r1, [r5, #532]
 4956 0268 FFF7FEFF 		bl	mem_cpy
 4957              	.LVL562:
1708:source\fatfs/ff.c **** #endif
 4958              		.loc 1 1708 4 view .LVU1797
1708:source\fatfs/ff.c **** #endif
 4959              		.loc 1 1708 31 is_stmt 0 view .LVU1798
 4960 026c D5E98523 		ldrd	r2, r3, [r5, #532]
1708:source\fatfs/ff.c **** #endif
 4961              		.loc 1 1708 40 view .LVU1799
 4962 0270 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4963 0272 03F01803 		and	r3, r3, #24
1708:source\fatfs/ff.c **** #endif
 4964              		.loc 1 1708 23 view .LVU1800
 4965 0276 1373     		strb	r3, [r2, #12]
1710:source\fatfs/ff.c **** 		}
 4966              		.loc 1 1710 4 is_stmt 1 view .LVU1801
1710:source\fatfs/ff.c **** 		}
 4967              		.loc 1 1710 18 is_stmt 0 view .LVU1802
 4968 0278 D5F80032 		ldr	r3, [r5, #512]
 4969 027c 0122     		movs	r2, #1
 4970 027e 83F80422 		strb	r2, [r3, #516]
 4971 0282 25E7     		b	.L531
 4972              	.L553:
 4973              		.align	2
 4974              	.L552:
 4975 0284 21100100 		.word	69665
 4976 0288 00000000 		.word	.LANCHOR3
 4977              		.cfi_endproc
 4978              	.LFE160:
 4980              		.section	.text.dir_remove,"ax",%progbits
 4981              		.align	1
 4982              		.syntax unified
 4983              		.thumb
 4984              		.thumb_func
 4986              	dir_remove:
 4987              	.LVL563:
 4988              	.LFB161:
1729:source\fatfs/ff.c **** 	FRESULT res;
 4989              		.loc 1 1729 1 is_stmt 1 view -0
 4990              		.cfi_startproc
 4991              		@ args = 0, pretend = 0, frame = 0
 4992              		@ frame_needed = 0, uses_anonymous_args = 0
1730:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 4993              		.loc 1 1730 2 view .LVU1804
1732:source\fatfs/ff.c **** 
 4994              		.loc 1 1732 2 view .LVU1805
1734:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
 4995              		.loc 1 1734 2 view .LVU1806
1729:source\fatfs/ff.c **** 	FRESULT res;
 4996              		.loc 1 1729 1 is_stmt 0 view .LVU1807
 4997 0000 70B5     		push	{r4, r5, r6, lr}
 4998              		.cfi_def_cfa_offset 16
 4999              		.cfi_offset 4, -16
 5000              		.cfi_offset 5, -12
 5001              		.cfi_offset 6, -8
 5002              		.cfi_offset 14, -4
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5003              		.loc 1 1735 23 view .LVU1808
 5004 0002 B0F82412 		ldrh	r1, [r0, #548]
1734:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
 5005              		.loc 1 1734 8 view .LVU1809
 5006 0006 B0F80652 		ldrh	r5, [r0, #518]
 5007              	.LVL564:
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5008              		.loc 1 1735 2 is_stmt 1 view .LVU1810
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5009              		.loc 1 1735 8 is_stmt 0 view .LVU1811
 5010 000a 4FF6FF73 		movw	r3, #65535
 5011 000e 9942     		cmp	r1, r3
 5012 0010 08BF     		it	eq
 5013 0012 2946     		moveq	r1, r5
1729:source\fatfs/ff.c **** 	FRESULT res;
 5014              		.loc 1 1729 1 view .LVU1812
 5015 0014 0446     		mov	r4, r0
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5016              		.loc 1 1735 8 view .LVU1813
 5017 0016 FFF7FEFF 		bl	dir_sdi
 5018              	.LVL565:
1736:source\fatfs/ff.c **** 		do {
 5019              		.loc 1 1736 2 is_stmt 1 view .LVU1814
1736:source\fatfs/ff.c **** 		do {
 5020              		.loc 1 1736 5 is_stmt 0 view .LVU1815
 5021 001a 0146     		mov	r1, r0
 5022 001c 10BB     		cbnz	r0, .L556
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5023              		.loc 1 1741 13 view .LVU1816
 5024 001e E526     		movs	r6, #229
 5025              	.L558:
1737:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
 5026              		.loc 1 1737 3 is_stmt 1 view .LVU1817
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5027              		.loc 1 1738 4 view .LVU1818
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5028              		.loc 1 1738 10 is_stmt 0 view .LVU1819
 5029 0020 D4F81012 		ldr	r1, [r4, #528]
 5030 0024 D4F80002 		ldr	r0, [r4, #512]
 5031              	.LVL566:
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5032              		.loc 1 1738 10 view .LVU1820
 5033 0028 FFF7FEFF 		bl	move_window
 5034              	.LVL567:
1739:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 5035              		.loc 1 1739 4 is_stmt 1 view .LVU1821
1739:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 5036              		.loc 1 1739 7 is_stmt 0 view .LVU1822
 5037 002c 0146     		mov	r1, r0
 5038 002e B0B9     		cbnz	r0, .L557
1740:source\fatfs/ff.c **** 			*dp->dir = DDEM;
 5039              		.loc 1 1740 4 is_stmt 1 view .LVU1823
 5040 0030 2022     		movs	r2, #32
 5041 0032 D4F81402 		ldr	r0, [r4, #532]
 5042              	.LVL568:
1740:source\fatfs/ff.c **** 			*dp->dir = DDEM;
 5043              		.loc 1 1740 4 is_stmt 0 view .LVU1824
 5044 0036 FFF7FEFF 		bl	mem_set
 5045              	.LVL569:
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5046              		.loc 1 1741 4 is_stmt 1 view .LVU1825
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5047              		.loc 1 1741 7 is_stmt 0 view .LVU1826
 5048 003a D4F81432 		ldr	r3, [r4, #532]
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5049              		.loc 1 1741 13 view .LVU1827
 5050 003e 1E70     		strb	r6, [r3]
1742:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 5051              		.loc 1 1742 4 is_stmt 1 view .LVU1828
1742:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 5052              		.loc 1 1742 18 is_stmt 0 view .LVU1829
 5053 0040 D4F80032 		ldr	r3, [r4, #512]
 5054 0044 0122     		movs	r2, #1
 5055 0046 83F80422 		strb	r2, [r3, #516]
1743:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
 5056              		.loc 1 1743 4 is_stmt 1 view .LVU1830
1743:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
 5057              		.loc 1 1743 7 is_stmt 0 view .LVU1831
 5058 004a B4F80632 		ldrh	r3, [r4, #518]
 5059 004e AB42     		cmp	r3, r5
 5060 0050 08D2     		bcs	.L556
1744:source\fatfs/ff.c **** 		} while (res == FR_OK);
 5061              		.loc 1 1744 4 is_stmt 1 view .LVU1832
1744:source\fatfs/ff.c **** 		} while (res == FR_OK);
 5062              		.loc 1 1744 10 is_stmt 0 view .LVU1833
 5063 0052 2046     		mov	r0, r4
 5064 0054 FFF7FEFF 		bl	dir_next
 5065              	.LVL570:
1745:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 5066              		.loc 1 1745 11 is_stmt 1 view .LVU1834
1745:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 5067              		.loc 1 1745 3 is_stmt 0 view .LVU1835
 5068 0058 0146     		mov	r1, r0
 5069 005a 0028     		cmp	r0, #0
 5070 005c E0D0     		beq	.L558
 5071              	.L557:
 5072              	.LVL571:
1746:source\fatfs/ff.c **** 	}
 5073              		.loc 1 1746 3 is_stmt 1 view .LVU1836
1746:source\fatfs/ff.c **** 	}
 5074              		.loc 1 1746 30 is_stmt 0 view .LVU1837
 5075 005e 0429     		cmp	r1, #4
 5076 0060 08BF     		it	eq
 5077 0062 0221     		moveq	r1, #2
 5078              	.LVL572:
 5079              	.L556:
1761:source\fatfs/ff.c **** }
 5080              		.loc 1 1761 2 is_stmt 1 view .LVU1838
1762:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 5081              		.loc 1 1762 1 is_stmt 0 view .LVU1839
 5082 0064 0846     		mov	r0, r1
 5083 0066 70BD     		pop	{r4, r5, r6, pc}
1762:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 5084              		.loc 1 1762 1 view .LVU1840
 5085              		.cfi_endproc
 5086              	.LFE161:
 5088              		.section	.text.dir_read.constprop.0,"ax",%progbits
 5089              		.align	1
 5090              		.syntax unified
 5091              		.thumb
 5092              		.thumb_func
 5094              	dir_read.constprop.0:
 5095              	.LVL573:
 5096              	.LFB206:
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5097              		.loc 1 1589 9 is_stmt 1 view -0
 5098              		.cfi_startproc
 5099              		@ args = 0, pretend = 0, frame = 0
 5100              		@ frame_needed = 0, uses_anonymous_args = 0
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5101              		.loc 1 1589 9 is_stmt 0 view .LVU1842
 5102 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5103              		.cfi_def_cfa_offset 32
 5104              		.cfi_offset 4, -32
 5105              		.cfi_offset 5, -28
 5106              		.cfi_offset 6, -24
 5107              		.cfi_offset 7, -20
 5108              		.cfi_offset 8, -16
 5109              		.cfi_offset 9, -12
 5110              		.cfi_offset 10, -8
 5111              		.cfi_offset 14, -4
1597:source\fatfs/ff.c **** #endif
 5112              		.loc 1 1597 19 view .LVU1843
 5113 0004 FF26     		movs	r6, #255
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5114              		.loc 1 1589 9 view .LVU1844
 5115 0006 8046     		mov	r8, r0
1597:source\fatfs/ff.c **** #endif
 5116              		.loc 1 1597 7 view .LVU1845
 5117 0008 3446     		mov	r4, r6
1600:source\fatfs/ff.c **** 	while (dp->sect) {
 5118              		.loc 1 1600 6 view .LVU1846
 5119 000a 0425     		movs	r5, #4
 5120              	.LBB95:
 5121              	.LBB96:
1396:source\fatfs/ff.c **** 		}
 5122              		.loc 1 1396 7 view .LVU1847
 5123 000c 4FF6FF77 		movw	r7, #65535
 5124              	.LVL574:
 5125              	.L563:
1396:source\fatfs/ff.c **** 		}
 5126              		.loc 1 1396 7 view .LVU1848
 5127              	.LBE96:
 5128              	.LBE95:
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5129              		.loc 1 1601 8 is_stmt 1 view .LVU1849
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5130              		.loc 1 1601 11 is_stmt 0 view .LVU1850
 5131 0010 D8F81012 		ldr	r1, [r8, #528]
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5132              		.loc 1 1601 8 view .LVU1851
 5133 0014 11B9     		cbnz	r1, .L575
 5134              	.LVL575:
1634:source\fatfs/ff.c **** 
 5135              		.loc 1 1634 2 is_stmt 1 view .LVU1852
1634:source\fatfs/ff.c **** 
 5136              		.loc 1 1634 5 is_stmt 0 view .LVU1853
 5137 0016 002D     		cmp	r5, #0
 5138 0018 69D0     		beq	.L576
 5139 001a 58E0     		b	.L564
 5140              	.LVL576:
 5141              	.L575:
1602:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5142              		.loc 1 1602 3 is_stmt 1 view .LVU1854
1602:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5143              		.loc 1 1602 9 is_stmt 0 view .LVU1855
 5144 001c D8F80002 		ldr	r0, [r8, #512]
 5145 0020 FFF7FEFF 		bl	move_window
 5146              	.LVL577:
1603:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 5147              		.loc 1 1603 3 is_stmt 1 view .LVU1856
1603:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 5148              		.loc 1 1603 6 is_stmt 0 view .LVU1857
 5149 0024 0546     		mov	r5, r0
 5150 0026 0028     		cmp	r0, #0
 5151 0028 51D1     		bne	.L564
1604:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 5152              		.loc 1 1604 3 is_stmt 1 view .LVU1858
1604:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 5153              		.loc 1 1604 7 is_stmt 0 view .LVU1859
 5154 002a D8F81402 		ldr	r0, [r8, #532]
 5155              	.LVL578:
1605:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 5156              		.loc 1 1605 3 is_stmt 1 view .LVU1860
1605:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 5157              		.loc 1 1605 5 is_stmt 0 view .LVU1861
 5158 002e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 5159              	.LVL579:
1606:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 5160              		.loc 1 1606 3 is_stmt 1 view .LVU1862
1606:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 5161              		.loc 1 1606 6 is_stmt 0 view .LVU1863
 5162 0030 002B     		cmp	r3, #0
 5163 0032 65D0     		beq	.L577
1607:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5164              		.loc 1 1607 3 is_stmt 1 view .LVU1864
 5165              	.LVL580:
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5166              		.loc 1 1609 3 view .LVU1865
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5167              		.loc 1 1609 6 is_stmt 0 view .LVU1866
 5168 0034 E52B     		cmp	r3, #229
 5169 0036 50D0     		beq	.L585
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5170              		.loc 1 1609 17 view .LVU1867
 5171 0038 2E2B     		cmp	r3, #46
 5172 003a 4ED0     		beq	.L585
1607:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5173              		.loc 1 1607 5 view .LVU1868
 5174 003c C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 5175 003e 02F03F01 		and	r1, r2, #63
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5176              		.loc 1 1609 57 view .LVU1869
 5177 0042 02F01F02 		and	r2, r2, #31
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5178              		.loc 1 1609 45 view .LVU1870
 5179 0046 082A     		cmp	r2, #8
 5180 0048 47D0     		beq	.L585
1612:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
 5181              		.loc 1 1612 4 is_stmt 1 view .LVU1871
1612:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
 5182              		.loc 1 1612 7 is_stmt 0 view .LVU1872
 5183 004a 0F29     		cmp	r1, #15
 5184 004c 4AD1     		bne	.L566
1613:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 5185              		.loc 1 1613 5 is_stmt 1 view .LVU1873
1613:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 5186              		.loc 1 1613 8 is_stmt 0 view .LVU1874
 5187 004e 5906     		lsls	r1, r3, #25
 5188 0050 41D5     		bpl	.L567
1614:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
 5189              		.loc 1 1614 6 is_stmt 1 view .LVU1875
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5190              		.loc 1 1615 8 is_stmt 0 view .LVU1876
 5191 0052 03F0BF04 		and	r4, r3, #191
 5192              	.LVL581:
1616:source\fatfs/ff.c **** 				}
 5193              		.loc 1 1616 18 view .LVU1877
 5194 0056 B8F80632 		ldrh	r3, [r8, #518]
 5195              	.LVL582:
1614:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
 5196              		.loc 1 1614 10 view .LVU1878
 5197 005a 467B     		ldrb	r6, [r0, #13]	@ zero_extendqisi2
 5198              	.LVL583:
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5199              		.loc 1 1615 6 is_stmt 1 view .LVU1879
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5200              		.loc 1 1615 18 view .LVU1880
1616:source\fatfs/ff.c **** 				}
 5201              		.loc 1 1616 6 view .LVU1881
1616:source\fatfs/ff.c **** 				}
 5202              		.loc 1 1616 18 is_stmt 0 view .LVU1882
 5203 005c A8F82432 		strh	r3, [r8, #548]	@ movhi
 5204              	.LVL584:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5205              		.loc 1 1619 5 is_stmt 1 view .LVU1883
 5206              	.L568:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5207              		.loc 1 1619 21 is_stmt 0 view .LVU1884
 5208 0060 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 5209 0062 B342     		cmp	r3, r6
 5210 0064 39D1     		bne	.L585
 5211              	.LBB100:
 5212              	.LBB97:
1387:source\fatfs/ff.c **** 
 5213              		.loc 1 1387 22 view .LVU1885
 5214 0066 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 5215              	.LBE97:
 5216              	.LBE100:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5217              		.loc 1 1619 51 view .LVU1886
 5218 0068 D8F82052 		ldr	r5, [r8, #544]
 5219              	.LVL585:
 5220              	.LBB101:
 5221              	.LBI95:
1378:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 5222              		.loc 1 1378 5 is_stmt 1 view .LVU1887
 5223              	.LBB98:
1383:source\fatfs/ff.c **** 	WCHAR wc, uc;
 5224              		.loc 1 1383 2 view .LVU1888
1384:source\fatfs/ff.c **** 
 5225              		.loc 1 1384 2 view .LVU1889
1387:source\fatfs/ff.c **** 
 5226              		.loc 1 1387 2 view .LVU1890
 5227 006c DFF894C0 		ldr	ip, .L593
1387:source\fatfs/ff.c **** 
 5228              		.loc 1 1387 22 is_stmt 0 view .LVU1891
 5229 0070 03F03F03 		and	r3, r3, #63
1387:source\fatfs/ff.c **** 
 5230              		.loc 1 1387 30 view .LVU1892
 5231 0074 013B     		subs	r3, r3, #1
1387:source\fatfs/ff.c **** 
 5232              		.loc 1 1387 35 view .LVU1893
 5233 0076 0D22     		movs	r2, #13
 5234 0078 5343     		muls	r3, r2, r3
 5235              	.LVL586:
1389:source\fatfs/ff.c **** 	do {
 5236              		.loc 1 1389 2 is_stmt 1 view .LVU1894
1389:source\fatfs/ff.c **** 	do {
 5237              		.loc 1 1389 9 view .LVU1895
1389:source\fatfs/ff.c **** 	do {
 5238              		.loc 1 1389 12 is_stmt 0 view .LVU1896
 5239 007a 4FF0010E 		mov	lr, #1
1389:source\fatfs/ff.c **** 	do {
 5240              		.loc 1 1389 4 view .LVU1897
 5241 007e 0021     		movs	r1, #0
 5242              	.LVL587:
 5243              	.L571:
1390:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 5244              		.loc 1 1390 2 is_stmt 1 view .LVU1898
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5245              		.loc 1 1391 3 view .LVU1899
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5246              		.loc 1 1391 8 is_stmt 0 view .LVU1900
 5247 0080 1CF8019B 		ldrb	r9, [ip], #1	@ zero_extendqisi2
 5248 0084 00EB0902 		add	r2, r0, r9
 5249 0088 92F801A0 		ldrb	r10, [r2, #1]	@ zero_extendqisi2
 5250 008c 10F80920 		ldrb	r2, [r0, r9]	@ zero_extendqisi2
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5251              		.loc 1 1391 6 view .LVU1901
 5252 0090 42EA0A22 		orr	r2, r2, r10, lsl #8
 5253              	.LVL588:
1392:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 5254              		.loc 1 1392 3 is_stmt 1 view .LVU1902
1392:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 5255              		.loc 1 1392 6 is_stmt 0 view .LVU1903
 5256 0094 BEF1000F 		cmp	lr, #0
 5257 0098 21D0     		beq	.L569
1393:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 5258              		.loc 1 1393 4 is_stmt 1 view .LVU1904
1393:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 5259              		.loc 1 1393 7 is_stmt 0 view .LVU1905
 5260 009a FE2B     		cmp	r3, #254
 5261 009c 1DD8     		bhi	.L585
1394:source\fatfs/ff.c **** 		} else {
 5262              		.loc 1 1394 4 is_stmt 1 view .LVU1906
 5263              	.LVL589:
1394:source\fatfs/ff.c **** 		} else {
 5264              		.loc 1 1394 16 is_stmt 0 view .LVU1907
 5265 009e 25F81320 		strh	r2, [r5, r3, lsl #1]	@ movhi
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5266              		.loc 1 1391 6 view .LVU1908
 5267 00a2 9646     		mov	lr, r2
1394:source\fatfs/ff.c **** 		} else {
 5268              		.loc 1 1394 12 view .LVU1909
 5269 00a4 0133     		adds	r3, r3, #1
 5270              	.LVL590:
 5271              	.L570:
1398:source\fatfs/ff.c **** 
 5272              		.loc 1 1398 10 is_stmt 1 view .LVU1910
1398:source\fatfs/ff.c **** 
 5273              		.loc 1 1398 2 is_stmt 0 view .LVU1911
 5274 00a6 0131     		adds	r1, r1, #1
 5275              	.LVL591:
1398:source\fatfs/ff.c **** 
 5276              		.loc 1 1398 2 view .LVU1912
 5277 00a8 0D29     		cmp	r1, #13
 5278 00aa E9D1     		bne	.L571
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5279              		.loc 1 1400 2 is_stmt 1 view .LVU1913
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5280              		.loc 1 1400 5 is_stmt 0 view .LVU1914
 5281 00ac 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 5282              	.LVL592:
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5283              		.loc 1 1400 5 view .LVU1915
 5284 00ae 5206     		lsls	r2, r2, #25
 5285 00b0 04D5     		bpl	.L572
1401:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
 5286              		.loc 1 1401 3 is_stmt 1 view .LVU1916
1401:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
 5287              		.loc 1 1401 6 is_stmt 0 view .LVU1917
 5288 00b2 FE2B     		cmp	r3, #254
 5289 00b4 11D8     		bhi	.L585
1402:source\fatfs/ff.c **** 	}
 5290              		.loc 1 1402 3 is_stmt 1 view .LVU1918
1402:source\fatfs/ff.c **** 	}
 5291              		.loc 1 1402 13 is_stmt 0 view .LVU1919
 5292 00b6 0022     		movs	r2, #0
 5293 00b8 25F81320 		strh	r2, [r5, r3, lsl #1]	@ movhi
 5294              	.LVL593:
 5295              	.L572:
1402:source\fatfs/ff.c **** 	}
 5296              		.loc 1 1402 13 view .LVU1920
 5297              	.LBE98:
 5298              	.LBE101:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5299              		.loc 1 1619 9 view .LVU1921
 5300 00bc 013C     		subs	r4, r4, #1
 5301              	.LVL594:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5302              		.loc 1 1619 9 view .LVU1922
 5303 00be E4B2     		uxtb	r4, r4
 5304              	.L565:
 5305              	.LVL595:
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5306              		.loc 1 1630 3 is_stmt 1 view .LVU1923
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5307              		.loc 1 1630 9 is_stmt 0 view .LVU1924
 5308 00c0 0021     		movs	r1, #0
 5309 00c2 4046     		mov	r0, r8
 5310              	.LVL596:
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5311              		.loc 1 1630 9 view .LVU1925
 5312 00c4 FFF7FEFF 		bl	dir_next
 5313              	.LVL597:
1631:source\fatfs/ff.c **** 	}
 5314              		.loc 1 1631 3 is_stmt 1 view .LVU1926
1631:source\fatfs/ff.c **** 	}
 5315              		.loc 1 1631 6 is_stmt 0 view .LVU1927
 5316 00c8 0546     		mov	r5, r0
 5317 00ca 0028     		cmp	r0, #0
 5318 00cc A0D0     		beq	.L563
 5319              	.LVL598:
 5320              	.L564:
1634:source\fatfs/ff.c **** 
 5321              		.loc 1 1634 20 is_stmt 1 view .LVU1928
1634:source\fatfs/ff.c **** 
 5322              		.loc 1 1634 29 is_stmt 0 view .LVU1929
 5323 00ce 0023     		movs	r3, #0
 5324 00d0 C8F81032 		str	r3, [r8, #528]
 5325 00d4 0CE0     		b	.L574
 5326              	.LVL599:
 5327              	.L567:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5328              		.loc 1 1619 5 is_stmt 1 view .LVU1930
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5329              		.loc 1 1619 9 is_stmt 0 view .LVU1931
 5330 00d6 A342     		cmp	r3, r4
 5331 00d8 C2D0     		beq	.L568
 5332              	.LVL600:
 5333              	.L585:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5334              		.loc 1 1619 9 view .LVU1932
 5335 00da FF24     		movs	r4, #255
 5336              	.LVL601:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5337              		.loc 1 1619 9 view .LVU1933
 5338 00dc F0E7     		b	.L565
 5339              	.LVL602:
 5340              	.L569:
 5341              	.LBB102:
 5342              	.LBB99:
1396:source\fatfs/ff.c **** 		}
 5343              		.loc 1 1396 4 is_stmt 1 view .LVU1934
1396:source\fatfs/ff.c **** 		}
 5344              		.loc 1 1396 7 is_stmt 0 view .LVU1935
 5345 00de BA42     		cmp	r2, r7
 5346 00e0 E1D0     		beq	.L570
 5347 00e2 FAE7     		b	.L585
 5348              	.LVL603:
 5349              	.L566:
1396:source\fatfs/ff.c **** 		}
 5350              		.loc 1 1396 7 view .LVU1936
 5351              	.LBE99:
 5352              	.LBE102:
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5353              		.loc 1 1621 5 is_stmt 1 view .LVU1937
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5354              		.loc 1 1621 8 is_stmt 0 view .LVU1938
 5355 00e4 3CB9     		cbnz	r4, .L573
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5356              		.loc 1 1621 23 view .LVU1939
 5357 00e6 FFF7FEFF 		bl	sum_sfn
 5358              	.LVL604:
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5359              		.loc 1 1621 13 view .LVU1940
 5360 00ea B042     		cmp	r0, r6
 5361 00ec 03D1     		bne	.L573
 5362              	.L576:
1602:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5363              		.loc 1 1602 9 view .LVU1941
 5364 00ee 0025     		movs	r5, #0
 5365              	.L574:
1636:source\fatfs/ff.c **** }
 5366              		.loc 1 1636 2 is_stmt 1 view .LVU1942
1637:source\fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
 5367              		.loc 1 1637 1 is_stmt 0 view .LVU1943
 5368 00f0 2846     		mov	r0, r5
 5369 00f2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5370              	.LVL605:
 5371              	.L573:
1622:source\fatfs/ff.c **** 				break;
 5372              		.loc 1 1622 6 is_stmt 1 view .LVU1944
1622:source\fatfs/ff.c **** 				break;
 5373              		.loc 1 1622 18 is_stmt 0 view .LVU1945
 5374 00f6 4FF6FF73 		movw	r3, #65535
 5375 00fa A8F82432 		strh	r3, [r8, #548]	@ movhi
 5376              	.LVL606:
1634:source\fatfs/ff.c **** 
 5377              		.loc 1 1634 2 is_stmt 1 view .LVU1946
 5378 00fe F7E7     		b	.L574
 5379              	.LVL607:
 5380              	.L577:
1606:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 5381              		.loc 1 1606 21 is_stmt 0 view .LVU1947
 5382 0100 0425     		movs	r5, #4
 5383 0102 E4E7     		b	.L564
 5384              	.L594:
 5385              		.align	2
 5386              	.L593:
 5387 0104 00000000 		.word	.LANCHOR3
 5388              		.cfi_endproc
 5389              	.LFE206:
 5391              		.section	.text.remove_chain,"ax",%progbits
 5392              		.align	1
 5393              		.syntax unified
 5394              		.thumb
 5395              		.thumb_func
 5397              	remove_chain:
 5398              	.LVL608:
 5399              	.LFB145:
1014:source\fatfs/ff.c **** 	FRESULT res;
 5400              		.loc 1 1014 1 is_stmt 1 view -0
 5401              		.cfi_startproc
 5402              		@ args = 0, pretend = 0, frame = 8
 5403              		@ frame_needed = 0, uses_anonymous_args = 0
1015:source\fatfs/ff.c **** 	DWORD nxt;
 5404              		.loc 1 1015 2 view .LVU1949
1016:source\fatfs/ff.c **** #if _USE_TRIM
 5405              		.loc 1 1016 2 view .LVU1950
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5406              		.loc 1 1021 2 view .LVU1951
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5407              		.loc 1 1021 5 is_stmt 0 view .LVU1952
 5408 0000 0129     		cmp	r1, #1
1014:source\fatfs/ff.c **** 	FRESULT res;
 5409              		.loc 1 1014 1 view .LVU1953
 5410 0002 37B5     		push	{r0, r1, r2, r4, r5, lr}
 5411              		.cfi_def_cfa_offset 24
 5412              		.cfi_offset 4, -12
 5413              		.cfi_offset 5, -8
 5414              		.cfi_offset 14, -4
1014:source\fatfs/ff.c **** 	FRESULT res;
 5415              		.loc 1 1014 1 view .LVU1954
 5416 0004 0546     		mov	r5, r0
 5417 0006 0C46     		mov	r4, r1
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5418              		.loc 1 1021 5 view .LVU1955
 5419 0008 2AD9     		bls	.L596
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5420              		.loc 1 1021 15 discriminator 1 view .LVU1956
 5421 000a D0F81432 		ldr	r3, [r0, #532]
 5422 000e 8B42     		cmp	r3, r1
 5423 0010 26D9     		bls	.L596
 5424              	.LVL609:
 5425              	.L600:
 5426              	.LBB105:
 5427              	.LBB106:
1027:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 5428              		.loc 1 1027 4 is_stmt 1 view .LVU1957
 5429 0012 2146     		mov	r1, r4
1027:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 5430              		.loc 1 1027 10 is_stmt 0 view .LVU1958
 5431 0014 2846     		mov	r0, r5
 5432 0016 0194     		str	r4, [sp, #4]
 5433 0018 FFF7FEFF 		bl	get_fat
 5434              	.LVL610:
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5435              		.loc 1 1028 4 is_stmt 1 view .LVU1959
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5436              		.loc 1 1028 7 is_stmt 0 view .LVU1960
 5437 001c 0199     		ldr	r1, [sp, #4]
 5438 001e 0446     		mov	r4, r0
 5439              	.LVL611:
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5440              		.loc 1 1028 7 view .LVU1961
 5441 0020 10B9     		cbnz	r0, .L597
 5442              	.LVL612:
 5443              	.L601:
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5444              		.loc 1 1028 7 view .LVU1962
 5445              	.LBE106:
 5446              	.LBE105:
1022:source\fatfs/ff.c **** 
 5447              		.loc 1 1022 7 view .LVU1963
 5448 0022 0020     		movs	r0, #0
 5449              	.LVL613:
 5450              	.L598:
1051:source\fatfs/ff.c **** }
 5451              		.loc 1 1051 2 is_stmt 1 view .LVU1964
1052:source\fatfs/ff.c **** #endif
 5452              		.loc 1 1052 1 is_stmt 0 view .LVU1965
 5453 0024 03B0     		add	sp, sp, #12
 5454              		.cfi_remember_state
 5455              		.cfi_def_cfa_offset 12
 5456              		@ sp needed
 5457 0026 30BD     		pop	{r4, r5, pc}
 5458              	.LVL614:
 5459              	.L597:
 5460              		.cfi_restore_state
 5461              	.LBB109:
 5462              	.LBB107:
1029:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 5463              		.loc 1 1029 4 is_stmt 1 view .LVU1966
1029:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 5464              		.loc 1 1029 7 is_stmt 0 view .LVU1967
 5465 0028 0128     		cmp	r0, #1
 5466 002a 19D0     		beq	.L596
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5467              		.loc 1 1030 4 is_stmt 1 view .LVU1968
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5468              		.loc 1 1030 7 is_stmt 0 view .LVU1969
 5469 002c 601C     		adds	r0, r4, #1
 5470              	.LVL615:
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5471              		.loc 1 1030 7 view .LVU1970
 5472 002e 19D0     		beq	.L602
1031:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5473              		.loc 1 1031 4 is_stmt 1 view .LVU1971
1031:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5474              		.loc 1 1031 10 is_stmt 0 view .LVU1972
 5475 0030 0022     		movs	r2, #0
 5476 0032 2846     		mov	r0, r5
 5477 0034 FFF7FEFF 		bl	put_fat
 5478              	.LVL616:
1032:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 5479              		.loc 1 1032 4 is_stmt 1 view .LVU1973
1032:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 5480              		.loc 1 1032 7 is_stmt 0 view .LVU1974
 5481 0038 0028     		cmp	r0, #0
 5482 003a F3D1     		bne	.L598
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5483              		.loc 1 1033 4 is_stmt 1 view .LVU1975
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5484              		.loc 1 1033 10 is_stmt 0 view .LVU1976
 5485 003c D5F81032 		ldr	r3, [r5, #528]
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5486              		.loc 1 1033 7 view .LVU1977
 5487 0040 5A1C     		adds	r2, r3, #1
 5488 0042 08D0     		beq	.L599
1034:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
 5489              		.loc 1 1034 5 is_stmt 1 view .LVU1978
1034:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
 5490              		.loc 1 1034 19 is_stmt 0 view .LVU1979
 5491 0044 0133     		adds	r3, r3, #1
 5492 0046 C5F81032 		str	r3, [r5, #528]
1035:source\fatfs/ff.c **** 			}
 5493              		.loc 1 1035 5 is_stmt 1 view .LVU1980
1035:source\fatfs/ff.c **** 			}
 5494              		.loc 1 1035 18 is_stmt 0 view .LVU1981
 5495 004a 95F80532 		ldrb	r3, [r5, #517]	@ zero_extendqisi2
 5496 004e 43F00103 		orr	r3, r3, #1
 5497 0052 85F80532 		strb	r3, [r5, #517]
 5498              	.L599:
 5499              	.LVL617:
1026:source\fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 5500              		.loc 1 1026 9 is_stmt 1 view .LVU1982
 5501 0056 D5F81432 		ldr	r3, [r5, #532]
 5502 005a 9C42     		cmp	r4, r3
 5503 005c D9D3     		bcc	.L600
 5504 005e E0E7     		b	.L601
 5505              	.LVL618:
 5506              	.L596:
1026:source\fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 5507              		.loc 1 1026 9 is_stmt 0 view .LVU1983
 5508              	.LBE107:
 5509              	.LBE109:
1022:source\fatfs/ff.c **** 
 5510              		.loc 1 1022 7 view .LVU1984
 5511 0060 0220     		movs	r0, #2
 5512 0062 DFE7     		b	.L598
 5513              	.LVL619:
 5514              	.L602:
 5515              	.LBB110:
 5516              	.LBB108:
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5517              		.loc 1 1030 33 view .LVU1985
 5518 0064 0120     		movs	r0, #1
 5519 0066 DDE7     		b	.L598
 5520              	.LBE108:
 5521              	.LBE110:
 5522              		.cfi_endproc
 5523              	.LFE145:
 5525              		.section	.text.f_mount,"ax",%progbits
 5526              		.align	1
 5527              		.global	f_mount
 5528              		.syntax unified
 5529              		.thumb
 5530              		.thumb_func
 5532              	f_mount:
 5533              	.LVL620:
 5534              	.LFB169:
2459:source\fatfs/ff.c **** 
2460:source\fatfs/ff.c **** 
2461:source\fatfs/ff.c **** 
2462:source\fatfs/ff.c **** 
2463:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
2464:source\fatfs/ff.c **** 
2465:source\fatfs/ff.c ****    Public Functions
2466:source\fatfs/ff.c **** 
2467:source\fatfs/ff.c **** --------------------------------------------------------------------------*/
2468:source\fatfs/ff.c **** 
2469:source\fatfs/ff.c **** 
2470:source\fatfs/ff.c **** 
2471:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2472:source\fatfs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2473:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2474:source\fatfs/ff.c **** 
2475:source\fatfs/ff.c **** FRESULT f_mount (
2476:source\fatfs/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
2477:source\fatfs/ff.c **** 	const TCHAR* path,		/* Logical drive number to be mounted/unmounted */
2478:source\fatfs/ff.c **** 	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
2479:source\fatfs/ff.c **** )
2480:source\fatfs/ff.c **** {
 5535              		.loc 1 2480 1 is_stmt 1 view -0
 5536              		.cfi_startproc
 5537              		@ args = 0, pretend = 0, frame = 16
 5538              		@ frame_needed = 0, uses_anonymous_args = 0
2481:source\fatfs/ff.c **** 	FATFS *cfs;
 5539              		.loc 1 2481 2 view .LVU1987
2482:source\fatfs/ff.c **** 	int vol;
 5540              		.loc 1 2482 2 view .LVU1988
2483:source\fatfs/ff.c **** 	FRESULT res;
 5541              		.loc 1 2483 2 view .LVU1989
2484:source\fatfs/ff.c **** 	const TCHAR *rp = path;
 5542              		.loc 1 2484 2 view .LVU1990
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5543              		.loc 1 2480 1 is_stmt 0 view .LVU1991
 5544 0000 30B5     		push	{r4, r5, lr}
 5545              		.cfi_def_cfa_offset 12
 5546              		.cfi_offset 4, -12
 5547              		.cfi_offset 5, -8
 5548              		.cfi_offset 14, -4
 5549 0002 85B0     		sub	sp, sp, #20
 5550              		.cfi_def_cfa_offset 32
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5551              		.loc 1 2480 1 view .LVU1992
 5552 0004 CDE90010 		strd	r1, r0, [sp]
2485:source\fatfs/ff.c **** 
2486:source\fatfs/ff.c **** 
2487:source\fatfs/ff.c **** 	vol = get_ldnumber(&rp);
 5553              		.loc 1 2487 8 view .LVU1993
 5554 0008 03A8     		add	r0, sp, #12
 5555              	.LVL621:
2484:source\fatfs/ff.c **** 
 5556              		.loc 1 2484 15 view .LVU1994
 5557 000a 0391     		str	r1, [sp, #12]
 5558              		.loc 1 2487 2 is_stmt 1 view .LVU1995
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5559              		.loc 1 2480 1 is_stmt 0 view .LVU1996
 5560 000c 1446     		mov	r4, r2
 5561              		.loc 1 2487 8 view .LVU1997
 5562 000e FFF7FEFF 		bl	get_ldnumber
 5563              	.LVL622:
2488:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5564              		.loc 1 2488 2 is_stmt 1 view .LVU1998
 5565              		.loc 1 2488 5 is_stmt 0 view .LVU1999
 5566 0012 011E     		subs	r1, r0, #0
 5567 0014 19DB     		blt	.L614
2489:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5568              		.loc 1 2489 2 is_stmt 1 view .LVU2000
 5569              		.loc 1 2489 6 is_stmt 0 view .LVU2001
 5570 0016 0F4D     		ldr	r5, .L623
 5571 0018 55F82100 		ldr	r0, [r5, r1, lsl #2]
 5572              	.LVL623:
2490:source\fatfs/ff.c **** 
2491:source\fatfs/ff.c **** 	if (cfs) {
 5573              		.loc 1 2491 2 is_stmt 1 view .LVU2002
 5574              		.loc 1 2491 5 is_stmt 0 view .LVU2003
 5575 001c 20B1     		cbz	r0, .L612
2492:source\fatfs/ff.c **** #if _FS_LOCK
2493:source\fatfs/ff.c **** 		clear_lock(cfs);
 5576              		.loc 1 2493 3 is_stmt 1 view .LVU2004
 5577 001e FFF7FEFF 		bl	clear_lock
 5578              	.LVL624:
2494:source\fatfs/ff.c **** #endif
2495:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
2496:source\fatfs/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
2497:source\fatfs/ff.c **** #endif
2498:source\fatfs/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 5579              		.loc 1 2498 3 view .LVU2005
 5580              		.loc 1 2498 16 is_stmt 0 view .LVU2006
 5581 0022 0023     		movs	r3, #0
 5582 0024 80F80032 		strb	r3, [r0, #512]
 5583              	.L612:
2499:source\fatfs/ff.c **** 	}
2500:source\fatfs/ff.c **** 
2501:source\fatfs/ff.c **** 	if (fs) {
 5584              		.loc 1 2501 2 is_stmt 1 view .LVU2007
 5585              		.loc 1 2501 6 is_stmt 0 view .LVU2008
 5586 0028 0198     		ldr	r0, [sp, #4]
 5587              	.LVL625:
 5588              		.loc 1 2501 5 view .LVU2009
 5589 002a 10B1     		cbz	r0, .L613
2502:source\fatfs/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 5590              		.loc 1 2502 3 is_stmt 1 view .LVU2010
 5591              		.loc 1 2502 15 is_stmt 0 view .LVU2011
 5592 002c 0023     		movs	r3, #0
 5593 002e 80F80032 		strb	r3, [r0, #512]
 5594              	.L613:
2503:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
2504:source\fatfs/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
2505:source\fatfs/ff.c **** #endif
2506:source\fatfs/ff.c **** 	}
2507:source\fatfs/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 5595              		.loc 1 2507 2 is_stmt 1 view .LVU2012
 5596              		.loc 1 2507 13 is_stmt 0 view .LVU2013
 5597 0032 45F82100 		str	r0, [r5, r1, lsl #2]
2508:source\fatfs/ff.c **** 
2509:source\fatfs/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 5598              		.loc 1 2509 2 is_stmt 1 view .LVU2014
 5599              		.loc 1 2509 5 is_stmt 0 view .LVU2015
 5600 0036 30B1     		cbz	r0, .L611
 5601              		.loc 1 2509 10 discriminator 2 view .LVU2016
 5602 0038 012C     		cmp	r4, #1
 5603 003a 08D1     		bne	.L616
2510:source\fatfs/ff.c **** 
2511:source\fatfs/ff.c **** 	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 5604              		.loc 1 2511 2 is_stmt 1 view .LVU2017
 5605              		.loc 1 2511 8 is_stmt 0 view .LVU2018
 5606 003c 0022     		movs	r2, #0
 5607 003e 6946     		mov	r1, sp
 5608              	.LVL626:
 5609              		.loc 1 2511 8 view .LVU2019
 5610 0040 01A8     		add	r0, sp, #4
 5611 0042 FFF7FEFF 		bl	find_volume
 5612              	.LVL627:
2512:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
 5613              		.loc 1 2512 2 is_stmt 1 view .LVU2020
 5614              	.L611:
2513:source\fatfs/ff.c **** }
 5615              		.loc 1 2513 1 is_stmt 0 view .LVU2021
 5616 0046 05B0     		add	sp, sp, #20
 5617              		.cfi_remember_state
 5618              		.cfi_def_cfa_offset 12
 5619              		@ sp needed
 5620 0048 30BD     		pop	{r4, r5, pc}
 5621              	.LVL628:
 5622              	.L614:
 5623              		.cfi_restore_state
2488:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5624              		.loc 1 2488 22 view .LVU2022
 5625 004a 0B20     		movs	r0, #11
 5626              	.LVL629:
2488:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5627              		.loc 1 2488 22 view .LVU2023
 5628 004c FBE7     		b	.L611
 5629              	.L616:
2509:source\fatfs/ff.c **** 
 5630              		.loc 1 2509 30 view .LVU2024
 5631 004e 0020     		movs	r0, #0
 5632 0050 F9E7     		b	.L611
 5633              	.L624:
 5634 0052 00BF     		.align	2
 5635              	.L623:
 5636 0054 00000000 		.word	.LANCHOR1
 5637              		.cfi_endproc
 5638              	.LFE169:
 5640              		.section	.text.f_open,"ax",%progbits
 5641              		.align	1
 5642              		.global	f_open
 5643              		.syntax unified
 5644              		.thumb
 5645              		.thumb_func
 5647              	f_open:
 5648              	.LVL630:
 5649              	.LFB170:
2514:source\fatfs/ff.c **** 
2515:source\fatfs/ff.c **** 
2516:source\fatfs/ff.c **** 
2517:source\fatfs/ff.c **** 
2518:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2519:source\fatfs/ff.c **** /* Open or Create a File                                                 */
2520:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2521:source\fatfs/ff.c **** 
2522:source\fatfs/ff.c **** FRESULT f_open (
2523:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
2524:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
2525:source\fatfs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2526:source\fatfs/ff.c **** )
2527:source\fatfs/ff.c **** {
 5650              		.loc 1 2527 1 is_stmt 1 view -0
 5651              		.cfi_startproc
 5652              		@ args = 0, pretend = 0, frame = 576
 5653              		@ frame_needed = 0, uses_anonymous_args = 0
2528:source\fatfs/ff.c **** 	FRESULT res;
 5654              		.loc 1 2528 2 view .LVU2026
2529:source\fatfs/ff.c **** 	DIR dj;
 5655              		.loc 1 2529 2 view .LVU2027
2530:source\fatfs/ff.c **** 	BYTE *dir;
 5656              		.loc 1 2530 2 view .LVU2028
2531:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 5657              		.loc 1 2531 2 view .LVU2029
 5658              		.loc 1 2531 2 view .LVU2030
2532:source\fatfs/ff.c **** #if !_FS_READONLY
2533:source\fatfs/ff.c **** 	DWORD dw, cl;
 5659              		.loc 1 2533 2 view .LVU2031
2534:source\fatfs/ff.c **** #endif
2535:source\fatfs/ff.c **** 
2536:source\fatfs/ff.c **** 
2537:source\fatfs/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 5660              		.loc 1 2537 2 view .LVU2032
2527:source\fatfs/ff.c **** 	FRESULT res;
 5661              		.loc 1 2527 1 is_stmt 0 view .LVU2033
 5662 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5663              		.cfi_def_cfa_offset 32
 5664              		.cfi_offset 4, -32
 5665              		.cfi_offset 5, -28
 5666              		.cfi_offset 6, -24
 5667              		.cfi_offset 7, -20
 5668              		.cfi_offset 8, -16
 5669              		.cfi_offset 9, -12
 5670              		.cfi_offset 10, -8
 5671              		.cfi_offset 14, -4
 5672 0004 ADF5107D 		sub	sp, sp, #576
 5673              		.cfi_def_cfa_offset 608
2527:source\fatfs/ff.c **** 	FRESULT res;
 5674              		.loc 1 2527 1 view .LVU2034
 5675 0008 9146     		mov	r9, r2
 5676 000a 0191     		str	r1, [sp, #4]
 5677              		.loc 1 2537 5 view .LVU2035
 5678 000c 0646     		mov	r6, r0
 5679 000e 0028     		cmp	r0, #0
 5680 0010 00F0CD80 		beq	.L637
2538:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 5681              		.loc 1 2538 2 is_stmt 1 view .LVU2036
 5682              		.loc 1 2538 9 is_stmt 0 view .LVU2037
 5683 0014 0023     		movs	r3, #0
 5684 0016 C0F80032 		str	r3, [r0, #512]
2539:source\fatfs/ff.c **** 
2540:source\fatfs/ff.c **** 	/* Get logical drive number */
2541:source\fatfs/ff.c **** #if !_FS_READONLY
2542:source\fatfs/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 5685              		.loc 1 2542 2 is_stmt 1 view .LVU2038
 5686              	.LVL631:
2543:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5687              		.loc 1 2543 2 view .LVU2039
 5688              		.loc 1 2543 8 is_stmt 0 view .LVU2040
 5689 001a 02F01E02 		and	r2, r2, #30
 5690              	.LVL632:
 5691              		.loc 1 2543 8 view .LVU2041
 5692 001e 01A9     		add	r1, sp, #4
 5693              	.LVL633:
 5694              		.loc 1 2543 8 view .LVU2042
 5695 0020 86A8     		add	r0, sp, #536
 5696              	.LVL634:
 5697              		.loc 1 2543 8 view .LVU2043
 5698 0022 FFF7FEFF 		bl	find_volume
 5699              	.LVL635:
2544:source\fatfs/ff.c **** #else
2545:source\fatfs/ff.c **** 	mode &= FA_READ;
2546:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2547:source\fatfs/ff.c **** #endif
2548:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5700              		.loc 1 2548 2 is_stmt 1 view .LVU2044
 5701              		.loc 1 2548 5 is_stmt 0 view .LVU2045
 5702 0026 0028     		cmp	r0, #0
 5703 0028 40F0C380 		bne	.L638
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5704              		.loc 1 2549 3 is_stmt 1 view .LVU2046
 5705 002c 4FF40070 		mov	r0, #512
 5706              	.LVL636:
 5707              		.loc 1 2549 3 is_stmt 0 view .LVU2047
 5708 0030 FFF7FEFF 		bl	ff_memalloc
 5709              	.LVL637:
 5710              		.loc 1 2549 3 is_stmt 1 view .LVU2048
 5711 0034 8046     		mov	r8, r0
 5712 0036 0028     		cmp	r0, #0
 5713 0038 00F0BD80 		beq	.L639
 5714              		.loc 1 2549 3 is_stmt 0 discriminator 2 view .LVU2049
 5715 003c 8E90     		str	r0, [sp, #568]
 5716 003e 03AB     		add	r3, sp, #12
2550:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5717              		.loc 1 2550 9 discriminator 2 view .LVU2050
 5718 0040 0199     		ldr	r1, [sp, #4]
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5719              		.loc 1 2549 3 discriminator 2 view .LVU2051
 5720 0042 8C93     		str	r3, [sp, #560]
 5721              		.loc 1 2550 9 discriminator 2 view .LVU2052
 5722 0044 06A8     		add	r0, sp, #24
 5723              	.LVL638:
 5724              		.loc 1 2550 9 discriminator 2 view .LVU2053
 5725 0046 FFF7FEFF 		bl	follow_path
 5726              	.LVL639:
2542:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5727              		.loc 1 2542 7 discriminator 2 view .LVU2054
 5728 004a 09F01F07 		and	r7, r9, #31
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5729              		.loc 1 2549 3 is_stmt 1 discriminator 2 view .LVU2055
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5730              		.loc 1 2549 3 discriminator 2 view .LVU2056
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5731              		.loc 1 2549 15 discriminator 2 view .LVU2057
 5732              		.loc 1 2550 3 discriminator 2 view .LVU2058
 5733              	.LVL640:
2551:source\fatfs/ff.c **** 		dir = dj.dir;
 5734              		.loc 1 2551 3 discriminator 2 view .LVU2059
 5735              		.loc 1 2551 7 is_stmt 0 discriminator 2 view .LVU2060
 5736 004e 8B9D     		ldr	r5, [sp, #556]
 5737              	.LVL641:
2552:source\fatfs/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2553:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5738              		.loc 1 2553 3 is_stmt 1 discriminator 2 view .LVU2061
 5739              		.loc 1 2553 6 is_stmt 0 discriminator 2 view .LVU2062
 5740 0050 0446     		mov	r4, r0
 5741 0052 50B9     		cbnz	r0, .L627
2554:source\fatfs/ff.c **** 			if (!dir)	/* Default directory itself */
 5742              		.loc 1 2554 4 is_stmt 1 view .LVU2063
 5743              		.loc 1 2554 7 is_stmt 0 view .LVU2064
 5744 0054 002D     		cmp	r5, #0
 5745 0056 73D0     		beq	.L640
2555:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
2556:source\fatfs/ff.c **** #if _FS_LOCK
2557:source\fatfs/ff.c **** 			else
2558:source\fatfs/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 5746              		.loc 1 2558 5 is_stmt 1 view .LVU2065
 5747              		.loc 1 2558 11 is_stmt 0 view .LVU2066
 5748 0058 17F01E0F 		tst	r7, #30
 5749 005c 14BF     		ite	ne
 5750 005e 0121     		movne	r1, #1
 5751 0060 0021     		moveq	r1, #0
 5752 0062 06A8     		add	r0, sp, #24
 5753              	.LVL642:
 5754              		.loc 1 2558 11 view .LVU2067
 5755 0064 FFF7FEFF 		bl	chk_lock
 5756              	.LVL643:
 5757 0068 0446     		mov	r4, r0
 5758              	.LVL644:
 5759              	.L627:
2559:source\fatfs/ff.c **** #endif
2560:source\fatfs/ff.c **** 		}
2561:source\fatfs/ff.c **** 		/* Create or Open a file */
2562:source\fatfs/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 5760              		.loc 1 2562 3 is_stmt 1 view .LVU2068
 5761              		.loc 1 2562 6 is_stmt 0 view .LVU2069
 5762 006a 19F01C0F 		tst	r9, #28
 5763 006e 76D0     		beq	.L628
2563:source\fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5764              		.loc 1 2563 4 is_stmt 1 view .LVU2070
 5765              		.loc 1 2563 7 is_stmt 0 view .LVU2071
 5766 0070 002C     		cmp	r4, #0
 5767 0072 69D0     		beq	.L629
2564:source\fatfs/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 5768              		.loc 1 2564 5 is_stmt 1 view .LVU2072
 5769              		.loc 1 2564 8 is_stmt 0 view .LVU2073
 5770 0074 042C     		cmp	r4, #4
 5771 0076 09D1     		bne	.L630
 5772              	.LVL645:
 5773              	.LBB115:
 5774              	.LBB116:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5775              		.loc 1 692 14 is_stmt 1 view .LVU2074
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5776              		.loc 1 692 38 is_stmt 0 view .LVU2075
 5777 0078 504B     		ldr	r3, .L667
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5778              		.loc 1 692 27 view .LVU2076
 5779 007a 1A68     		ldr	r2, [r3]
 5780 007c 12B1     		cbz	r2, .L631
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5781              		.loc 1 692 48 is_stmt 1 view .LVU2077
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5782              		.loc 1 692 43 view .LVU2078
 5783              	.LVL646:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5784              		.loc 1 692 14 view .LVU2079
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5785              		.loc 1 692 27 is_stmt 0 view .LVU2080
 5786 007e DB68     		ldr	r3, [r3, #12]
 5787 0080 002B     		cmp	r3, #0
 5788 0082 5FD1     		bne	.L641
 5789              	.LVL647:
 5790              	.L631:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5791              		.loc 1 692 27 view .LVU2081
 5792              	.LBE116:
 5793              	.LBE115:
2565:source\fatfs/ff.c **** #if _FS_LOCK
2566:source\fatfs/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 5794              		.loc 1 2566 25 discriminator 1 view .LVU2082
 5795 0084 06A8     		add	r0, sp, #24
 5796 0086 FFF7FEFF 		bl	dir_register
 5797              	.LVL648:
 5798 008a 0446     		mov	r4, r0
 5799              	.LVL649:
 5800              	.L630:
2567:source\fatfs/ff.c **** #else
2568:source\fatfs/ff.c **** 					res = dir_register(&dj);
2569:source\fatfs/ff.c **** #endif
2570:source\fatfs/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 5801              		.loc 1 2570 5 is_stmt 1 view .LVU2083
2571:source\fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
 5802              		.loc 1 2571 9 is_stmt 0 view .LVU2084
 5803 008c 8B9D     		ldr	r5, [sp, #556]
 5804              	.LVL650:
2570:source\fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
 5805              		.loc 1 2570 10 view .LVU2085
 5806 008e 47F00807 		orr	r7, r7, #8
 5807              	.LVL651:
 5808              		.loc 1 2571 5 is_stmt 1 view .LVU2086
2572:source\fatfs/ff.c **** 			}
2573:source\fatfs/ff.c **** 			else {								/* Any object is already existing */
2574:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2575:source\fatfs/ff.c **** 					res = FR_DENIED;
2576:source\fatfs/ff.c **** 				} else {
2577:source\fatfs/ff.c **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2578:source\fatfs/ff.c **** 						res = FR_EXIST;
2579:source\fatfs/ff.c **** 				}
2580:source\fatfs/ff.c **** 			}
2581:source\fatfs/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 5809              		.loc 1 2581 4 view .LVU2087
 5810              		.loc 1 2581 7 is_stmt 0 view .LVU2088
 5811 0092 9CBB     		cbnz	r4, .L633
 5812              	.LVL652:
 5813              	.L632:
2582:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5814              		.loc 1 2582 5 is_stmt 1 view .LVU2089
 5815              		.loc 1 2582 10 is_stmt 0 view .LVU2090
 5816 0094 FFF7FEFF 		bl	get_fattime
 5817              	.LVL653:
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5818              		.loc 1 2583 5 is_stmt 1 view .LVU2091
 5819 0098 C0F30723 		ubfx	r3, r0, #8, #8
 5820 009c EB73     		strb	r3, [r5, #15]
 5821 009e 030C     		lsrs	r3, r0, #16
2584:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5822              		.loc 1 2584 19 is_stmt 0 view .LVU2092
 5823 00a0 0024     		movs	r4, #0
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5824              		.loc 1 2583 5 view .LVU2093
 5825 00a2 2B74     		strb	r3, [r5, #16]
 5826 00a4 030E     		lsrs	r3, r0, #24
 5827 00a6 A873     		strb	r0, [r5, #14]
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5828              		.loc 1 2583 5 is_stmt 1 view .LVU2094
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5829              		.loc 1 2583 5 view .LVU2095
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5830              		.loc 1 2583 5 view .LVU2096
 5831 00a8 6B74     		strb	r3, [r5, #17]
 5832              		.loc 1 2584 5 view .LVU2097
 5833              		.loc 1 2584 19 is_stmt 0 view .LVU2098
 5834 00aa EC72     		strb	r4, [r5, #11]
2585:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 5835              		.loc 1 2585 5 is_stmt 1 view .LVU2099
 5836 00ac 2C77     		strb	r4, [r5, #28]
 5837              		.loc 1 2585 5 view .LVU2100
 5838 00ae 6C77     		strb	r4, [r5, #29]
 5839              		.loc 1 2585 5 view .LVU2101
 5840 00b0 AC77     		strb	r4, [r5, #30]
 5841              		.loc 1 2585 5 view .LVU2102
 5842 00b2 EC77     		strb	r4, [r5, #31]
2586:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5843              		.loc 1 2586 5 view .LVU2103
 5844              		.loc 1 2586 10 is_stmt 0 view .LVU2104
 5845 00b4 869B     		ldr	r3, [sp, #536]
 5846 00b6 2946     		mov	r1, r5
 5847 00b8 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 5848              	.LVL654:
 5849              		.loc 1 2586 10 view .LVU2105
 5850 00bc FFF7FEFF 		bl	ld_clust.isra.0
 5851              	.LVL655:
2587:source\fatfs/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 5852              		.loc 1 2587 5 is_stmt 1 view .LVU2106
 5853              	.LBB117:
 5854              	.LBI117:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 5855              		.loc 1 1325 6 view .LVU2107
 5856              	.LBB118:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 5857              		.loc 1 1330 2 view .LVU2108
 5858 00c0 AC76     		strb	r4, [r5, #26]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 5859              		.loc 1 1330 2 view .LVU2109
 5860 00c2 EC76     		strb	r4, [r5, #27]
1331:source\fatfs/ff.c **** }
 5861              		.loc 1 1331 2 view .LVU2110
 5862 00c4 2C75     		strb	r4, [r5, #20]
1331:source\fatfs/ff.c **** }
 5863              		.loc 1 1331 2 view .LVU2111
 5864 00c6 6C75     		strb	r4, [r5, #21]
 5865              	.LVL656:
1331:source\fatfs/ff.c **** }
 5866              		.loc 1 1331 2 is_stmt 0 view .LVU2112
 5867              	.LBE118:
 5868              	.LBE117:
2588:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 5869              		.loc 1 2588 5 is_stmt 1 view .LVU2113
 5870              		.loc 1 2588 7 is_stmt 0 view .LVU2114
 5871 00c8 869B     		ldr	r3, [sp, #536]
 5872              		.loc 1 2588 18 view .LVU2115
 5873 00ca 0122     		movs	r2, #1
 5874 00cc 83F80422 		strb	r2, [r3, #516]
2589:source\fatfs/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 5875              		.loc 1 2589 5 is_stmt 1 view .LVU2116
 5876              		.loc 1 2589 8 is_stmt 0 view .LVU2117
 5877 00d0 8146     		mov	r9, r0
 5878 00d2 0028     		cmp	r0, #0
 5879 00d4 4DD0     		beq	.L635
 5880              	.LVL657:
2590:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
 5881              		.loc 1 2590 6 is_stmt 1 view .LVU2118
2591:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
 5882              		.loc 1 2591 12 is_stmt 0 view .LVU2119
 5883 00d6 0146     		mov	r1, r0
 5884              	.LVL658:
 5885              		.loc 1 2591 12 view .LVU2120
 5886 00d8 1846     		mov	r0, r3
 5887              	.LVL659:
2590:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
 5888              		.loc 1 2590 9 view .LVU2121
 5889 00da D3F82CA2 		ldr	r10, [r3, #556]
 5890              	.LVL660:
 5891              		.loc 1 2591 6 is_stmt 1 view .LVU2122
 5892              		.loc 1 2591 12 is_stmt 0 view .LVU2123
 5893 00de FFF7FEFF 		bl	remove_chain
 5894              	.LVL661:
2592:source\fatfs/ff.c **** 					if (res == FR_OK) {
 5895              		.loc 1 2592 6 is_stmt 1 view .LVU2124
 5896              		.loc 1 2592 9 is_stmt 0 view .LVU2125
 5897 00e2 0446     		mov	r4, r0
 5898 00e4 50B9     		cbnz	r0, .L633
2593:source\fatfs/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 5899              		.loc 1 2593 7 is_stmt 1 view .LVU2126
 5900              		.loc 1 2593 9 is_stmt 0 view .LVU2127
 5901 00e6 8698     		ldr	r0, [sp, #536]
 5902              	.LVL662:
 5903              		.loc 1 2593 30 view .LVU2128
 5904 00e8 09F1FF31 		add	r1, r9, #-1
 5905              		.loc 1 2593 25 view .LVU2129
 5906 00ec C0F80C12 		str	r1, [r0, #524]
2594:source\fatfs/ff.c **** 						res = move_window(dj.fs, dw);
 5907              		.loc 1 2594 7 is_stmt 1 view .LVU2130
 5908              		.loc 1 2594 13 is_stmt 0 view .LVU2131
 5909 00f0 5146     		mov	r1, r10
 5910 00f2 FFF7FEFF 		bl	move_window
 5911              	.LVL663:
2595:source\fatfs/ff.c **** 					}
2596:source\fatfs/ff.c **** 				}
2597:source\fatfs/ff.c **** 			}
2598:source\fatfs/ff.c **** 		}
2599:source\fatfs/ff.c **** 		else {	/* Open an existing file */
2600:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Follow succeeded */
2601:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
2602:source\fatfs/ff.c **** 					res = FR_NO_FILE;
2603:source\fatfs/ff.c **** 				} else {
2604:source\fatfs/ff.c **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2605:source\fatfs/ff.c **** 						res = FR_DENIED;
2606:source\fatfs/ff.c **** 				}
2607:source\fatfs/ff.c **** 			}
2608:source\fatfs/ff.c **** 		}
2609:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5912              		.loc 1 2609 3 is_stmt 1 view .LVU2132
 5913              		.loc 1 2609 6 is_stmt 0 view .LVU2133
 5914 00f6 0446     		mov	r4, r0
 5915 00f8 0028     		cmp	r0, #0
 5916 00fa 3AD0     		beq	.L635
 5917              	.LVL664:
 5918              	.L633:
2610:source\fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2611:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
2612:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
2613:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
2614:source\fatfs/ff.c **** #if _FS_LOCK
2615:source\fatfs/ff.c **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2616:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
2617:source\fatfs/ff.c **** #endif
2618:source\fatfs/ff.c **** 		}
2619:source\fatfs/ff.c **** 
2620:source\fatfs/ff.c **** #else				/* R/O configuration */
2621:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow succeeded */
2622:source\fatfs/ff.c **** 			dir = dj.dir;
2623:source\fatfs/ff.c **** 			if (!dir) {						/* Current directory itself */
2624:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
2625:source\fatfs/ff.c **** 			} else {
2626:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2627:source\fatfs/ff.c **** 					res = FR_NO_FILE;
2628:source\fatfs/ff.c **** 			}
2629:source\fatfs/ff.c **** 		}
2630:source\fatfs/ff.c **** #endif
2631:source\fatfs/ff.c **** 		FREE_BUF();
 5919              		.loc 1 2631 3 is_stmt 1 view .LVU2134
 5920 00fc 4046     		mov	r0, r8
 5921 00fe FFF7FEFF 		bl	ff_memfree
 5922              	.LVL665:
2632:source\fatfs/ff.c **** 
2633:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5923              		.loc 1 2633 3 view .LVU2135
 5924              		.loc 1 2633 6 is_stmt 0 view .LVU2136
 5925 0102 C4B9     		cbnz	r4, .L647
 5926              	.LVL666:
2634:source\fatfs/ff.c **** 			fp->flag = mode;					/* File access mode */
 5927              		.loc 1 2634 4 is_stmt 1 view .LVU2137
 5928              		.loc 1 2634 13 is_stmt 0 view .LVU2138
 5929 0104 86F80672 		strb	r7, [r6, #518]
2635:source\fatfs/ff.c **** 			fp->err = 0;						/* Clear error flag */
 5930              		.loc 1 2635 4 is_stmt 1 view .LVU2139
2636:source\fatfs/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 5931              		.loc 1 2636 17 is_stmt 0 view .LVU2140
 5932 0108 869F     		ldr	r7, [sp, #536]
 5933              	.LVL667:
2635:source\fatfs/ff.c **** 			fp->err = 0;						/* Clear error flag */
 5934              		.loc 1 2635 12 view .LVU2141
 5935 010a 86F80742 		strb	r4, [r6, #519]
 5936              		.loc 1 2636 4 is_stmt 1 view .LVU2142
 5937              		.loc 1 2636 17 is_stmt 0 view .LVU2143
 5938 010e 97F80002 		ldrb	r0, [r7, #512]	@ zero_extendqisi2
 5939 0112 2946     		mov	r1, r5
 5940 0114 FFF7FEFF 		bl	ld_clust.isra.0
 5941              	.LVL668:
 5942              		.loc 1 2636 15 view .LVU2144
 5943 0118 C6F81002 		str	r0, [r6, #528]
2637:source\fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 5944              		.loc 1 2637 4 is_stmt 1 view .LVU2145
 5945              		.loc 1 2637 16 is_stmt 0 view .LVU2146
 5946 011c EB69     		ldr	r3, [r5, #28]	@ unaligned
2638:source\fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
2639:source\fatfs/ff.c **** 			fp->dsect = 0;
 5947              		.loc 1 2639 14 view .LVU2147
 5948 011e C6F81842 		str	r4, [r6, #536]
2638:source\fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
 5949              		.loc 1 2638 13 view .LVU2148
 5950 0122 C6E98243 		strd	r4, r3, [r6, #520]
 5951              		.loc 1 2639 4 is_stmt 1 view .LVU2149
2640:source\fatfs/ff.c **** #if _USE_FASTSEEK
2641:source\fatfs/ff.c **** 			fp->cltbl = 0;						/* Normal seek mode */
 5952              		.loc 1 2641 4 view .LVU2150
2642:source\fatfs/ff.c **** #endif
2643:source\fatfs/ff.c **** 			fp->fs = dj.fs;	 					/* Validate file object */
2644:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
 5953              		.loc 1 2644 11 is_stmt 0 view .LVU2151
 5954 0126 B7F80632 		ldrh	r3, [r7, #518]
2641:source\fatfs/ff.c **** #endif
 5955              		.loc 1 2641 14 view .LVU2152
 5956 012a C6F82442 		str	r4, [r6, #548]
2643:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
 5957              		.loc 1 2643 4 is_stmt 1 view .LVU2153
2643:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
 5958              		.loc 1 2643 11 is_stmt 0 view .LVU2154
 5959 012e C6F80072 		str	r7, [r6, #512]
 5960              		.loc 1 2644 4 is_stmt 1 view .LVU2155
 5961              		.loc 1 2644 11 is_stmt 0 view .LVU2156
 5962 0132 A6F80432 		strh	r3, [r6, #516]	@ movhi
 5963              	.LVL669:
 5964              	.L647:
2645:source\fatfs/ff.c **** 		}
2646:source\fatfs/ff.c **** 	}
2647:source\fatfs/ff.c **** 
2648:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2649:source\fatfs/ff.c **** }
 5965              		.loc 1 2649 1 view .LVU2157
 5966 0136 2046     		mov	r0, r4
 5967 0138 0DF5107D 		add	sp, sp, #576
 5968              		.cfi_remember_state
 5969              		.cfi_def_cfa_offset 32
 5970              		@ sp needed
 5971 013c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5972              	.LVL670:
 5973              	.L640:
 5974              		.cfi_restore_state
2555:source\fatfs/ff.c **** #if _FS_LOCK
 5975              		.loc 1 2555 9 view .LVU2158
 5976 0140 0624     		movs	r4, #6
 5977 0142 92E7     		b	.L627
 5978              	.LVL671:
 5979              	.L641:
2566:source\fatfs/ff.c **** #else
 5980              		.loc 1 2566 43 view .LVU2159
 5981 0144 1224     		movs	r4, #18
 5982              	.LVL672:
2566:source\fatfs/ff.c **** #else
 5983              		.loc 1 2566 43 view .LVU2160
 5984 0146 A1E7     		b	.L630
 5985              	.LVL673:
 5986              	.L629:
2574:source\fatfs/ff.c **** 					res = FR_DENIED;
 5987              		.loc 1 2574 5 is_stmt 1 view .LVU2161
2574:source\fatfs/ff.c **** 					res = FR_DENIED;
 5988              		.loc 1 2574 8 is_stmt 0 view .LVU2162
 5989 0148 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5990 014a 13F0110F 		tst	r3, #17
 5991 014e 2CD1     		bne	.L645
2577:source\fatfs/ff.c **** 						res = FR_EXIST;
 5992              		.loc 1 2577 6 is_stmt 1 view .LVU2163
2577:source\fatfs/ff.c **** 						res = FR_EXIST;
 5993              		.loc 1 2577 9 is_stmt 0 view .LVU2164
 5994 0150 19F0040F 		tst	r9, #4
 5995 0154 25D1     		bne	.L643
 5996              	.LVL674:
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5997              		.loc 1 2581 4 is_stmt 1 view .LVU2165
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5998              		.loc 1 2581 21 is_stmt 0 view .LVU2166
 5999 0156 19F0080F 		tst	r9, #8
 6000 015a 0AD0     		beq	.L635
 6001 015c 9AE7     		b	.L632
 6002              	.LVL675:
 6003              	.L628:
2600:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 6004              		.loc 1 2600 4 is_stmt 1 view .LVU2167
2600:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 6005              		.loc 1 2600 7 is_stmt 0 view .LVU2168
 6006 015e 002C     		cmp	r4, #0
 6007 0160 CCD1     		bne	.L633
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6008              		.loc 1 2601 5 is_stmt 1 view .LVU2169
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6009              		.loc 1 2601 12 is_stmt 0 view .LVU2170
 6010 0162 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6011              		.loc 1 2601 8 view .LVU2171
 6012 0164 D806     		lsls	r0, r3, #27
 6013 0166 1ED4     		bmi	.L644
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6014              		.loc 1 2604 6 is_stmt 1 view .LVU2172
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6015              		.loc 1 2604 9 is_stmt 0 view .LVU2173
 6016 0168 19F0020F 		tst	r9, #2
 6017 016c 01D0     		beq	.L635
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6018              		.loc 1 2604 28 discriminator 1 view .LVU2174
 6019 016e DA07     		lsls	r2, r3, #31
 6020 0170 1BD4     		bmi	.L645
 6021              	.LVL676:
 6022              	.L635:
2610:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
 6023              		.loc 1 2610 4 is_stmt 1 view .LVU2175
2610:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
 6024              		.loc 1 2610 7 is_stmt 0 view .LVU2176
 6025 0172 3B07     		lsls	r3, r7, #28
2611:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 6026              		.loc 1 2611 5 is_stmt 1 view .LVU2177
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6027              		.loc 1 2612 24 is_stmt 0 view .LVU2178
 6028 0174 869B     		ldr	r3, [sp, #536]
2611:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 6029              		.loc 1 2611 10 view .LVU2179
 6030 0176 48BF     		it	mi
 6031 0178 47F02007 		orrmi	r7, r7, #32
 6032              	.LVL677:
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6033              		.loc 1 2612 4 is_stmt 1 view .LVU2180
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6034              		.loc 1 2612 17 is_stmt 0 view .LVU2181
 6035 017c D3F82C32 		ldr	r3, [r3, #556]
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6036              		.loc 1 2615 17 view .LVU2182
 6037 0180 17F0FE0F 		tst	r7, #254
 6038 0184 14BF     		ite	ne
 6039 0186 0121     		movne	r1, #1
 6040 0188 0021     		moveq	r1, #0
2613:source\fatfs/ff.c **** #if _FS_LOCK
 6041              		.loc 1 2613 16 view .LVU2183
 6042 018a C6E98735 		strd	r3, r5, [r6, #540]
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6043              		.loc 1 2615 4 is_stmt 1 view .LVU2184
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6044              		.loc 1 2615 17 is_stmt 0 view .LVU2185
 6045 018e 06A8     		add	r0, sp, #24
 6046 0190 FFF7FEFF 		bl	inc_lock
 6047              	.LVL678:
2616:source\fatfs/ff.c **** #endif
 6048              		.loc 1 2616 25 view .LVU2186
 6049 0194 0028     		cmp	r0, #0
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6050              		.loc 1 2615 15 view .LVU2187
 6051 0196 C6F82802 		str	r0, [r6, #552]
2616:source\fatfs/ff.c **** #endif
 6052              		.loc 1 2616 4 is_stmt 1 view .LVU2188
2616:source\fatfs/ff.c **** #endif
 6053              		.loc 1 2616 25 is_stmt 0 view .LVU2189
 6054 019a 14BF     		ite	ne
 6055 019c 0024     		movne	r4, #0
 6056 019e 0224     		moveq	r4, #2
 6057 01a0 ACE7     		b	.L633
 6058              	.LVL679:
 6059              	.L643:
2578:source\fatfs/ff.c **** 				}
 6060              		.loc 1 2578 11 view .LVU2190
 6061 01a2 0824     		movs	r4, #8
 6062              	.LVL680:
2578:source\fatfs/ff.c **** 				}
 6063              		.loc 1 2578 11 view .LVU2191
 6064 01a4 AAE7     		b	.L633
 6065              	.LVL681:
 6066              	.L644:
2602:source\fatfs/ff.c **** 				} else {
 6067              		.loc 1 2602 10 view .LVU2192
 6068 01a6 0424     		movs	r4, #4
 6069              	.LVL682:
2602:source\fatfs/ff.c **** 				} else {
 6070              		.loc 1 2602 10 view .LVU2193
 6071 01a8 A8E7     		b	.L633
 6072              	.LVL683:
 6073              	.L645:
2605:source\fatfs/ff.c **** 				}
 6074              		.loc 1 2605 11 view .LVU2194
 6075 01aa 0724     		movs	r4, #7
 6076              	.LVL684:
2605:source\fatfs/ff.c **** 				}
 6077              		.loc 1 2605 11 view .LVU2195
 6078 01ac A6E7     		b	.L633
 6079              	.LVL685:
 6080              	.L637:
2537:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 6081              		.loc 1 2537 18 view .LVU2196
 6082 01ae 0924     		movs	r4, #9
 6083 01b0 C1E7     		b	.L647
 6084              	.LVL686:
 6085              	.L638:
2537:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 6086              		.loc 1 2537 18 view .LVU2197
 6087 01b2 0446     		mov	r4, r0
 6088 01b4 BFE7     		b	.L647
 6089              	.LVL687:
 6090              	.L639:
2549:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6091              		.loc 1 2549 3 view .LVU2198
 6092 01b6 1124     		movs	r4, #17
 6093 01b8 BDE7     		b	.L647
 6094              	.L668:
 6095 01ba 00BF     		.align	2
 6096              	.L667:
 6097 01bc 00000000 		.word	.LANCHOR0
 6098              		.cfi_endproc
 6099              	.LFE170:
 6101              		.section	.text.f_read,"ax",%progbits
 6102              		.align	1
 6103              		.global	f_read
 6104              		.syntax unified
 6105              		.thumb
 6106              		.thumb_func
 6108              	f_read:
 6109              	.LVL688:
 6110              	.LFB171:
2650:source\fatfs/ff.c **** 
2651:source\fatfs/ff.c **** 
2652:source\fatfs/ff.c **** 
2653:source\fatfs/ff.c **** 
2654:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2655:source\fatfs/ff.c **** /* Read File                                                             */
2656:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2657:source\fatfs/ff.c **** 
2658:source\fatfs/ff.c **** FRESULT f_read (
2659:source\fatfs/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
2660:source\fatfs/ff.c **** 	unsigned char * buff,	/* Pointer to data buffer */
2661:source\fatfs/ff.c **** 	UINT btr,		/* Number of bytes to read */
2662:source\fatfs/ff.c **** 	UINT* br		/* Pointer to number of bytes read */
2663:source\fatfs/ff.c **** )
2664:source\fatfs/ff.c **** {
 6111              		.loc 1 2664 1 is_stmt 1 view -0
 6112              		.cfi_startproc
 6113              		@ args = 0, pretend = 0, frame = 8
 6114              		@ frame_needed = 0, uses_anonymous_args = 0
2665:source\fatfs/ff.c **** 	FRESULT res;
 6115              		.loc 1 2665 2 view .LVU2200
2666:source\fatfs/ff.c **** 	DWORD clst, sect, remain;
 6116              		.loc 1 2666 2 view .LVU2201
2667:source\fatfs/ff.c **** 	UINT rcnt, cc;
 6117              		.loc 1 2667 2 view .LVU2202
2668:source\fatfs/ff.c **** 	BYTE csect, *rbuff = (BYTE*)buff;
 6118              		.loc 1 2668 2 view .LVU2203
2664:source\fatfs/ff.c **** 	FRESULT res;
 6119              		.loc 1 2664 1 is_stmt 0 view .LVU2204
 6120 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6121              		.cfi_def_cfa_offset 48
 6122              		.cfi_offset 4, -36
 6123              		.cfi_offset 5, -32
 6124              		.cfi_offset 6, -28
 6125              		.cfi_offset 7, -24
 6126              		.cfi_offset 8, -20
 6127              		.cfi_offset 9, -16
 6128              		.cfi_offset 10, -12
 6129              		.cfi_offset 11, -8
 6130              		.cfi_offset 14, -4
2664:source\fatfs/ff.c **** 	FRESULT res;
 6131              		.loc 1 2664 1 view .LVU2205
 6132 0004 9A46     		mov	r10, r3
2669:source\fatfs/ff.c **** 
2670:source\fatfs/ff.c **** 
2671:source\fatfs/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6133              		.loc 1 2671 6 view .LVU2206
 6134 0006 0023     		movs	r3, #0
 6135              	.LVL689:
 6136              		.loc 1 2671 6 view .LVU2207
 6137 0008 CAF80030 		str	r3, [r10]
2664:source\fatfs/ff.c **** 	FRESULT res;
 6138              		.loc 1 2664 1 view .LVU2208
 6139 000c 0446     		mov	r4, r0
 6140 000e 8946     		mov	r9, r1
 6141              	.LVL690:
 6142              		.loc 1 2671 2 is_stmt 1 view .LVU2209
2672:source\fatfs/ff.c **** 
2673:source\fatfs/ff.c **** 	res = validate(fp);							/* Check validity */
 6143              		.loc 1 2673 2 view .LVU2210
2664:source\fatfs/ff.c **** 	FRESULT res;
 6144              		.loc 1 2664 1 is_stmt 0 view .LVU2211
 6145 0010 1646     		mov	r6, r2
 6146              		.loc 1 2673 8 view .LVU2212
 6147 0012 FFF7FEFF 		bl	validate
 6148              	.LVL691:
2674:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6149              		.loc 1 2674 2 is_stmt 1 view .LVU2213
 6150              		.loc 1 2674 5 is_stmt 0 view .LVU2214
 6151 0016 0546     		mov	r5, r0
 6152 0018 50BB     		cbnz	r0, .L670
2675:source\fatfs/ff.c **** 	if (fp->err)								/* Check error */
 6153              		.loc 1 2675 2 is_stmt 1 view .LVU2215
 6154              		.loc 1 2675 8 is_stmt 0 view .LVU2216
 6155 001a 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
 6156              		.loc 1 2675 5 view .LVU2217
 6157 001e 3DBB     		cbnz	r5, .L670
2676:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
2677:source\fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 6158              		.loc 1 2677 2 is_stmt 1 view .LVU2218
 6159 0020 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6160              		.loc 1 2677 5 is_stmt 0 view .LVU2219
 6161 0024 13F00103 		ands	r3, r3, #1
 6162 0028 0093     		str	r3, [sp]
 6163 002a 00F0AE80 		beq	.L688
 6164              	.LVL692:
 6165              	.LBB121:
 6166              	.LBI121:
2658:source\fatfs/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
 6167              		.loc 1 2658 9 is_stmt 1 view .LVU2220
 6168              	.LBB122:
2678:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2679:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 6169              		.loc 1 2679 2 view .LVU2221
2680:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6170              		.loc 1 2680 2 view .LVU2222
2679:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6171              		.loc 1 2679 9 is_stmt 0 view .LVU2223
 6172 002e D4E98232 		ldrd	r3, r2, [r4, #520]
 6173 0032 D21A     		subs	r2, r2, r3
 6174              	.LVL693:
2679:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6175              		.loc 1 2679 9 view .LVU2224
 6176 0034 9642     		cmp	r6, r2
 6177 0036 28BF     		it	cs
 6178 0038 1646     		movcs	r6, r2
 6179              	.LVL694:
 6180              	.L671:
2681:source\fatfs/ff.c **** 
2682:source\fatfs/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 6181              		.loc 1 2682 11 is_stmt 1 view .LVU2225
 6182              		.loc 1 2682 2 is_stmt 0 view .LVU2226
 6183 003a CEB1     		cbz	r6, .L670
2683:source\fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2684:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6184              		.loc 1 2684 3 is_stmt 1 view .LVU2227
 6185              		.loc 1 2684 10 is_stmt 0 view .LVU2228
 6186 003c D4F80812 		ldr	r1, [r4, #520]
 6187              		.loc 1 2684 17 view .LVU2229
 6188 0040 C1F30803 		ubfx	r3, r1, #0, #9
 6189              		.loc 1 2684 6 view .LVU2230
 6190 0044 002B     		cmp	r3, #0
 6191 0046 40F09180 		bne	.L672
2685:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6192              		.loc 1 2685 4 is_stmt 1 view .LVU2231
 6193              		.loc 1 2685 46 is_stmt 0 view .LVU2232
 6194 004a D4F80002 		ldr	r0, [r4, #512]
 6195              		.loc 1 2685 58 view .LVU2233
 6196 004e 90F80282 		ldrb	r8, [r0, #514]	@ zero_extendqisi2
 6197 0052 08F1FF38 		add	r8, r8, #-1
 6198              		.loc 1 2685 10 view .LVU2234
 6199 0056 08EA5128 		and	r8, r8, r1, lsr #9
 6200              	.LVL695:
2686:source\fatfs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 6201              		.loc 1 2686 4 is_stmt 1 view .LVU2235
 6202              		.loc 1 2686 7 is_stmt 0 view .LVU2236
 6203 005a 18F0FF08 		ands	r8, r8, #255
 6204              	.LVL696:
 6205              		.loc 1 2686 7 view .LVU2237
 6206 005e 20D1     		bne	.L673
2687:source\fatfs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6207              		.loc 1 2687 5 is_stmt 1 view .LVU2238
 6208              		.loc 1 2687 8 is_stmt 0 view .LVU2239
 6209 0060 51B9     		cbnz	r1, .L674
2688:source\fatfs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 6210              		.loc 1 2688 6 is_stmt 1 view .LVU2240
 6211              		.loc 1 2688 11 is_stmt 0 view .LVU2241
 6212 0062 D4F81002 		ldr	r0, [r4, #528]
 6213              	.LVL697:
 6214              	.L675:
2689:source\fatfs/ff.c **** 				} else {						/* Middle or end of the file */
2690:source\fatfs/ff.c **** #if _USE_FASTSEEK
2691:source\fatfs/ff.c **** 					if (fp->cltbl)
2692:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2693:source\fatfs/ff.c **** 					else
2694:source\fatfs/ff.c **** #endif
2695:source\fatfs/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2696:source\fatfs/ff.c **** 				}
2697:source\fatfs/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 6215              		.loc 1 2697 5 is_stmt 1 view .LVU2242
 6216              		.loc 1 2697 8 is_stmt 0 view .LVU2243
 6217 0066 0128     		cmp	r0, #1
 6218 0068 12D8     		bhi	.L677
 6219              	.LVL698:
 6220              	.L679:
 6221              		.loc 1 2697 19 is_stmt 1 view .LVU2244
 6222 006a 0225     		movs	r5, #2
 6223 006c 84F80752 		strb	r5, [r4, #519]
 6224              		.loc 1 2697 19 view .LVU2245
 6225              	.LVL699:
 6226              	.L670:
 6227              		.loc 1 2697 19 is_stmt 0 view .LVU2246
 6228              	.LBE122:
 6229              	.LBE121:
2698:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2699:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
2700:source\fatfs/ff.c **** 			}
2701:source\fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2702:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2703:source\fatfs/ff.c **** 			sect += csect;
2704:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2705:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
2706:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2707:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
2708:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
2709:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2710:source\fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2711:source\fatfs/ff.c **** #if _FS_TINY
2712:source\fatfs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2713:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
2714:source\fatfs/ff.c **** #else
2715:source\fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2716:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
2717:source\fatfs/ff.c **** #endif
2718:source\fatfs/ff.c **** #endif
2719:source\fatfs/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
2720:source\fatfs/ff.c **** 				continue;
2721:source\fatfs/ff.c **** 			}
2722:source\fatfs/ff.c **** #if !_FS_TINY
2723:source\fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2724:source\fatfs/ff.c **** #if !_FS_READONLY
2725:source\fatfs/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2726:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2727:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2728:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2729:source\fatfs/ff.c **** 				}
2730:source\fatfs/ff.c **** #endif
2731:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
2732:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2733:source\fatfs/ff.c **** 			}
2734:source\fatfs/ff.c **** #endif
2735:source\fatfs/ff.c **** 			fp->dsect = sect;
2736:source\fatfs/ff.c **** 		}
2737:source\fatfs/ff.c **** 		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer 
2738:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
2739:source\fatfs/ff.c **** #if _FS_TINY
2740:source\fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
2741:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2742:source\fatfs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2743:source\fatfs/ff.c **** #else
2744:source\fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2745:source\fatfs/ff.c **** #endif
2746:source\fatfs/ff.c **** 	}
2747:source\fatfs/ff.c **** 
2748:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2749:source\fatfs/ff.c **** }
 6230              		.loc 1 2749 1 view .LVU2247
 6231 0070 2846     		mov	r0, r5
 6232 0072 03B0     		add	sp, sp, #12
 6233              		.cfi_remember_state
 6234              		.cfi_def_cfa_offset 36
 6235              		@ sp needed
 6236 0074 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6237              	.LVL700:
 6238              	.L674:
 6239              		.cfi_restore_state
 6240              	.LBB124:
 6241              	.LBB123:
2691:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6242              		.loc 1 2691 6 is_stmt 1 view .LVU2248
2691:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6243              		.loc 1 2691 9 is_stmt 0 view .LVU2249
 6244 0078 D4F82432 		ldr	r3, [r4, #548]
 6245 007c 1BB1     		cbz	r3, .L676
2692:source\fatfs/ff.c **** 					else
 6246              		.loc 1 2692 7 is_stmt 1 view .LVU2250
2692:source\fatfs/ff.c **** 					else
 6247              		.loc 1 2692 14 is_stmt 0 view .LVU2251
 6248 007e 2046     		mov	r0, r4
 6249              	.LVL701:
2692:source\fatfs/ff.c **** 					else
 6250              		.loc 1 2692 14 view .LVU2252
 6251 0080 FFF7FEFF 		bl	clmt_clust
 6252              	.LVL702:
2692:source\fatfs/ff.c **** 					else
 6253              		.loc 1 2692 14 view .LVU2253
 6254 0084 EFE7     		b	.L675
 6255              	.LVL703:
 6256              	.L676:
2695:source\fatfs/ff.c **** 				}
 6257              		.loc 1 2695 7 is_stmt 1 view .LVU2254
2695:source\fatfs/ff.c **** 				}
 6258              		.loc 1 2695 14 is_stmt 0 view .LVU2255
 6259 0086 D4F81412 		ldr	r1, [r4, #532]
 6260              	.LVL704:
2695:source\fatfs/ff.c **** 				}
 6261              		.loc 1 2695 14 view .LVU2256
 6262 008a FFF7FEFF 		bl	get_fat
 6263              	.LVL705:
2695:source\fatfs/ff.c **** 				}
 6264              		.loc 1 2695 14 view .LVU2257
 6265 008e EAE7     		b	.L675
 6266              	.L677:
2697:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6267              		.loc 1 2697 44 is_stmt 1 view .LVU2258
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6268              		.loc 1 2698 5 view .LVU2259
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6269              		.loc 1 2698 8 is_stmt 0 view .LVU2260
 6270 0090 421C     		adds	r2, r0, #1
 6271 0092 04D1     		bne	.L678
 6272              	.LVL706:
 6273              	.L682:
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6274              		.loc 1 2698 29 is_stmt 1 view .LVU2261
 6275 0094 0123     		movs	r3, #1
 6276 0096 009D     		ldr	r5, [sp]
 6277 0098 84F80732 		strb	r3, [r4, #519]
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6278              		.loc 1 2698 29 view .LVU2262
 6279 009c E8E7     		b	.L670
 6280              	.LVL707:
 6281              	.L678:
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6282              		.loc 1 2698 55 view .LVU2263
2699:source\fatfs/ff.c **** 			}
 6283              		.loc 1 2699 5 view .LVU2264
2699:source\fatfs/ff.c **** 			}
 6284              		.loc 1 2699 15 is_stmt 0 view .LVU2265
 6285 009e C4F81402 		str	r0, [r4, #532]
 6286              	.LVL708:
 6287              	.L673:
2701:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6288              		.loc 1 2701 4 is_stmt 1 view .LVU2266
2701:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6289              		.loc 1 2701 11 is_stmt 0 view .LVU2267
 6290 00a2 D4F800B2 		ldr	fp, [r4, #512]
 6291 00a6 D4F81412 		ldr	r1, [r4, #532]
 6292 00aa 5846     		mov	r0, fp
 6293 00ac FFF7FEFF 		bl	clust2sect
 6294              	.LVL709:
2702:source\fatfs/ff.c **** 			sect += csect;
 6295              		.loc 1 2702 4 is_stmt 1 view .LVU2268
2702:source\fatfs/ff.c **** 			sect += csect;
 6296              		.loc 1 2702 7 is_stmt 0 view .LVU2269
 6297 00b0 0028     		cmp	r0, #0
 6298 00b2 DAD0     		beq	.L679
2702:source\fatfs/ff.c **** 			sect += csect;
 6299              		.loc 1 2702 40 is_stmt 1 view .LVU2270
2703:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 6300              		.loc 1 2703 4 view .LVU2271
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6301              		.loc 1 2705 7 is_stmt 0 view .LVU2272
 6302 00b4 B6F5007F 		cmp	r6, #512
2703:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 6303              		.loc 1 2703 9 view .LVU2273
 6304 00b8 00EB0807 		add	r7, r0, r8
 6305              	.LVL710:
2704:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6306              		.loc 1 2704 4 is_stmt 1 view .LVU2274
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6307              		.loc 1 2705 4 view .LVU2275
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6308              		.loc 1 2705 7 is_stmt 0 view .LVU2276
 6309 00bc 33D3     		bcc	.L680
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6310              		.loc 1 2706 28 view .LVU2277
 6311 00be 9BF80222 		ldrb	r2, [fp, #514]	@ zero_extendqisi2
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6312              		.loc 1 2708 9 view .LVU2278
 6313 00c2 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6314              		.loc 1 2706 15 view .LVU2279
 6315 00c6 08EB5621 		add	r1, r8, r6, lsr #9
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6316              		.loc 1 2706 8 view .LVU2280
 6317 00ca 9142     		cmp	r1, r2
2704:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6318              		.loc 1 2704 7 view .LVU2281
 6319 00cc 4FEA5623 		lsr	r3, r6, #9
 6320              	.LVL711:
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6321              		.loc 1 2706 5 is_stmt 1 view .LVU2282
2707:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 6322              		.loc 1 2707 6 view .LVU2283
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6323              		.loc 1 2708 9 is_stmt 0 view .LVU2284
 6324 00d0 4946     		mov	r1, r9
2707:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 6325              		.loc 1 2707 25 view .LVU2285
 6326 00d2 88BF     		it	hi
 6327 00d4 A2EB0803 		subhi	r3, r2, r8
 6328              	.LVL712:
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6329              		.loc 1 2708 5 is_stmt 1 view .LVU2286
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6330              		.loc 1 2708 9 is_stmt 0 view .LVU2287
 6331 00d8 3A46     		mov	r2, r7
 6332 00da 0193     		str	r3, [sp, #4]
 6333 00dc FFF7FEFF 		bl	disk_read
 6334              	.LVL713:
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6335              		.loc 1 2708 8 view .LVU2288
 6336 00e0 0028     		cmp	r0, #0
 6337 00e2 D7D1     		bne	.L682
2709:source\fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 6338              		.loc 1 2709 32 is_stmt 1 view .LVU2289
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6339              		.loc 1 2715 5 view .LVU2290
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6340              		.loc 1 2715 8 is_stmt 0 view .LVU2291
 6341 00e4 94F80622 		ldrb	r2, [r4, #518]	@ zero_extendqisi2
 6342 00e8 019B     		ldr	r3, [sp, #4]
 6343 00ea 12F0400F 		tst	r2, #64
 6344 00ee 0CD0     		beq	.L683
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6345              		.loc 1 2715 45 view .LVU2292
 6346 00f0 D4F81802 		ldr	r0, [r4, #536]
 6347 00f4 C01B     		subs	r0, r0, r7
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6348              		.loc 1 2715 32 view .LVU2293
 6349 00f6 8342     		cmp	r3, r0
 6350 00f8 07D9     		bls	.L683
2716:source\fatfs/ff.c **** #endif
 6351              		.loc 1 2716 6 is_stmt 1 view .LVU2294
 6352 00fa 4FF40072 		mov	r2, #512
 6353 00fe 2146     		mov	r1, r4
 6354 0100 09EB4020 		add	r0, r9, r0, lsl #9
 6355 0104 FFF7FEFF 		bl	mem_cpy
 6356              	.LVL714:
 6357 0108 019B     		ldr	r3, [sp, #4]
 6358              	.L683:
2719:source\fatfs/ff.c **** 				continue;
 6359              		.loc 1 2719 5 view .LVU2295
2719:source\fatfs/ff.c **** 				continue;
 6360              		.loc 1 2719 10 is_stmt 0 view .LVU2296
 6361 010a 5F02     		lsls	r7, r3, #9
 6362              	.LVL715:
2720:source\fatfs/ff.c **** 			}
 6363              		.loc 1 2720 5 is_stmt 1 view .LVU2297
 6364              	.L684:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6365              		.loc 1 2683 3 view .LVU2298
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6366              		.loc 1 2683 27 is_stmt 0 view .LVU2299
 6367 010c D4F80832 		ldr	r3, [r4, #520]
 6368 0110 3B44     		add	r3, r3, r7
 6369 0112 C4F80832 		str	r3, [r4, #520]
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6370              		.loc 1 2683 40 view .LVU2300
 6371 0116 DAF80030 		ldr	r3, [r10]
 6372 011a 3B44     		add	r3, r3, r7
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6373              		.loc 1 2683 9 view .LVU2301
 6374 011c B944     		add	r9, r9, r7
 6375              	.LVL716:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6376              		.loc 1 2683 40 view .LVU2302
 6377 011e CAF80030 		str	r3, [r10]
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6378              		.loc 1 2683 53 view .LVU2303
 6379 0122 F61B     		subs	r6, r6, r7
 6380              	.LVL717:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6381              		.loc 1 2683 53 view .LVU2304
 6382 0124 89E7     		b	.L671
 6383              	.LVL718:
 6384              	.L680:
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6385              		.loc 1 2723 4 is_stmt 1 view .LVU2305
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6386              		.loc 1 2723 10 is_stmt 0 view .LVU2306
 6387 0126 D4F81822 		ldr	r2, [r4, #536]
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6388              		.loc 1 2723 7 view .LVU2307
 6389 012a 9742     		cmp	r7, r2
 6390 012c 1CD0     		beq	.L685
2725:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6391              		.loc 1 2725 5 is_stmt 1 view .LVU2308
2725:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6392              		.loc 1 2725 8 is_stmt 0 view .LVU2309
 6393 012e 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6394 0132 5B06     		lsls	r3, r3, #25
 6395 0134 0DD5     		bpl	.L686
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6396              		.loc 1 2726 6 is_stmt 1 view .LVU2310
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6397              		.loc 1 2726 10 is_stmt 0 view .LVU2311
 6398 0136 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
 6399 013a 0123     		movs	r3, #1
 6400 013c 2146     		mov	r1, r4
 6401 013e FFF7FEFF 		bl	disk_write
 6402              	.LVL719:
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6403              		.loc 1 2726 9 view .LVU2312
 6404 0142 0028     		cmp	r0, #0
 6405 0144 A6D1     		bne	.L682
2727:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6406              		.loc 1 2727 33 is_stmt 1 view .LVU2313
2728:source\fatfs/ff.c **** 				}
 6407              		.loc 1 2728 6 view .LVU2314
2728:source\fatfs/ff.c **** 				}
 6408              		.loc 1 2728 15 is_stmt 0 view .LVU2315
 6409 0146 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6410 014a 23F04003 		bic	r3, r3, #64
 6411 014e 84F80632 		strb	r3, [r4, #518]
 6412              	.L686:
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6413              		.loc 1 2731 5 is_stmt 1 view .LVU2316
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6414              		.loc 1 2731 9 is_stmt 0 view .LVU2317
 6415 0152 D4F80002 		ldr	r0, [r4, #512]
 6416 0156 0123     		movs	r3, #1
 6417 0158 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 6418 015c 3A46     		mov	r2, r7
 6419 015e 2146     		mov	r1, r4
 6420 0160 FFF7FEFF 		bl	disk_read
 6421              	.LVL720:
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6422              		.loc 1 2731 8 view .LVU2318
 6423 0164 0028     		cmp	r0, #0
 6424 0166 95D1     		bne	.L682
 6425              	.L685:
2732:source\fatfs/ff.c **** 			}
 6426              		.loc 1 2732 32 is_stmt 1 view .LVU2319
2735:source\fatfs/ff.c **** 		}
 6427              		.loc 1 2735 4 view .LVU2320
2735:source\fatfs/ff.c **** 		}
 6428              		.loc 1 2735 14 is_stmt 0 view .LVU2321
 6429 0168 C4F81872 		str	r7, [r4, #536]
 6430              	.LVL721:
 6431              	.L672:
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6432              		.loc 1 2737 3 is_stmt 1 view .LVU2322
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6433              		.loc 1 2737 39 is_stmt 0 view .LVU2323
 6434 016c D4F80812 		ldr	r1, [r4, #520]
 6435 0170 C1F30801 		ubfx	r1, r1, #0, #9
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6436              		.loc 1 2737 8 view .LVU2324
 6437 0174 C1F50077 		rsb	r7, r1, #512
 6438              	.LVL722:
2738:source\fatfs/ff.c **** #if _FS_TINY
 6439              		.loc 1 2738 3 is_stmt 1 view .LVU2325
 6440 0178 B742     		cmp	r7, r6
 6441 017a 28BF     		it	cs
 6442 017c 3746     		movcs	r7, r6
 6443              	.LVL723:
2744:source\fatfs/ff.c **** #endif
 6444              		.loc 1 2744 3 view .LVU2326
 6445 017e 3A46     		mov	r2, r7
 6446 0180 2144     		add	r1, r1, r4
 6447 0182 4846     		mov	r0, r9
 6448 0184 FFF7FEFF 		bl	mem_cpy
 6449              	.LVL724:
 6450 0188 C0E7     		b	.L684
 6451              	.LVL725:
 6452              	.L688:
2744:source\fatfs/ff.c **** #endif
 6453              		.loc 1 2744 3 is_stmt 0 view .LVU2327
 6454              	.LBE123:
 6455              	.LBE124:
2678:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 6456              		.loc 1 2678 3 view .LVU2328
 6457 018a 0725     		movs	r5, #7
 6458 018c 70E7     		b	.L670
 6459              		.cfi_endproc
 6460              	.LFE171:
 6462              		.section	.text.f_write,"ax",%progbits
 6463              		.align	1
 6464              		.global	f_write
 6465              		.syntax unified
 6466              		.thumb
 6467              		.thumb_func
 6469              	f_write:
 6470              	.LVL726:
 6471              	.LFB172:
2750:source\fatfs/ff.c **** 
2751:source\fatfs/ff.c **** 
2752:source\fatfs/ff.c **** 
2753:source\fatfs/ff.c **** 
2754:source\fatfs/ff.c **** #if !_FS_READONLY
2755:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2756:source\fatfs/ff.c **** /* Write File                                                            */
2757:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2758:source\fatfs/ff.c **** 
2759:source\fatfs/ff.c **** FRESULT f_write (
2760:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
2761:source\fatfs/ff.c **** 	unsigned char *buff,		/* Pointer to the data to be written */
2762:source\fatfs/ff.c **** 	UINT btw,			/* Number of bytes to write */
2763:source\fatfs/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
2764:source\fatfs/ff.c **** )
2765:source\fatfs/ff.c **** {
 6472              		.loc 1 2765 1 is_stmt 1 view -0
 6473              		.cfi_startproc
 6474              		@ args = 0, pretend = 0, frame = 8
 6475              		@ frame_needed = 0, uses_anonymous_args = 0
2766:source\fatfs/ff.c **** 	FRESULT res;
 6476              		.loc 1 2766 2 view .LVU2330
2767:source\fatfs/ff.c **** 	DWORD clst, sect;
 6477              		.loc 1 2767 2 view .LVU2331
2768:source\fatfs/ff.c **** 	UINT wcnt, cc;
 6478              		.loc 1 2768 2 view .LVU2332
2769:source\fatfs/ff.c **** 	BYTE *wbuff = (BYTE*)buff;
 6479              		.loc 1 2769 2 view .LVU2333
2765:source\fatfs/ff.c **** 	FRESULT res;
 6480              		.loc 1 2765 1 is_stmt 0 view .LVU2334
 6481 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6482              		.cfi_def_cfa_offset 48
 6483              		.cfi_offset 4, -36
 6484              		.cfi_offset 5, -32
 6485              		.cfi_offset 6, -28
 6486              		.cfi_offset 7, -24
 6487              		.cfi_offset 8, -20
 6488              		.cfi_offset 9, -16
 6489              		.cfi_offset 10, -12
 6490              		.cfi_offset 11, -8
 6491              		.cfi_offset 14, -4
2765:source\fatfs/ff.c **** 	FRESULT res;
 6492              		.loc 1 2765 1 view .LVU2335
 6493 0004 9946     		mov	r9, r3
2770:source\fatfs/ff.c **** 	BYTE csect;
2771:source\fatfs/ff.c **** 
2772:source\fatfs/ff.c **** 
2773:source\fatfs/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 6494              		.loc 1 2773 6 view .LVU2336
 6495 0006 0023     		movs	r3, #0
 6496              	.LVL727:
 6497              		.loc 1 2773 6 view .LVU2337
 6498 0008 C9F80030 		str	r3, [r9]
2765:source\fatfs/ff.c **** 	FRESULT res;
 6499              		.loc 1 2765 1 view .LVU2338
 6500 000c 0446     		mov	r4, r0
 6501 000e 8846     		mov	r8, r1
 6502              	.LVL728:
2770:source\fatfs/ff.c **** 	BYTE csect;
 6503              		.loc 1 2770 2 is_stmt 1 view .LVU2339
 6504              		.loc 1 2773 2 view .LVU2340
2774:source\fatfs/ff.c **** 
2775:source\fatfs/ff.c **** 	res = validate(fp);						/* Check validity */
 6505              		.loc 1 2775 2 view .LVU2341
2765:source\fatfs/ff.c **** 	FRESULT res;
 6506              		.loc 1 2765 1 is_stmt 0 view .LVU2342
 6507 0010 1646     		mov	r6, r2
 6508              		.loc 1 2775 8 view .LVU2343
 6509 0012 FFF7FEFF 		bl	validate
 6510              	.LVL729:
2776:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6511              		.loc 1 2776 2 is_stmt 1 view .LVU2344
 6512              		.loc 1 2776 5 is_stmt 0 view .LVU2345
 6513 0016 0546     		mov	r5, r0
 6514 0018 30BB     		cbnz	r0, .L699
2777:source\fatfs/ff.c **** 	if (fp->err)							/* Check error */
 6515              		.loc 1 2777 2 is_stmt 1 view .LVU2346
 6516              		.loc 1 2777 8 is_stmt 0 view .LVU2347
 6517 001a 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
 6518              		.loc 1 2777 5 view .LVU2348
 6519 001e 1DBB     		cbnz	r5, .L699
2778:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
2779:source\fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 6520              		.loc 1 2779 2 is_stmt 1 view .LVU2349
 6521              		.loc 1 2779 5 is_stmt 0 view .LVU2350
 6522 0020 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6523 0024 9907     		lsls	r1, r3, #30
 6524 0026 40F1D280 		bpl	.L723
 6525              	.LVL730:
 6526              	.LBB127:
 6527              	.LBI127:
2759:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
 6528              		.loc 1 2759 9 is_stmt 1 view .LVU2351
 6529              	.LBB128:
2780:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2781:source\fatfs/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 6530              		.loc 1 2781 2 view .LVU2352
 6531              		.loc 1 2781 8 is_stmt 0 view .LVU2353
 6532 002a D4F80832 		ldr	r3, [r4, #520]
 6533              		.loc 1 2781 5 view .LVU2354
 6534 002e DE42     		cmn	r6, r3
 6535 0030 C0F08480 		bcc	.L700
 6536              	.LVL731:
 6537              	.L710:
2782:source\fatfs/ff.c **** 
2783:source\fatfs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
2784:source\fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2785:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
2786:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2787:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
2788:source\fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2789:source\fatfs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
2790:source\fatfs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
2791:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2792:source\fatfs/ff.c **** 				} else {					/* Middle or end of the file */
2793:source\fatfs/ff.c **** #if _USE_FASTSEEK
2794:source\fatfs/ff.c **** 					if (fp->cltbl)
2795:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2796:source\fatfs/ff.c **** 					else
2797:source\fatfs/ff.c **** #endif
2798:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2799:source\fatfs/ff.c **** 				}
2800:source\fatfs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2801:source\fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2802:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2803:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
2804:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
2805:source\fatfs/ff.c **** 			}
2806:source\fatfs/ff.c **** #if _FS_TINY
2807:source\fatfs/ff.c **** 			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
2808:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2809:source\fatfs/ff.c **** #else
2810:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2811:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2812:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2813:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2814:source\fatfs/ff.c **** 			}
2815:source\fatfs/ff.c **** #endif
2816:source\fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2817:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2818:source\fatfs/ff.c **** 			sect += csect;
2819:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2820:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
2821:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2822:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
2823:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
2824:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2825:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
2826:source\fatfs/ff.c **** #if _FS_TINY
2827:source\fatfs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2828:source\fatfs/ff.c **** 					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2829:source\fatfs/ff.c **** 					fp->fs->wflag = 0;
2830:source\fatfs/ff.c **** 				}
2831:source\fatfs/ff.c **** #else
2832:source\fatfs/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2833:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2834:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2835:source\fatfs/ff.c **** 				}
2836:source\fatfs/ff.c **** #endif
2837:source\fatfs/ff.c **** #endif
2838:source\fatfs/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
2839:source\fatfs/ff.c **** 				continue;
2840:source\fatfs/ff.c **** 			}
2841:source\fatfs/ff.c **** #if _FS_TINY
2842:source\fatfs/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2843:source\fatfs/ff.c **** 				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
2844:source\fatfs/ff.c **** 				fp->fs->winsect = sect;
2845:source\fatfs/ff.c **** 			}
2846:source\fatfs/ff.c **** #else
2847:source\fatfs/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2848:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
2849:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
2850:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2851:source\fatfs/ff.c **** 			}
2852:source\fatfs/ff.c **** #endif
2853:source\fatfs/ff.c **** 			fp->dsect = sect;
2854:source\fatfs/ff.c **** 		}
2855:source\fatfs/ff.c **** 		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2856:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
2857:source\fatfs/ff.c **** #if _FS_TINY
2858:source\fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
2859:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2860:source\fatfs/ff.c **** 		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2861:source\fatfs/ff.c **** 		fp->fs->wflag = 1;
2862:source\fatfs/ff.c **** #else
2863:source\fatfs/ff.c **** 		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2864:source\fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
2865:source\fatfs/ff.c **** #endif
2866:source\fatfs/ff.c **** 	}
2867:source\fatfs/ff.c **** 
2868:source\fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 6538              		.loc 1 2868 2 is_stmt 1 view .LVU2355
 6539              		.loc 1 2868 5 is_stmt 0 view .LVU2356
 6540 0034 D4E98232 		ldrd	r3, r2, [r4, #520]
 6541 0038 9342     		cmp	r3, r2
 6542 003a 00F2C580 		bhi	.L701
 6543              	.L702:
2869:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6544              		.loc 1 2869 2 is_stmt 1 view .LVU2357
 6545              		.loc 1 2869 11 is_stmt 0 view .LVU2358
 6546 003e 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6547 0042 43F02003 		orr	r3, r3, #32
 6548 0046 84F80632 		strb	r3, [r4, #518]
2870:source\fatfs/ff.c **** 
2871:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 6549              		.loc 1 2871 2 is_stmt 1 view .LVU2359
 6550 004a 0DE0     		b	.L699
 6551              	.LVL732:
 6552              	.L706:
2794:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6553              		.loc 1 2794 6 view .LVU2360
2794:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6554              		.loc 1 2794 9 is_stmt 0 view .LVU2361
 6555 004c D4F82432 		ldr	r3, [r4, #548]
 6556 0050 73B1     		cbz	r3, .L709
2795:source\fatfs/ff.c **** 					else
 6557              		.loc 1 2795 7 is_stmt 1 view .LVU2362
2795:source\fatfs/ff.c **** 					else
 6558              		.loc 1 2795 14 is_stmt 0 view .LVU2363
 6559 0052 2046     		mov	r0, r4
 6560              	.LVL733:
2795:source\fatfs/ff.c **** 					else
 6561              		.loc 1 2795 14 view .LVU2364
 6562 0054 FFF7FEFF 		bl	clmt_clust
 6563              	.LVL734:
 6564              	.L735:
2798:source\fatfs/ff.c **** 				}
 6565              		.loc 1 2798 14 view .LVU2365
 6566 0058 0146     		mov	r1, r0
 6567              	.LVL735:
2800:source\fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 6568              		.loc 1 2800 5 is_stmt 1 view .LVU2366
2800:source\fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 6569              		.loc 1 2800 8 is_stmt 0 view .LVU2367
 6570 005a 0028     		cmp	r0, #0
 6571 005c EAD0     		beq	.L710
 6572              	.LVL736:
 6573              	.L707:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6574              		.loc 1 2801 5 is_stmt 1 view .LVU2368
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6575              		.loc 1 2801 8 is_stmt 0 view .LVU2369
 6576 005e 0129     		cmp	r1, #1
 6577 0060 09D1     		bne	.L711
 6578              	.LVL737:
 6579              	.L716:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6580              		.loc 1 2801 20 is_stmt 1 view .LVU2370
 6581 0062 0225     		movs	r5, #2
 6582              	.L736:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6583              		.loc 1 2802 29 is_stmt 0 view .LVU2371
 6584 0064 84F80752 		strb	r5, [r4, #519]
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6585              		.loc 1 2802 29 is_stmt 1 view .LVU2372
 6586              	.LVL738:
 6587              	.L699:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6588              		.loc 1 2802 29 is_stmt 0 view .LVU2373
 6589              	.LBE128:
 6590              	.LBE127:
2872:source\fatfs/ff.c **** }
 6591              		.loc 1 2872 1 view .LVU2374
 6592 0068 2846     		mov	r0, r5
 6593 006a 03B0     		add	sp, sp, #12
 6594              		.cfi_remember_state
 6595              		.cfi_def_cfa_offset 36
 6596              		@ sp needed
 6597 006c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6598              	.LVL739:
 6599              	.L709:
 6600              		.cfi_restore_state
 6601              	.LBB130:
 6602              	.LBB129:
2798:source\fatfs/ff.c **** 				}
 6603              		.loc 1 2798 7 is_stmt 1 view .LVU2375
2798:source\fatfs/ff.c **** 				}
 6604              		.loc 1 2798 14 is_stmt 0 view .LVU2376
 6605 0070 D4F81412 		ldr	r1, [r4, #532]
 6606              	.LVL740:
2798:source\fatfs/ff.c **** 				}
 6607              		.loc 1 2798 14 view .LVU2377
 6608 0074 7CE0     		b	.L734
 6609              	.LVL741:
 6610              	.L711:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6611              		.loc 1 2801 45 is_stmt 1 view .LVU2378
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6612              		.loc 1 2802 5 view .LVU2379
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6613              		.loc 1 2802 8 is_stmt 0 view .LVU2380
 6614 0076 4A1C     		adds	r2, r1, #1
 6615 0078 01D1     		bne	.L712
 6616              	.LVL742:
 6617              	.L715:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6618              		.loc 1 2802 29 is_stmt 1 view .LVU2381
 6619 007a 0125     		movs	r5, #1
 6620 007c F2E7     		b	.L736
 6621              	.LVL743:
 6622              	.L712:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6623              		.loc 1 2802 55 view .LVU2382
2803:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 6624              		.loc 1 2803 5 view .LVU2383
2804:source\fatfs/ff.c **** 			}
 6625              		.loc 1 2804 8 is_stmt 0 view .LVU2384
 6626 007e D4F81032 		ldr	r3, [r4, #528]
2803:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 6627              		.loc 1 2803 15 view .LVU2385
 6628 0082 C4F81412 		str	r1, [r4, #532]
2804:source\fatfs/ff.c **** 			}
 6629              		.loc 1 2804 5 is_stmt 1 view .LVU2386
2804:source\fatfs/ff.c **** 			}
 6630              		.loc 1 2804 8 is_stmt 0 view .LVU2387
 6631 0086 0BB9     		cbnz	r3, .L705
2804:source\fatfs/ff.c **** 			}
 6632              		.loc 1 2804 26 is_stmt 1 view .LVU2388
2804:source\fatfs/ff.c **** 			}
 6633              		.loc 1 2804 37 is_stmt 0 view .LVU2389
 6634 0088 C4F81012 		str	r1, [r4, #528]
 6635              	.LVL744:
 6636              	.L705:
2810:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6637              		.loc 1 2810 4 is_stmt 1 view .LVU2390
2810:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6638              		.loc 1 2810 7 is_stmt 0 view .LVU2391
 6639 008c 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6640 0090 5B06     		lsls	r3, r3, #25
 6641 0092 11D5     		bpl	.L714
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6642              		.loc 1 2811 5 is_stmt 1 view .LVU2392
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6643              		.loc 1 2811 9 is_stmt 0 view .LVU2393
 6644 0094 D4F80002 		ldr	r0, [r4, #512]
 6645 0098 D4F81822 		ldr	r2, [r4, #536]
 6646 009c 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 6647 00a0 0123     		movs	r3, #1
 6648 00a2 2146     		mov	r1, r4
 6649 00a4 FFF7FEFF 		bl	disk_write
 6650              	.LVL745:
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6651              		.loc 1 2811 8 view .LVU2394
 6652 00a8 0028     		cmp	r0, #0
 6653 00aa E6D1     		bne	.L715
2812:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6654              		.loc 1 2812 32 is_stmt 1 view .LVU2395
2813:source\fatfs/ff.c **** 			}
 6655              		.loc 1 2813 5 view .LVU2396
2813:source\fatfs/ff.c **** 			}
 6656              		.loc 1 2813 14 is_stmt 0 view .LVU2397
 6657 00ac 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6658 00b0 23F04003 		bic	r3, r3, #64
 6659 00b4 84F80632 		strb	r3, [r4, #518]
 6660              	.L714:
2816:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6661              		.loc 1 2816 4 is_stmt 1 view .LVU2398
2816:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6662              		.loc 1 2816 11 is_stmt 0 view .LVU2399
 6663 00b8 D4F800B2 		ldr	fp, [r4, #512]
 6664 00bc D4F81412 		ldr	r1, [r4, #532]
 6665 00c0 5846     		mov	r0, fp
 6666 00c2 FFF7FEFF 		bl	clust2sect
 6667              	.LVL746:
2817:source\fatfs/ff.c **** 			sect += csect;
 6668              		.loc 1 2817 4 is_stmt 1 view .LVU2400
2817:source\fatfs/ff.c **** 			sect += csect;
 6669              		.loc 1 2817 7 is_stmt 0 view .LVU2401
 6670 00c6 0028     		cmp	r0, #0
 6671 00c8 CBD0     		beq	.L716
2817:source\fatfs/ff.c **** 			sect += csect;
 6672              		.loc 1 2817 40 is_stmt 1 view .LVU2402
2818:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 6673              		.loc 1 2818 4 view .LVU2403
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6674              		.loc 1 2820 7 is_stmt 0 view .LVU2404
 6675 00ca B6F5007F 		cmp	r6, #512
2818:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 6676              		.loc 1 2818 9 view .LVU2405
 6677 00ce 00EB070A 		add	r10, r0, r7
 6678              	.LVL747:
2819:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6679              		.loc 1 2819 4 is_stmt 1 view .LVU2406
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6680              		.loc 1 2820 4 view .LVU2407
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6681              		.loc 1 2820 7 is_stmt 0 view .LVU2408
 6682 00d2 50D3     		bcc	.L717
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6683              		.loc 1 2821 28 view .LVU2409
 6684 00d4 9BF80222 		ldrb	r2, [fp, #514]	@ zero_extendqisi2
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6685              		.loc 1 2823 9 view .LVU2410
 6686 00d8 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6687              		.loc 1 2821 15 view .LVU2411
 6688 00dc 07EB5621 		add	r1, r7, r6, lsr #9
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6689              		.loc 1 2821 8 view .LVU2412
 6690 00e0 9142     		cmp	r1, r2
2819:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6691              		.loc 1 2819 7 view .LVU2413
 6692 00e2 4FEA5623 		lsr	r3, r6, #9
 6693              	.LVL748:
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6694              		.loc 1 2821 5 is_stmt 1 view .LVU2414
2822:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
 6695              		.loc 1 2822 6 view .LVU2415
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6696              		.loc 1 2823 9 is_stmt 0 view .LVU2416
 6697 00e6 4146     		mov	r1, r8
2822:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
 6698              		.loc 1 2822 25 view .LVU2417
 6699 00e8 88BF     		it	hi
 6700 00ea D31B     		subhi	r3, r2, r7
 6701              	.LVL749:
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6702              		.loc 1 2823 5 is_stmt 1 view .LVU2418
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6703              		.loc 1 2823 9 is_stmt 0 view .LVU2419
 6704 00ec 5246     		mov	r2, r10
 6705 00ee 0193     		str	r3, [sp, #4]
 6706 00f0 FFF7FEFF 		bl	disk_write
 6707              	.LVL750:
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6708              		.loc 1 2823 8 view .LVU2420
 6709 00f4 0028     		cmp	r0, #0
 6710 00f6 C0D1     		bne	.L715
2824:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
 6711              		.loc 1 2824 32 is_stmt 1 view .LVU2421
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6712              		.loc 1 2832 5 view .LVU2422
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6713              		.loc 1 2832 19 is_stmt 0 view .LVU2423
 6714 00f8 D4F81812 		ldr	r1, [r4, #536]
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6715              		.loc 1 2832 8 view .LVU2424
 6716 00fc 019B     		ldr	r3, [sp, #4]
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6717              		.loc 1 2832 19 view .LVU2425
 6718 00fe A1EB0A01 		sub	r1, r1, r10
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6719              		.loc 1 2832 8 view .LVU2426
 6720 0102 8B42     		cmp	r3, r1
 6721 0104 0DD9     		bls	.L719
2833:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6722              		.loc 1 2833 6 is_stmt 1 view .LVU2427
 6723 0106 4FF40072 		mov	r2, #512
 6724 010a 08EB4121 		add	r1, r8, r1, lsl #9
 6725 010e 2046     		mov	r0, r4
 6726 0110 FFF7FEFF 		bl	mem_cpy
 6727              	.LVL751:
2834:source\fatfs/ff.c **** 				}
 6728              		.loc 1 2834 6 view .LVU2428
2834:source\fatfs/ff.c **** 				}
 6729              		.loc 1 2834 15 is_stmt 0 view .LVU2429
 6730 0114 94F80622 		ldrb	r2, [r4, #518]	@ zero_extendqisi2
 6731 0118 019B     		ldr	r3, [sp, #4]
 6732 011a 22F04002 		bic	r2, r2, #64
 6733 011e 84F80622 		strb	r2, [r4, #518]
 6734              	.L719:
2838:source\fatfs/ff.c **** 				continue;
 6735              		.loc 1 2838 5 is_stmt 1 view .LVU2430
2838:source\fatfs/ff.c **** 				continue;
 6736              		.loc 1 2838 10 is_stmt 0 view .LVU2431
 6737 0122 5F02     		lsls	r7, r3, #9
 6738              	.LVL752:
2839:source\fatfs/ff.c **** 			}
 6739              		.loc 1 2839 5 is_stmt 1 view .LVU2432
 6740              	.L720:
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6741              		.loc 1 2784 3 view .LVU2433
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6742              		.loc 1 2784 27 is_stmt 0 view .LVU2434
 6743 0124 D4F80832 		ldr	r3, [r4, #520]
 6744 0128 3B44     		add	r3, r3, r7
 6745 012a C4F80832 		str	r3, [r4, #520]
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6746              		.loc 1 2784 40 view .LVU2435
 6747 012e D9F80030 		ldr	r3, [r9]
 6748 0132 3B44     		add	r3, r3, r7
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6749              		.loc 1 2784 9 view .LVU2436
 6750 0134 B844     		add	r8, r8, r7
 6751              	.LVL753:
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6752              		.loc 1 2784 40 view .LVU2437
 6753 0136 C9F80030 		str	r3, [r9]
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6754              		.loc 1 2784 53 view .LVU2438
 6755 013a F61B     		subs	r6, r6, r7
 6756              	.LVL754:
 6757              	.L700:
2783:source\fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 6758              		.loc 1 2783 11 is_stmt 1 view .LVU2439
2785:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6759              		.loc 1 2785 10 is_stmt 0 view .LVU2440
 6760 013c D4F80812 		ldr	r1, [r4, #520]
2783:source\fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 6761              		.loc 1 2783 2 view .LVU2441
 6762 0140 002E     		cmp	r6, #0
 6763 0142 3FF477AF 		beq	.L710
2785:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6764              		.loc 1 2785 3 is_stmt 1 view .LVU2442
2785:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6765              		.loc 1 2785 17 is_stmt 0 view .LVU2443
 6766 0146 C1F30803 		ubfx	r3, r1, #0, #9
2785:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6767              		.loc 1 2785 6 view .LVU2444
 6768 014a 43BB     		cbnz	r3, .L703
2786:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6769              		.loc 1 2786 4 is_stmt 1 view .LVU2445
2786:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6770              		.loc 1 2786 46 is_stmt 0 view .LVU2446
 6771 014c D4F80002 		ldr	r0, [r4, #512]
2786:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6772              		.loc 1 2786 58 view .LVU2447
 6773 0150 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
 6774 0154 013F     		subs	r7, r7, #1
2786:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6775              		.loc 1 2786 10 view .LVU2448
 6776 0156 07EA5127 		and	r7, r7, r1, lsr #9
 6777              	.LVL755:
2787:source\fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6778              		.loc 1 2787 4 is_stmt 1 view .LVU2449
2787:source\fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6779              		.loc 1 2787 7 is_stmt 0 view .LVU2450
 6780 015a 17F0FF07 		ands	r7, r7, #255
 6781              	.LVL756:
2787:source\fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6782              		.loc 1 2787 7 view .LVU2451
 6783 015e 95D1     		bne	.L705
2788:source\fatfs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 6784              		.loc 1 2788 5 is_stmt 1 view .LVU2452
2788:source\fatfs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 6785              		.loc 1 2788 8 is_stmt 0 view .LVU2453
 6786 0160 0029     		cmp	r1, #0
 6787 0162 7FF473AF 		bne	.L706
2789:source\fatfs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 6788              		.loc 1 2789 6 is_stmt 1 view .LVU2454
2789:source\fatfs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 6789              		.loc 1 2789 11 is_stmt 0 view .LVU2455
 6790 0166 D4F81012 		ldr	r1, [r4, #528]
 6791              	.LVL757:
2790:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 6792              		.loc 1 2790 6 is_stmt 1 view .LVU2456
2790:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 6793              		.loc 1 2790 9 is_stmt 0 view .LVU2457
 6794 016a 0029     		cmp	r1, #0
 6795 016c 7FF477AF 		bne	.L707
 6796              	.LVL758:
 6797              	.L734:
2798:source\fatfs/ff.c **** 				}
 6798              		.loc 1 2798 14 view .LVU2458
 6799 0170 FFF7FEFF 		bl	create_chain
 6800              	.LVL759:
2798:source\fatfs/ff.c **** 				}
 6801              		.loc 1 2798 14 view .LVU2459
 6802 0174 70E7     		b	.L735
 6803              	.LVL760:
 6804              	.L717:
2847:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 6805              		.loc 1 2847 4 is_stmt 1 view .LVU2460
2847:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 6806              		.loc 1 2847 7 is_stmt 0 view .LVU2461
 6807 0176 D4F81832 		ldr	r3, [r4, #536]
 6808 017a 9A45     		cmp	r10, r3
 6809 017c 0DD0     		beq	.L721
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6810              		.loc 1 2848 5 is_stmt 1 view .LVU2462
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6811              		.loc 1 2848 8 is_stmt 0 view .LVU2463
 6812 017e D4E98232 		ldrd	r3, r2, [r4, #520]
 6813 0182 9A42     		cmp	r2, r3
 6814 0184 09D9     		bls	.L721
2849:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6815              		.loc 1 2849 6 view .LVU2464
 6816 0186 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
 6817 018a 0123     		movs	r3, #1
 6818 018c 5246     		mov	r2, r10
 6819 018e 2146     		mov	r1, r4
 6820 0190 FFF7FEFF 		bl	disk_read
 6821              	.LVL761:
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6822              		.loc 1 2848 30 view .LVU2465
 6823 0194 0028     		cmp	r0, #0
 6824 0196 7FF470AF 		bne	.L715
 6825              	.L721:
2850:source\fatfs/ff.c **** 			}
 6826              		.loc 1 2850 33 is_stmt 1 view .LVU2466
2853:source\fatfs/ff.c **** 		}
 6827              		.loc 1 2853 4 view .LVU2467
2853:source\fatfs/ff.c **** 		}
 6828              		.loc 1 2853 14 is_stmt 0 view .LVU2468
 6829 019a C4F818A2 		str	r10, [r4, #536]
 6830              	.LVL762:
 6831              	.L703:
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6832              		.loc 1 2855 3 is_stmt 1 view .LVU2469
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6833              		.loc 1 2855 39 is_stmt 0 view .LVU2470
 6834 019e D4F80802 		ldr	r0, [r4, #520]
 6835 01a2 C0F30800 		ubfx	r0, r0, #0, #9
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6836              		.loc 1 2855 8 view .LVU2471
 6837 01a6 C0F50077 		rsb	r7, r0, #512
 6838              	.LVL763:
2856:source\fatfs/ff.c **** #if _FS_TINY
 6839              		.loc 1 2856 3 is_stmt 1 view .LVU2472
 6840 01aa B742     		cmp	r7, r6
 6841 01ac 28BF     		it	cs
 6842 01ae 3746     		movcs	r7, r6
 6843              	.LVL764:
2863:source\fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
 6844              		.loc 1 2863 3 view .LVU2473
 6845 01b0 3A46     		mov	r2, r7
 6846 01b2 4146     		mov	r1, r8
 6847 01b4 2044     		add	r0, r0, r4
 6848 01b6 FFF7FEFF 		bl	mem_cpy
 6849              	.LVL765:
2864:source\fatfs/ff.c **** #endif
 6850              		.loc 1 2864 3 view .LVU2474
2864:source\fatfs/ff.c **** #endif
 6851              		.loc 1 2864 12 is_stmt 0 view .LVU2475
 6852 01ba 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6853 01be 43F04003 		orr	r3, r3, #64
 6854 01c2 84F80632 		strb	r3, [r4, #518]
 6855 01c6 ADE7     		b	.L720
 6856              	.LVL766:
 6857              	.L701:
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6858              		.loc 1 2868 28 is_stmt 1 view .LVU2476
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6859              		.loc 1 2868 38 is_stmt 0 view .LVU2477
 6860 01c8 C4F80C32 		str	r3, [r4, #524]
 6861 01cc 37E7     		b	.L702
 6862              	.LVL767:
 6863              	.L723:
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6864              		.loc 1 2868 38 view .LVU2478
 6865              	.LBE129:
 6866              	.LBE130:
2780:source\fatfs/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 6867              		.loc 1 2780 3 view .LVU2479
 6868 01ce 0725     		movs	r5, #7
 6869 01d0 4AE7     		b	.L699
 6870              		.cfi_endproc
 6871              	.LFE172:
 6873              		.section	.text.putc_bfd,"ax",%progbits
 6874              		.align	1
 6875              		.syntax unified
 6876              		.thumb
 6877              		.thumb_func
 6879              	putc_bfd:
 6880              	.LVL768:
 6881              	.LFB189:
2873:source\fatfs/ff.c **** 
2874:source\fatfs/ff.c **** 
2875:source\fatfs/ff.c **** 
2876:source\fatfs/ff.c **** 
2877:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2878:source\fatfs/ff.c **** /* Synchronize the File                                                  */
2879:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2880:source\fatfs/ff.c **** 
2881:source\fatfs/ff.c **** FRESULT f_sync (
2882:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
2883:source\fatfs/ff.c **** )
2884:source\fatfs/ff.c **** {
2885:source\fatfs/ff.c **** 	FRESULT res;
2886:source\fatfs/ff.c **** 	DWORD tm;
2887:source\fatfs/ff.c **** 	BYTE *dir;
2888:source\fatfs/ff.c **** 
2889:source\fatfs/ff.c **** 
2890:source\fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
2891:source\fatfs/ff.c **** 	if (res == FR_OK) {
2892:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
2893:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
2894:source\fatfs/ff.c **** #if !_FS_TINY
2895:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
2896:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2897:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2898:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2899:source\fatfs/ff.c **** 			}
2900:source\fatfs/ff.c **** #endif
2901:source\fatfs/ff.c **** 			/* Update the directory entry */
2902:source\fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
2903:source\fatfs/ff.c **** 			if (res == FR_OK) {
2904:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
2905:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
2906:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
2907:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
2908:source\fatfs/ff.c **** 				tm = GET_FATTIME();							/* Update updated time */
2909:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
2910:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
2911:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2912:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
2913:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
2914:source\fatfs/ff.c **** 			}
2915:source\fatfs/ff.c **** 		}
2916:source\fatfs/ff.c **** 	}
2917:source\fatfs/ff.c **** 
2918:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2919:source\fatfs/ff.c **** }
2920:source\fatfs/ff.c **** 
2921:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
2922:source\fatfs/ff.c **** 
2923:source\fatfs/ff.c **** 
2924:source\fatfs/ff.c **** 
2925:source\fatfs/ff.c **** 
2926:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2927:source\fatfs/ff.c **** /* Close File                                                            */
2928:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2929:source\fatfs/ff.c **** 
2930:source\fatfs/ff.c **** FRESULT f_close (
2931:source\fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2932:source\fatfs/ff.c **** )
2933:source\fatfs/ff.c **** {
2934:source\fatfs/ff.c **** 	FRESULT res;
2935:source\fatfs/ff.c **** 
2936:source\fatfs/ff.c **** 
2937:source\fatfs/ff.c **** #if !_FS_READONLY
2938:source\fatfs/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
2939:source\fatfs/ff.c **** 	if (res == FR_OK)
2940:source\fatfs/ff.c **** #endif
2941:source\fatfs/ff.c **** 	{
2942:source\fatfs/ff.c **** 		res = validate(fp);				/* Lock volume */
2943:source\fatfs/ff.c **** 		if (res == FR_OK) {
2944:source\fatfs/ff.c **** #if _FS_REENTRANT
2945:source\fatfs/ff.c **** 			FATFS *fs = fp->fs;
2946:source\fatfs/ff.c **** #endif
2947:source\fatfs/ff.c **** #if _FS_LOCK
2948:source\fatfs/ff.c **** 			res = dec_lock(fp->lockid);	/* Decrement file open counter */
2949:source\fatfs/ff.c **** 			if (res == FR_OK)
2950:source\fatfs/ff.c **** #endif
2951:source\fatfs/ff.c **** 				fp->fs = 0;				/* Invalidate file object */
2952:source\fatfs/ff.c **** #if _FS_REENTRANT
2953:source\fatfs/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
2954:source\fatfs/ff.c **** #endif
2955:source\fatfs/ff.c **** 		}
2956:source\fatfs/ff.c **** 	}
2957:source\fatfs/ff.c **** 	return res;
2958:source\fatfs/ff.c **** }
2959:source\fatfs/ff.c **** 
2960:source\fatfs/ff.c **** 
2961:source\fatfs/ff.c **** 
2962:source\fatfs/ff.c **** 
2963:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2964:source\fatfs/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
2965:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2966:source\fatfs/ff.c **** 
2967:source\fatfs/ff.c **** #if _FS_RPATH >= 1
2968:source\fatfs/ff.c **** #if _VOLUMES >= 2
2969:source\fatfs/ff.c **** FRESULT f_chdrive (
2970:source\fatfs/ff.c **** 	const TCHAR* path		/* Drive number */
2971:source\fatfs/ff.c **** )
2972:source\fatfs/ff.c **** {
2973:source\fatfs/ff.c **** 	int vol;
2974:source\fatfs/ff.c **** 
2975:source\fatfs/ff.c **** 
2976:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
2977:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
2978:source\fatfs/ff.c **** 
2979:source\fatfs/ff.c **** 	CurrVol = (BYTE)vol;
2980:source\fatfs/ff.c **** 
2981:source\fatfs/ff.c **** 	return FR_OK;
2982:source\fatfs/ff.c **** }
2983:source\fatfs/ff.c **** #endif
2984:source\fatfs/ff.c **** 
2985:source\fatfs/ff.c **** 
2986:source\fatfs/ff.c **** FRESULT f_chdir (
2987:source\fatfs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
2988:source\fatfs/ff.c **** )
2989:source\fatfs/ff.c **** {
2990:source\fatfs/ff.c **** 	FRESULT res;
2991:source\fatfs/ff.c **** 	DIR dj;
2992:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
2993:source\fatfs/ff.c **** 
2994:source\fatfs/ff.c **** 
2995:source\fatfs/ff.c **** 	/* Get logical drive number */
2996:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2997:source\fatfs/ff.c **** 	if (res == FR_OK) {
2998:source\fatfs/ff.c **** 		INIT_BUF(dj);
2999:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3000:source\fatfs/ff.c **** 		FREE_BUF();
3001:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3002:source\fatfs/ff.c **** 			if (!dj.dir) {
3003:source\fatfs/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
3004:source\fatfs/ff.c **** 			} else {
3005:source\fatfs/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
3006:source\fatfs/ff.c **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
3007:source\fatfs/ff.c **** 				else
3008:source\fatfs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3009:source\fatfs/ff.c **** 			}
3010:source\fatfs/ff.c **** 		}
3011:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3012:source\fatfs/ff.c **** 	}
3013:source\fatfs/ff.c **** 
3014:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3015:source\fatfs/ff.c **** }
3016:source\fatfs/ff.c **** 
3017:source\fatfs/ff.c **** 
3018:source\fatfs/ff.c **** #if _FS_RPATH >= 2
3019:source\fatfs/ff.c **** FRESULT f_getcwd (
3020:source\fatfs/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3021:source\fatfs/ff.c **** 	UINT len		/* Size of path */
3022:source\fatfs/ff.c **** )
3023:source\fatfs/ff.c **** {
3024:source\fatfs/ff.c **** 	FRESULT res;
3025:source\fatfs/ff.c **** 	DIR dj;
3026:source\fatfs/ff.c **** 	UINT i, n;
3027:source\fatfs/ff.c **** 	DWORD ccl;
3028:source\fatfs/ff.c **** 	TCHAR *tp;
3029:source\fatfs/ff.c **** 	FILINFO fno;
3030:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3031:source\fatfs/ff.c **** 
3032:source\fatfs/ff.c **** 
3033:source\fatfs/ff.c **** 	*buff = 0;
3034:source\fatfs/ff.c **** 	/* Get logical drive number */
3035:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
3036:source\fatfs/ff.c **** 	if (res == FR_OK) {
3037:source\fatfs/ff.c **** 		INIT_BUF(dj);
3038:source\fatfs/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3039:source\fatfs/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
3040:source\fatfs/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3041:source\fatfs/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent directory */
3042:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3043:source\fatfs/ff.c **** 			res = dir_read(&dj, 0);
3044:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3045:source\fatfs/ff.c **** 			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
3046:source\fatfs/ff.c **** 			res = dir_sdi(&dj, 0);
3047:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3048:source\fatfs/ff.c **** 			do {							/* Find the entry links to the child directory */
3049:source\fatfs/ff.c **** 				res = dir_read(&dj, 0);
3050:source\fatfs/ff.c **** 				if (res != FR_OK) break;
3051:source\fatfs/ff.c **** 				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
3052:source\fatfs/ff.c **** 				res = dir_next(&dj, 0);	
3053:source\fatfs/ff.c **** 			} while (res == FR_OK);
3054:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3055:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3056:source\fatfs/ff.c **** #if _USE_LFN
3057:source\fatfs/ff.c **** 			fno.lfname = buff;
3058:source\fatfs/ff.c **** 			fno.lfsize = i;
3059:source\fatfs/ff.c **** #endif
3060:source\fatfs/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3061:source\fatfs/ff.c **** 			tp = fno.fname;
3062:source\fatfs/ff.c **** #if _USE_LFN
3063:source\fatfs/ff.c **** 			if (*buff) tp = buff;
3064:source\fatfs/ff.c **** #endif
3065:source\fatfs/ff.c **** 			for (n = 0; tp[n]; n++) ;
3066:source\fatfs/ff.c **** 			if (i < n + 3) {
3067:source\fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
3068:source\fatfs/ff.c **** 			}
3069:source\fatfs/ff.c **** 			while (n) buff[--i] = tp[--n];
3070:source\fatfs/ff.c **** 			buff[--i] = '/';
3071:source\fatfs/ff.c **** 		}
3072:source\fatfs/ff.c **** 		tp = buff;
3073:source\fatfs/ff.c **** 		if (res == FR_OK) {
3074:source\fatfs/ff.c **** #if _VOLUMES >= 2
3075:source\fatfs/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3076:source\fatfs/ff.c **** 			*tp++ = ':';
3077:source\fatfs/ff.c **** #endif
3078:source\fatfs/ff.c **** 			if (i == len) {					/* Root-directory */
3079:source\fatfs/ff.c **** 				*tp++ = '/';
3080:source\fatfs/ff.c **** 			} else {						/* Sub-directroy */
3081:source\fatfs/ff.c **** 				do		/* Add stacked path str */
3082:source\fatfs/ff.c **** 					*tp++ = buff[i++];
3083:source\fatfs/ff.c **** 				while (i < len);
3084:source\fatfs/ff.c **** 			}
3085:source\fatfs/ff.c **** 		}
3086:source\fatfs/ff.c **** 		*tp = 0;
3087:source\fatfs/ff.c **** 		FREE_BUF();
3088:source\fatfs/ff.c **** 	}
3089:source\fatfs/ff.c **** 
3090:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3091:source\fatfs/ff.c **** }
3092:source\fatfs/ff.c **** #endif /* _FS_RPATH >= 2 */
3093:source\fatfs/ff.c **** #endif /* _FS_RPATH >= 1 */
3094:source\fatfs/ff.c **** 
3095:source\fatfs/ff.c **** 
3096:source\fatfs/ff.c **** 
3097:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
3098:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3099:source\fatfs/ff.c **** /* Seek File R/W Pointer                                                 */
3100:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3101:source\fatfs/ff.c **** 
3102:source\fatfs/ff.c **** FRESULT f_lseek (
3103:source\fatfs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
3104:source\fatfs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
3105:source\fatfs/ff.c **** )
3106:source\fatfs/ff.c **** {
3107:source\fatfs/ff.c **** 	FRESULT res;
3108:source\fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
3109:source\fatfs/ff.c **** #if _USE_FASTSEEK
3110:source\fatfs/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
3111:source\fatfs/ff.c **** #endif
3112:source\fatfs/ff.c **** 
3113:source\fatfs/ff.c **** 
3114:source\fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
3115:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
3116:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
3117:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
3118:source\fatfs/ff.c **** 
3119:source\fatfs/ff.c **** #if _USE_FASTSEEK
3120:source\fatfs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
3121:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
3122:source\fatfs/ff.c **** 			tbl = fp->cltbl;
3123:source\fatfs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
3124:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
3125:source\fatfs/ff.c **** 			if (cl) {
3126:source\fatfs/ff.c **** 				do {
3127:source\fatfs/ff.c **** 					/* Get a fragment */
3128:source\fatfs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
3129:source\fatfs/ff.c **** 					do {
3130:source\fatfs/ff.c **** 						pcl = cl; ncl++;
3131:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
3132:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
3133:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3134:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
3135:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
3136:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
3137:source\fatfs/ff.c **** 					}
3138:source\fatfs/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
3139:source\fatfs/ff.c **** 			}
3140:source\fatfs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
3141:source\fatfs/ff.c **** 			if (ulen <= tlen)
3142:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
3143:source\fatfs/ff.c **** 			else
3144:source\fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
3145:source\fatfs/ff.c **** 
3146:source\fatfs/ff.c **** 		} else {						/* Fast seek */
3147:source\fatfs/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
3148:source\fatfs/ff.c **** 				ofs = fp->fsize;
3149:source\fatfs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
3150:source\fatfs/ff.c **** 			if (ofs) {
3151:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
3152:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
3153:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
3154:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
3155:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
3156:source\fatfs/ff.c **** #if !_FS_TINY
3157:source\fatfs/ff.c **** #if !_FS_READONLY
3158:source\fatfs/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
3159:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3160:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
3161:source\fatfs/ff.c **** 						fp->flag &= ~FA__DIRTY;
3162:source\fatfs/ff.c **** 					}
3163:source\fatfs/ff.c **** #endif
3164:source\fatfs/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
3165:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
3166:source\fatfs/ff.c **** #endif
3167:source\fatfs/ff.c **** 					fp->dsect = dsc;
3168:source\fatfs/ff.c **** 				}
3169:source\fatfs/ff.c **** 			}
3170:source\fatfs/ff.c **** 		}
3171:source\fatfs/ff.c **** 	} else
3172:source\fatfs/ff.c **** #endif
3173:source\fatfs/ff.c **** 
3174:source\fatfs/ff.c **** 	/* Normal Seek */
3175:source\fatfs/ff.c **** 	{
3176:source\fatfs/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
3177:source\fatfs/ff.c **** #if !_FS_READONLY
3178:source\fatfs/ff.c **** 			 && !(fp->flag & FA_WRITE)
3179:source\fatfs/ff.c **** #endif
3180:source\fatfs/ff.c **** 			) ofs = fp->fsize;
3181:source\fatfs/ff.c **** 
3182:source\fatfs/ff.c **** 		ifptr = fp->fptr;
3183:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
3184:source\fatfs/ff.c **** 		if (ofs) {
3185:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
3186:source\fatfs/ff.c **** 			if (ifptr > 0 &&
3187:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
3188:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
3189:source\fatfs/ff.c **** 				ofs -= fp->fptr;
3190:source\fatfs/ff.c **** 				clst = fp->clust;
3191:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
3192:source\fatfs/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
3193:source\fatfs/ff.c **** #if !_FS_READONLY
3194:source\fatfs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
3195:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
3196:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
3197:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3198:source\fatfs/ff.c **** 					fp->sclust = clst;
3199:source\fatfs/ff.c **** 				}
3200:source\fatfs/ff.c **** #endif
3201:source\fatfs/ff.c **** 				fp->clust = clst;
3202:source\fatfs/ff.c **** 			}
3203:source\fatfs/ff.c **** 			if (clst != 0) {
3204:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
3205:source\fatfs/ff.c **** #if !_FS_READONLY
3206:source\fatfs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
3207:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
3208:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
3209:source\fatfs/ff.c **** 							ofs = bcs; break;
3210:source\fatfs/ff.c **** 						}
3211:source\fatfs/ff.c **** 					} else
3212:source\fatfs/ff.c **** #endif
3213:source\fatfs/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
3214:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3215:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
3216:source\fatfs/ff.c **** 					fp->clust = clst;
3217:source\fatfs/ff.c **** 					fp->fptr += bcs;
3218:source\fatfs/ff.c **** 					ofs -= bcs;
3219:source\fatfs/ff.c **** 				}
3220:source\fatfs/ff.c **** 				fp->fptr += ofs;
3221:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
3222:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
3223:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
3224:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
3225:source\fatfs/ff.c **** 				}
3226:source\fatfs/ff.c **** 			}
3227:source\fatfs/ff.c **** 		}
3228:source\fatfs/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
3229:source\fatfs/ff.c **** #if !_FS_TINY
3230:source\fatfs/ff.c **** #if !_FS_READONLY
3231:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
3232:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3233:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
3234:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
3235:source\fatfs/ff.c **** 			}
3236:source\fatfs/ff.c **** #endif
3237:source\fatfs/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
3238:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
3239:source\fatfs/ff.c **** #endif
3240:source\fatfs/ff.c **** 			fp->dsect = nsect;
3241:source\fatfs/ff.c **** 		}
3242:source\fatfs/ff.c **** #if !_FS_READONLY
3243:source\fatfs/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
3244:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
3245:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
3246:source\fatfs/ff.c **** 		}
3247:source\fatfs/ff.c **** #endif
3248:source\fatfs/ff.c **** 	}
3249:source\fatfs/ff.c **** 
3250:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
3251:source\fatfs/ff.c **** }
3252:source\fatfs/ff.c **** 
3253:source\fatfs/ff.c **** 
3254:source\fatfs/ff.c **** 
3255:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1
3256:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3257:source\fatfs/ff.c **** /* Create a Directory Object                                             */
3258:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3259:source\fatfs/ff.c **** 
3260:source\fatfs/ff.c **** FRESULT f_opendir (
3261:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
3262:source\fatfs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3263:source\fatfs/ff.c **** )
3264:source\fatfs/ff.c **** {
3265:source\fatfs/ff.c **** 	FRESULT res;
3266:source\fatfs/ff.c **** 	FATFS* fs;
3267:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3268:source\fatfs/ff.c **** 
3269:source\fatfs/ff.c **** 
3270:source\fatfs/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
3271:source\fatfs/ff.c **** 
3272:source\fatfs/ff.c **** 	/* Get logical drive number */
3273:source\fatfs/ff.c **** 	res = find_volume(&fs, &path, 0);
3274:source\fatfs/ff.c **** 	if (res == FR_OK) {
3275:source\fatfs/ff.c **** 		dp->fs = fs;
3276:source\fatfs/ff.c **** 		INIT_BUF(*dp);
3277:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
3278:source\fatfs/ff.c **** 		FREE_BUF();
3279:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
3280:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
3281:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
3282:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
3283:source\fatfs/ff.c **** 				else							/* The object is a file */
3284:source\fatfs/ff.c **** 					res = FR_NO_PATH;
3285:source\fatfs/ff.c **** 			}
3286:source\fatfs/ff.c **** 			if (res == FR_OK) {
3287:source\fatfs/ff.c **** 				dp->id = fs->id;
3288:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
3289:source\fatfs/ff.c **** #if _FS_LOCK
3290:source\fatfs/ff.c **** 				if (res == FR_OK) {
3291:source\fatfs/ff.c **** 					if (dp->sclust) {
3292:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
3293:source\fatfs/ff.c **** 						if (!dp->lockid)
3294:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
3295:source\fatfs/ff.c **** 					} else {
3296:source\fatfs/ff.c **** 						dp->lockid = 0;	/* Root directory need not to be locked */
3297:source\fatfs/ff.c **** 					}
3298:source\fatfs/ff.c **** 				}
3299:source\fatfs/ff.c **** #endif
3300:source\fatfs/ff.c **** 			}
3301:source\fatfs/ff.c **** 		}
3302:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3303:source\fatfs/ff.c **** 	}
3304:source\fatfs/ff.c **** 	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
3305:source\fatfs/ff.c **** 
3306:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
3307:source\fatfs/ff.c **** }
3308:source\fatfs/ff.c **** 
3309:source\fatfs/ff.c **** 
3310:source\fatfs/ff.c **** 
3311:source\fatfs/ff.c **** 
3312:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3313:source\fatfs/ff.c **** /* Close Directory                                                       */
3314:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3315:source\fatfs/ff.c **** 
3316:source\fatfs/ff.c **** FRESULT f_closedir (
3317:source\fatfs/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
3318:source\fatfs/ff.c **** )
3319:source\fatfs/ff.c **** {
3320:source\fatfs/ff.c **** 	FRESULT res;
3321:source\fatfs/ff.c **** 
3322:source\fatfs/ff.c **** 
3323:source\fatfs/ff.c **** 	res = validate(dp);
3324:source\fatfs/ff.c **** 	if (res == FR_OK) {
3325:source\fatfs/ff.c **** #if _FS_REENTRANT
3326:source\fatfs/ff.c **** 		FATFS *fs = dp->fs;
3327:source\fatfs/ff.c **** #endif
3328:source\fatfs/ff.c **** #if _FS_LOCK
3329:source\fatfs/ff.c **** 		if (dp->lockid)				/* Decrement sub-directory open counter */
3330:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
3331:source\fatfs/ff.c **** 		if (res == FR_OK)
3332:source\fatfs/ff.c **** #endif
3333:source\fatfs/ff.c **** 			dp->fs = 0;				/* Invalidate directory object */
3334:source\fatfs/ff.c **** #if _FS_REENTRANT
3335:source\fatfs/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
3336:source\fatfs/ff.c **** #endif
3337:source\fatfs/ff.c **** 	}
3338:source\fatfs/ff.c **** 	return res;
3339:source\fatfs/ff.c **** }
3340:source\fatfs/ff.c **** 
3341:source\fatfs/ff.c **** 
3342:source\fatfs/ff.c **** 
3343:source\fatfs/ff.c **** 
3344:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3345:source\fatfs/ff.c **** /* Read Directory Entries in Sequence                                    */
3346:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3347:source\fatfs/ff.c **** 
3348:source\fatfs/ff.c **** FRESULT f_readdir (
3349:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
3350:source\fatfs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3351:source\fatfs/ff.c **** )
3352:source\fatfs/ff.c **** {
3353:source\fatfs/ff.c **** 	FRESULT res;
3354:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3355:source\fatfs/ff.c **** 
3356:source\fatfs/ff.c **** 
3357:source\fatfs/ff.c **** 	res = validate(dp);						/* Check validity of the object */
3358:source\fatfs/ff.c **** 	if (res == FR_OK) {
3359:source\fatfs/ff.c **** 		if (!fno) {
3360:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
3361:source\fatfs/ff.c **** 		} else {
3362:source\fatfs/ff.c **** 			INIT_BUF(*dp);
3363:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
3364:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
3365:source\fatfs/ff.c **** 				dp->sect = 0;
3366:source\fatfs/ff.c **** 				res = FR_OK;
3367:source\fatfs/ff.c **** 			}
3368:source\fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
3369:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
3370:source\fatfs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
3371:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
3372:source\fatfs/ff.c **** 					dp->sect = 0;
3373:source\fatfs/ff.c **** 					res = FR_OK;
3374:source\fatfs/ff.c **** 				}
3375:source\fatfs/ff.c **** 			}
3376:source\fatfs/ff.c **** 			FREE_BUF();
3377:source\fatfs/ff.c **** 		}
3378:source\fatfs/ff.c **** 	}
3379:source\fatfs/ff.c **** 
3380:source\fatfs/ff.c **** 	LEAVE_FF(dp->fs, res);
3381:source\fatfs/ff.c **** }
3382:source\fatfs/ff.c **** 
3383:source\fatfs/ff.c **** 
3384:source\fatfs/ff.c **** 
3385:source\fatfs/ff.c **** #if _USE_FIND
3386:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3387:source\fatfs/ff.c **** /* Find next file                                                        */
3388:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3389:source\fatfs/ff.c **** 
3390:source\fatfs/ff.c **** FRESULT f_findnext (
3391:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
3392:source\fatfs/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
3393:source\fatfs/ff.c **** )
3394:source\fatfs/ff.c **** {
3395:source\fatfs/ff.c **** 	FRESULT res;
3396:source\fatfs/ff.c **** 
3397:source\fatfs/ff.c **** 
3398:source\fatfs/ff.c **** 	for (;;) {
3399:source\fatfs/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
3400:source\fatfs/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
3401:source\fatfs/ff.c **** #if _USE_LFN
3402:source\fatfs/ff.c **** 		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist 
3403:source\fatfs/ff.c **** #endif
3404:source\fatfs/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
3405:source\fatfs/ff.c **** 	}
3406:source\fatfs/ff.c **** 	return res;
3407:source\fatfs/ff.c **** 
3408:source\fatfs/ff.c **** }
3409:source\fatfs/ff.c **** 
3410:source\fatfs/ff.c **** 
3411:source\fatfs/ff.c **** 
3412:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3413:source\fatfs/ff.c **** /* Find first file                                                       */
3414:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3415:source\fatfs/ff.c **** 
3416:source\fatfs/ff.c **** FRESULT f_findfirst (
3417:source\fatfs/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
3418:source\fatfs/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
3419:source\fatfs/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
3420:source\fatfs/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
3421:source\fatfs/ff.c **** )
3422:source\fatfs/ff.c **** {
3423:source\fatfs/ff.c **** 	FRESULT res;
3424:source\fatfs/ff.c **** 
3425:source\fatfs/ff.c **** 
3426:source\fatfs/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
3427:source\fatfs/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
3428:source\fatfs/ff.c **** 	if (res == FR_OK)
3429:source\fatfs/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
3430:source\fatfs/ff.c **** 	return res;
3431:source\fatfs/ff.c **** }
3432:source\fatfs/ff.c **** 
3433:source\fatfs/ff.c **** #endif	/* _USE_FIND */
3434:source\fatfs/ff.c **** 
3435:source\fatfs/ff.c **** 
3436:source\fatfs/ff.c **** 
3437:source\fatfs/ff.c **** #if _FS_MINIMIZE == 0
3438:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3439:source\fatfs/ff.c **** /* Get File Status                                                       */
3440:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3441:source\fatfs/ff.c **** 
3442:source\fatfs/ff.c **** FRESULT f_stat (
3443:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3444:source\fatfs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3445:source\fatfs/ff.c **** )
3446:source\fatfs/ff.c **** {
3447:source\fatfs/ff.c **** 	FRESULT res;
3448:source\fatfs/ff.c **** 	DIR dj;
3449:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3450:source\fatfs/ff.c **** 
3451:source\fatfs/ff.c **** 
3452:source\fatfs/ff.c **** 	/* Get logical drive number */
3453:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
3454:source\fatfs/ff.c **** 	if (res == FR_OK) {
3455:source\fatfs/ff.c **** 		INIT_BUF(dj);
3456:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3457:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
3458:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
3459:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
3460:source\fatfs/ff.c **** 			} else {			/* It is root directory */
3461:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3462:source\fatfs/ff.c **** 			}
3463:source\fatfs/ff.c **** 		}
3464:source\fatfs/ff.c **** 		FREE_BUF();
3465:source\fatfs/ff.c **** 	}
3466:source\fatfs/ff.c **** 
3467:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3468:source\fatfs/ff.c **** }
3469:source\fatfs/ff.c **** 
3470:source\fatfs/ff.c **** 
3471:source\fatfs/ff.c **** 
3472:source\fatfs/ff.c **** #if !_FS_READONLY
3473:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3474:source\fatfs/ff.c **** /* Get Number of Free Clusters                                           */
3475:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3476:source\fatfs/ff.c **** 
3477:source\fatfs/ff.c **** FRESULT f_getfree (
3478:source\fatfs/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3479:source\fatfs/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
3480:source\fatfs/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
3481:source\fatfs/ff.c **** )
3482:source\fatfs/ff.c **** {
3483:source\fatfs/ff.c **** 	FRESULT res;
3484:source\fatfs/ff.c **** 	FATFS *fs;
3485:source\fatfs/ff.c **** 	DWORD n, clst, sect, stat;
3486:source\fatfs/ff.c **** 	UINT i;
3487:source\fatfs/ff.c **** 	BYTE fat, *p;
3488:source\fatfs/ff.c **** 
3489:source\fatfs/ff.c **** 
3490:source\fatfs/ff.c **** 	/* Get logical drive number */
3491:source\fatfs/ff.c **** 	res = find_volume(fatfs, &path, 0);
3492:source\fatfs/ff.c **** 	fs = *fatfs;
3493:source\fatfs/ff.c **** 	if (res == FR_OK) {
3494:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3495:source\fatfs/ff.c **** 		if (fs->free_clust <= fs->n_fatent - 2) {
3496:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
3497:source\fatfs/ff.c **** 		} else {
3498:source\fatfs/ff.c **** 			/* Get number of free clusters */
3499:source\fatfs/ff.c **** 			fat = fs->fs_type;
3500:source\fatfs/ff.c **** 			n = 0;
3501:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
3502:source\fatfs/ff.c **** 				clst = 2;
3503:source\fatfs/ff.c **** 				do {
3504:source\fatfs/ff.c **** 					stat = get_fat(fs, clst);
3505:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
3506:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
3507:source\fatfs/ff.c **** 					if (stat == 0) n++;
3508:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
3509:source\fatfs/ff.c **** 			} else {
3510:source\fatfs/ff.c **** 				clst = fs->n_fatent;
3511:source\fatfs/ff.c **** 				sect = fs->fatbase;
3512:source\fatfs/ff.c **** 				i = 0; p = 0;
3513:source\fatfs/ff.c **** 				do {
3514:source\fatfs/ff.c **** 					if (!i) {
3515:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
3516:source\fatfs/ff.c **** 						if (res != FR_OK) break;
3517:source\fatfs/ff.c **** 						p = fs->win.d8;
3518:source\fatfs/ff.c **** 						i = SS(fs);
3519:source\fatfs/ff.c **** 					}
3520:source\fatfs/ff.c **** 					if (fat == FS_FAT16) {
3521:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
3522:source\fatfs/ff.c **** 						p += 2; i -= 2;
3523:source\fatfs/ff.c **** 					} else {
3524:source\fatfs/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
3525:source\fatfs/ff.c **** 						p += 4; i -= 4;
3526:source\fatfs/ff.c **** 					}
3527:source\fatfs/ff.c **** 				} while (--clst);
3528:source\fatfs/ff.c **** 			}
3529:source\fatfs/ff.c **** 			fs->free_clust = n;
3530:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
3531:source\fatfs/ff.c **** 			*nclst = n;
3532:source\fatfs/ff.c **** 		}
3533:source\fatfs/ff.c **** 	}
3534:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
3535:source\fatfs/ff.c **** }
3536:source\fatfs/ff.c **** 
3537:source\fatfs/ff.c **** 
3538:source\fatfs/ff.c **** 
3539:source\fatfs/ff.c **** 
3540:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3541:source\fatfs/ff.c **** /* Truncate File                                                         */
3542:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3543:source\fatfs/ff.c **** 
3544:source\fatfs/ff.c **** FRESULT f_truncate (
3545:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
3546:source\fatfs/ff.c **** )
3547:source\fatfs/ff.c **** {
3548:source\fatfs/ff.c **** 	FRESULT res;
3549:source\fatfs/ff.c **** 	DWORD ncl;
3550:source\fatfs/ff.c **** 
3551:source\fatfs/ff.c **** 
3552:source\fatfs/ff.c **** 	res = validate(fp);						/* Check validity of the object */
3553:source\fatfs/ff.c **** 	if (res == FR_OK) {
3554:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
3555:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
3556:source\fatfs/ff.c **** 		} else {
3557:source\fatfs/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
3558:source\fatfs/ff.c **** 				res = FR_DENIED;
3559:source\fatfs/ff.c **** 		}
3560:source\fatfs/ff.c **** 	}
3561:source\fatfs/ff.c **** 	if (res == FR_OK) {
3562:source\fatfs/ff.c **** 		if (fp->fsize > fp->fptr) {
3563:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
3564:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
3565:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
3566:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
3567:source\fatfs/ff.c **** 				fp->sclust = 0;
3568:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3569:source\fatfs/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
3570:source\fatfs/ff.c **** 				res = FR_OK;
3571:source\fatfs/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
3572:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
3573:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
3574:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
3575:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
3576:source\fatfs/ff.c **** 				}
3577:source\fatfs/ff.c **** 			}
3578:source\fatfs/ff.c **** #if !_FS_TINY
3579:source\fatfs/ff.c **** 			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
3580:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3581:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
3582:source\fatfs/ff.c **** 				else
3583:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
3584:source\fatfs/ff.c **** 			}
3585:source\fatfs/ff.c **** #endif
3586:source\fatfs/ff.c **** 		}
3587:source\fatfs/ff.c **** 		if (res != FR_OK) fp->err = (FRESULT)res;
3588:source\fatfs/ff.c **** 	}
3589:source\fatfs/ff.c **** 
3590:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
3591:source\fatfs/ff.c **** }
3592:source\fatfs/ff.c **** 
3593:source\fatfs/ff.c **** 
3594:source\fatfs/ff.c **** 
3595:source\fatfs/ff.c **** 
3596:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3597:source\fatfs/ff.c **** /* Delete a File or Directory                                            */
3598:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3599:source\fatfs/ff.c **** 
3600:source\fatfs/ff.c **** FRESULT f_unlink (
3601:source\fatfs/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
3602:source\fatfs/ff.c **** )
3603:source\fatfs/ff.c **** {
3604:source\fatfs/ff.c **** 	FRESULT res;
3605:source\fatfs/ff.c **** 	DIR dj, sdj;
3606:source\fatfs/ff.c **** 	BYTE *dir;
3607:source\fatfs/ff.c **** 	DWORD dclst = 0;
3608:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3609:source\fatfs/ff.c **** 
3610:source\fatfs/ff.c **** 
3611:source\fatfs/ff.c **** 	/* Get logical drive number */
3612:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3613:source\fatfs/ff.c **** 	if (res == FR_OK) {
3614:source\fatfs/ff.c **** 		INIT_BUF(dj);
3615:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
3616:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3617:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
3618:source\fatfs/ff.c **** #if _FS_LOCK
3619:source\fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
3620:source\fatfs/ff.c **** #endif
3621:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
3622:source\fatfs/ff.c **** 			dir = dj.dir;
3623:source\fatfs/ff.c **** 			if (!dir) {
3624:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
3625:source\fatfs/ff.c **** 			} else {
3626:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
3627:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
3628:source\fatfs/ff.c **** 			}
3629:source\fatfs/ff.c **** 			if (res == FR_OK) {
3630:source\fatfs/ff.c **** 				dclst = ld_clust(dj.fs, dir);
3631:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
3632:source\fatfs/ff.c **** #if _FS_RPATH
3633:source\fatfs/ff.c **** 					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
3634:source\fatfs/ff.c **** 						res = FR_DENIED;
3635:source\fatfs/ff.c **** 					} else
3636:source\fatfs/ff.c **** #endif
3637:source\fatfs/ff.c **** 					{
3638:source\fatfs/ff.c **** 						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
3639:source\fatfs/ff.c **** 						sdj.sclust = dclst;
3640:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
3641:source\fatfs/ff.c **** 						if (res == FR_OK) {
3642:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
3643:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
3644:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
3645:source\fatfs/ff.c **** 						}
3646:source\fatfs/ff.c **** 					}
3647:source\fatfs/ff.c **** 				}
3648:source\fatfs/ff.c **** 			}
3649:source\fatfs/ff.c **** 			if (res == FR_OK) {
3650:source\fatfs/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
3651:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
3652:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
3653:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
3654:source\fatfs/ff.c **** 			}
3655:source\fatfs/ff.c **** 		}
3656:source\fatfs/ff.c **** 		FREE_BUF();
3657:source\fatfs/ff.c **** 	}
3658:source\fatfs/ff.c **** 
3659:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3660:source\fatfs/ff.c **** }
3661:source\fatfs/ff.c **** 
3662:source\fatfs/ff.c **** 
3663:source\fatfs/ff.c **** 
3664:source\fatfs/ff.c **** 
3665:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3666:source\fatfs/ff.c **** /* Create a Directory                                                    */
3667:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3668:source\fatfs/ff.c **** 
3669:source\fatfs/ff.c **** FRESULT f_mkdir (
3670:source\fatfs/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
3671:source\fatfs/ff.c **** )
3672:source\fatfs/ff.c **** {
3673:source\fatfs/ff.c **** 	FRESULT res;
3674:source\fatfs/ff.c **** 	DIR dj;
3675:source\fatfs/ff.c **** 	BYTE *dir, n;
3676:source\fatfs/ff.c **** 	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
3677:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3678:source\fatfs/ff.c **** 
3679:source\fatfs/ff.c **** 
3680:source\fatfs/ff.c **** 	/* Get logical drive number */
3681:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3682:source\fatfs/ff.c **** 	if (res == FR_OK) {
3683:source\fatfs/ff.c **** 		INIT_BUF(dj);
3684:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
3685:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
3686:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
3687:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3688:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
3689:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
3690:source\fatfs/ff.c **** 			res = FR_OK;
3691:source\fatfs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
3692:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
3693:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
3694:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
3695:source\fatfs/ff.c **** 				res = sync_window(dj.fs);
3696:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
3697:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
3698:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
3699:source\fatfs/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
3700:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
3701:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
3702:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
3703:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
3704:source\fatfs/ff.c **** 				st_clust(dir, dcl);
3705:source\fatfs/ff.c **** 				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
3706:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
3707:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
3708:source\fatfs/ff.c **** 					pcl = 0;
3709:source\fatfs/ff.c **** 				st_clust(dir + SZ_DIRE, pcl);
3710:source\fatfs/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
3711:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
3712:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
3713:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
3714:source\fatfs/ff.c **** 					if (res != FR_OK) break;
3715:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
3716:source\fatfs/ff.c **** 				}
3717:source\fatfs/ff.c **** 			}
3718:source\fatfs/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
3719:source\fatfs/ff.c **** 			if (res != FR_OK) {
3720:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
3721:source\fatfs/ff.c **** 			} else {
3722:source\fatfs/ff.c **** 				dir = dj.dir;
3723:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
3724:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
3725:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
3726:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3727:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3728:source\fatfs/ff.c **** 			}
3729:source\fatfs/ff.c **** 		}
3730:source\fatfs/ff.c **** 		FREE_BUF();
3731:source\fatfs/ff.c **** 	}
3732:source\fatfs/ff.c **** 
3733:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3734:source\fatfs/ff.c **** }
3735:source\fatfs/ff.c **** 
3736:source\fatfs/ff.c **** 
3737:source\fatfs/ff.c **** 
3738:source\fatfs/ff.c **** 
3739:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3740:source\fatfs/ff.c **** /* Change Attribute                                                      */
3741:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3742:source\fatfs/ff.c **** 
3743:source\fatfs/ff.c **** FRESULT f_chmod (
3744:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3745:source\fatfs/ff.c **** 	BYTE attr,			/* Attribute bits */
3746:source\fatfs/ff.c **** 	BYTE mask			/* Attribute mask to change */
3747:source\fatfs/ff.c **** )
3748:source\fatfs/ff.c **** {
3749:source\fatfs/ff.c **** 	FRESULT res;
3750:source\fatfs/ff.c **** 	DIR dj;
3751:source\fatfs/ff.c **** 	BYTE *dir;
3752:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3753:source\fatfs/ff.c **** 
3754:source\fatfs/ff.c **** 
3755:source\fatfs/ff.c **** 	/* Get logical drive number */
3756:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3757:source\fatfs/ff.c **** 	if (res == FR_OK) {
3758:source\fatfs/ff.c **** 		INIT_BUF(dj);
3759:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
3760:source\fatfs/ff.c **** 		FREE_BUF();
3761:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3762:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3763:source\fatfs/ff.c **** 		if (res == FR_OK) {
3764:source\fatfs/ff.c **** 			dir = dj.dir;
3765:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
3766:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3767:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
3768:source\fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
3769:source\fatfs/ff.c **** 				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
3770:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3771:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3772:source\fatfs/ff.c **** 			}
3773:source\fatfs/ff.c **** 		}
3774:source\fatfs/ff.c **** 	}
3775:source\fatfs/ff.c **** 
3776:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3777:source\fatfs/ff.c **** }
3778:source\fatfs/ff.c **** 
3779:source\fatfs/ff.c **** 
3780:source\fatfs/ff.c **** 
3781:source\fatfs/ff.c **** 
3782:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3783:source\fatfs/ff.c **** /* Rename File/Directory                                                 */
3784:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3785:source\fatfs/ff.c **** 
3786:source\fatfs/ff.c **** FRESULT f_rename (
3787:source\fatfs/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object to be renamed */
3788:source\fatfs/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
3789:source\fatfs/ff.c **** )
3790:source\fatfs/ff.c **** {
3791:source\fatfs/ff.c **** 	FRESULT res;
3792:source\fatfs/ff.c **** 	DIR djo, djn;
3793:source\fatfs/ff.c **** 	BYTE buf[21], *dir;
3794:source\fatfs/ff.c **** 	DWORD dw;
3795:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3796:source\fatfs/ff.c **** 
3797:source\fatfs/ff.c **** 
3798:source\fatfs/ff.c **** 	/* Get logical drive number of the source object */
3799:source\fatfs/ff.c **** 	res = find_volume(&djo.fs, &path_old, 1);
3800:source\fatfs/ff.c **** 	if (res == FR_OK) {
3801:source\fatfs/ff.c **** 		djn.fs = djo.fs;
3802:source\fatfs/ff.c **** 		INIT_BUF(djo);
3803:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
3804:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
3805:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3806:source\fatfs/ff.c **** #if _FS_LOCK
3807:source\fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3808:source\fatfs/ff.c **** #endif
3809:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
3810:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
3811:source\fatfs/ff.c **** 				res = FR_NO_FILE;
3812:source\fatfs/ff.c **** 			} else {
3813:source\fatfs/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
3814:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
3815:source\fatfs/ff.c **** 				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
3816:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
3817:source\fatfs/ff.c **** 				else
3818:source\fatfs/ff.c **** 					res = FR_INVALID_DRIVE;
3819:source\fatfs/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
3820:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
3821:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
3822:source\fatfs/ff.c **** 					if (res == FR_OK) {
3823:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
3824:source\fatfs/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
3825:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
3826:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
3827:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
3828:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
3829:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
3830:source\fatfs/ff.c **** 							if (!dw) {
3831:source\fatfs/ff.c **** 								res = FR_INT_ERR;
3832:source\fatfs/ff.c **** 							} else {
3833:source\fatfs/ff.c **** 								res = move_window(djo.fs, dw);
3834:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
3835:source\fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
3836:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
3837:source\fatfs/ff.c **** 									djo.fs->wflag = 1;
3838:source\fatfs/ff.c **** 								}
3839:source\fatfs/ff.c **** 							}
3840:source\fatfs/ff.c **** 						}
3841:source\fatfs/ff.c **** 						if (res == FR_OK) {
3842:source\fatfs/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
3843:source\fatfs/ff.c **** 							if (res == FR_OK)
3844:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
3845:source\fatfs/ff.c **** 						}
3846:source\fatfs/ff.c **** /* End of critical section */
3847:source\fatfs/ff.c **** 					}
3848:source\fatfs/ff.c **** 				}
3849:source\fatfs/ff.c **** 			}
3850:source\fatfs/ff.c **** 		}
3851:source\fatfs/ff.c **** 		FREE_BUF();
3852:source\fatfs/ff.c **** 	}
3853:source\fatfs/ff.c **** 
3854:source\fatfs/ff.c **** 	LEAVE_FF(djo.fs, res);
3855:source\fatfs/ff.c **** }
3856:source\fatfs/ff.c **** 
3857:source\fatfs/ff.c **** 
3858:source\fatfs/ff.c **** 
3859:source\fatfs/ff.c **** 
3860:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3861:source\fatfs/ff.c **** /* Change Timestamp                                                      */
3862:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3863:source\fatfs/ff.c **** 
3864:source\fatfs/ff.c **** FRESULT f_utime (
3865:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
3866:source\fatfs/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
3867:source\fatfs/ff.c **** )
3868:source\fatfs/ff.c **** {
3869:source\fatfs/ff.c **** 	FRESULT res;
3870:source\fatfs/ff.c **** 	DIR dj;
3871:source\fatfs/ff.c **** 	BYTE *dir;
3872:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3873:source\fatfs/ff.c **** 
3874:source\fatfs/ff.c **** 
3875:source\fatfs/ff.c **** 	/* Get logical drive number */
3876:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3877:source\fatfs/ff.c **** 	if (res == FR_OK) {
3878:source\fatfs/ff.c **** 		INIT_BUF(dj);
3879:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3880:source\fatfs/ff.c **** 		FREE_BUF();
3881:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3882:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3883:source\fatfs/ff.c **** 		if (res == FR_OK) {
3884:source\fatfs/ff.c **** 			dir = dj.dir;
3885:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
3886:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3887:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtTime, fno->ftime);
3889:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
3890:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3891:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3892:source\fatfs/ff.c **** 			}
3893:source\fatfs/ff.c **** 		}
3894:source\fatfs/ff.c **** 	}
3895:source\fatfs/ff.c **** 
3896:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3897:source\fatfs/ff.c **** }
3898:source\fatfs/ff.c **** 
3899:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
3900:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3901:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3902:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3903:source\fatfs/ff.c **** 
3904:source\fatfs/ff.c **** 
3905:source\fatfs/ff.c **** 
3906:source\fatfs/ff.c **** 
3907:source\fatfs/ff.c **** #if _USE_LABEL
3908:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3909:source\fatfs/ff.c **** /* Get volume label                                                      */
3910:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3911:source\fatfs/ff.c **** 
3912:source\fatfs/ff.c **** FRESULT f_getlabel (
3913:source\fatfs/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3914:source\fatfs/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
3915:source\fatfs/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
3916:source\fatfs/ff.c **** )
3917:source\fatfs/ff.c **** {
3918:source\fatfs/ff.c **** 	FRESULT res;
3919:source\fatfs/ff.c **** 	DIR dj;
3920:source\fatfs/ff.c **** 	UINT i, j;
3921:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
3922:source\fatfs/ff.c **** 	WCHAR w;
3923:source\fatfs/ff.c **** #endif
3924:source\fatfs/ff.c **** 
3925:source\fatfs/ff.c **** 
3926:source\fatfs/ff.c **** 	/* Get logical drive number */
3927:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
3928:source\fatfs/ff.c **** 
3929:source\fatfs/ff.c **** 	/* Get volume label */
3930:source\fatfs/ff.c **** 	if (res == FR_OK && label) {
3931:source\fatfs/ff.c **** 		dj.sclust = 0;					/* Open root directory */
3932:source\fatfs/ff.c **** 		res = dir_sdi(&dj, 0);
3933:source\fatfs/ff.c **** 		if (res == FR_OK) {
3934:source\fatfs/ff.c **** 			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
3935:source\fatfs/ff.c **** 			if (res == FR_OK) {			/* A volume label is exist */
3936:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
3937:source\fatfs/ff.c **** 				i = j = 0;
3938:source\fatfs/ff.c **** 				do {
3939:source\fatfs/ff.c **** 					w = (i < 11) ? dj.dir[i++] : ' ';
3940:source\fatfs/ff.c **** 					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
3941:source\fatfs/ff.c **** 						w = w << 8 | dj.dir[i++];
3942:source\fatfs/ff.c **** 					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
3943:source\fatfs/ff.c **** 				} while (j < 11);
3944:source\fatfs/ff.c **** #else
3945:source\fatfs/ff.c **** 				mem_cpy(label, dj.dir, 11);
3946:source\fatfs/ff.c **** #endif
3947:source\fatfs/ff.c **** 				j = 11;
3948:source\fatfs/ff.c **** 				do {
3949:source\fatfs/ff.c **** 					label[j] = 0;
3950:source\fatfs/ff.c **** 					if (!j) break;
3951:source\fatfs/ff.c **** 				} while (label[--j] == ' ');
3952:source\fatfs/ff.c **** 			}
3953:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {	/* No label, return nul string */
3954:source\fatfs/ff.c **** 				label[0] = 0;
3955:source\fatfs/ff.c **** 				res = FR_OK;
3956:source\fatfs/ff.c **** 			}
3957:source\fatfs/ff.c **** 		}
3958:source\fatfs/ff.c **** 	}
3959:source\fatfs/ff.c **** 
3960:source\fatfs/ff.c **** 	/* Get volume serial number */
3961:source\fatfs/ff.c **** 	if (res == FR_OK && vsn) {
3962:source\fatfs/ff.c **** 		res = move_window(dj.fs, dj.fs->volbase);
3963:source\fatfs/ff.c **** 		if (res == FR_OK) {
3964:source\fatfs/ff.c **** 			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
3965:source\fatfs/ff.c **** 			*vsn = LD_DWORD(&dj.fs->win.d8[i]);
3966:source\fatfs/ff.c **** 		}
3967:source\fatfs/ff.c **** 	}
3968:source\fatfs/ff.c **** 
3969:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3970:source\fatfs/ff.c **** }
3971:source\fatfs/ff.c **** 
3972:source\fatfs/ff.c **** 
3973:source\fatfs/ff.c **** 
3974:source\fatfs/ff.c **** #if !_FS_READONLY
3975:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3976:source\fatfs/ff.c **** /* Set volume label                                                      */
3977:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3978:source\fatfs/ff.c **** 
3979:source\fatfs/ff.c **** FRESULT f_setlabel (
3980:source\fatfs/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
3981:source\fatfs/ff.c **** )
3982:source\fatfs/ff.c **** {
3983:source\fatfs/ff.c **** 	FRESULT res;
3984:source\fatfs/ff.c **** 	DIR dj;
3985:source\fatfs/ff.c **** 	BYTE vn[11];
3986:source\fatfs/ff.c **** 	UINT i, j, sl;
3987:source\fatfs/ff.c **** 	WCHAR w;
3988:source\fatfs/ff.c **** 	DWORD tm;
3989:source\fatfs/ff.c **** 
3990:source\fatfs/ff.c **** 
3991:source\fatfs/ff.c **** 	/* Get logical drive number */
3992:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &label, 1);
3993:source\fatfs/ff.c **** 	if (res) LEAVE_FF(dj.fs, res);
3994:source\fatfs/ff.c **** 
3995:source\fatfs/ff.c **** 	/* Create a volume label in directory form */
3996:source\fatfs/ff.c **** 	vn[0] = 0;
3997:source\fatfs/ff.c **** 	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
3998:source\fatfs/ff.c **** 	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
3999:source\fatfs/ff.c **** 	if (sl) {	/* Create volume label in directory form */
4000:source\fatfs/ff.c **** 		i = j = 0;
4001:source\fatfs/ff.c **** 		do {
4002:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4003:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(label[i++]), 0);
4004:source\fatfs/ff.c **** #else
4005:source\fatfs/ff.c **** 			w = (BYTE)label[i++];
4006:source\fatfs/ff.c **** 			if (IsDBCS1(w))
4007:source\fatfs/ff.c **** 				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4008:source\fatfs/ff.c **** #if _USE_LFN
4009:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
4010:source\fatfs/ff.c **** #else
4011:source\fatfs/ff.c **** 			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
4012:source\fatfs/ff.c **** #ifdef _EXCVT
4013:source\fatfs/ff.c **** 			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
4014:source\fatfs/ff.c **** #else
4015:source\fatfs/ff.c **** 			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
4016:source\fatfs/ff.c **** #endif
4017:source\fatfs/ff.c **** #endif
4018:source\fatfs/ff.c **** #endif
4019:source\fatfs/ff.c **** 			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject i
4020:source\fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_INVALID_NAME);
4021:source\fatfs/ff.c **** 			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
4022:source\fatfs/ff.c **** 			vn[j++] = (BYTE)w;
4023:source\fatfs/ff.c **** 		} while (i < sl);
4024:source\fatfs/ff.c **** 		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
4025:source\fatfs/ff.c **** 		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
4026:source\fatfs/ff.c **** 	}
4027:source\fatfs/ff.c **** 
4028:source\fatfs/ff.c **** 	/* Set volume label */
4029:source\fatfs/ff.c **** 	dj.sclust = 0;					/* Open root directory */
4030:source\fatfs/ff.c **** 	res = dir_sdi(&dj, 0);
4031:source\fatfs/ff.c **** 	if (res == FR_OK) {
4032:source\fatfs/ff.c **** 		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
4033:source\fatfs/ff.c **** 		if (res == FR_OK) {			/* A volume label is found */
4034:source\fatfs/ff.c **** 			if (vn[0]) {
4035:source\fatfs/ff.c **** 				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
4036:source\fatfs/ff.c **** 				tm = GET_FATTIME();
4037:source\fatfs/ff.c **** 				ST_DWORD(dj.dir + DIR_WrtTime, tm);
4038:source\fatfs/ff.c **** 			} else {
4039:source\fatfs/ff.c **** 				dj.dir[0] = DDEM;			/* Remove the volume label */
4040:source\fatfs/ff.c **** 			}
4041:source\fatfs/ff.c **** 			dj.fs->wflag = 1;
4042:source\fatfs/ff.c **** 			res = sync_fs(dj.fs);
4043:source\fatfs/ff.c **** 		} else {					/* No volume label is found or error */
4044:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {
4045:source\fatfs/ff.c **** 				res = FR_OK;
4046:source\fatfs/ff.c **** 				if (vn[0]) {				/* Create volume label as new */
4047:source\fatfs/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
4048:source\fatfs/ff.c **** 					if (res == FR_OK) {
4049:source\fatfs/ff.c **** 						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
4050:source\fatfs/ff.c **** 						mem_cpy(dj.dir, vn, 11);
4051:source\fatfs/ff.c **** 						dj.dir[DIR_Attr] = AM_VOL;
4052:source\fatfs/ff.c **** 						tm = GET_FATTIME();
4053:source\fatfs/ff.c **** 						ST_DWORD(dj.dir + DIR_WrtTime, tm);
4054:source\fatfs/ff.c **** 						dj.fs->wflag = 1;
4055:source\fatfs/ff.c **** 						res = sync_fs(dj.fs);
4056:source\fatfs/ff.c **** 					}
4057:source\fatfs/ff.c **** 				}
4058:source\fatfs/ff.c **** 			}
4059:source\fatfs/ff.c **** 		}
4060:source\fatfs/ff.c **** 	}
4061:source\fatfs/ff.c **** 
4062:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
4063:source\fatfs/ff.c **** }
4064:source\fatfs/ff.c **** 
4065:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
4066:source\fatfs/ff.c **** #endif /* _USE_LABEL */
4067:source\fatfs/ff.c **** 
4068:source\fatfs/ff.c **** 
4069:source\fatfs/ff.c **** 
4070:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4071:source\fatfs/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
4072:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4073:source\fatfs/ff.c **** #if _USE_FORWARD && _FS_TINY
4074:source\fatfs/ff.c **** 
4075:source\fatfs/ff.c **** FRESULT f_forward (
4076:source\fatfs/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
4077:source\fatfs/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
4078:source\fatfs/ff.c **** 	UINT btf,						/* Number of bytes to forward */
4079:source\fatfs/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
4080:source\fatfs/ff.c **** )
4081:source\fatfs/ff.c **** {
4082:source\fatfs/ff.c **** 	FRESULT res;
4083:source\fatfs/ff.c **** 	DWORD remain, clst, sect;
4084:source\fatfs/ff.c **** 	UINT rcnt;
4085:source\fatfs/ff.c **** 	BYTE csect;
4086:source\fatfs/ff.c **** 
4087:source\fatfs/ff.c **** 
4088:source\fatfs/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
4089:source\fatfs/ff.c **** 
4090:source\fatfs/ff.c **** 	res = validate(fp);								/* Check validity of the object */
4091:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
4092:source\fatfs/ff.c **** 	if (fp->err)									/* Check error */
4093:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
4094:source\fatfs/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
4095:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
4096:source\fatfs/ff.c **** 
4097:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
4098:source\fatfs/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
4099:source\fatfs/ff.c **** 
4100:source\fatfs/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
4101:source\fatfs/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
4102:source\fatfs/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
4103:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
4104:source\fatfs/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
4105:source\fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
4106:source\fatfs/ff.c **** 					fp->sclust : get_fat(fp->fs, fp->clust);
4107:source\fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
4108:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
4109:source\fatfs/ff.c **** 				fp->clust = clst;					/* Update current cluster */
4110:source\fatfs/ff.c **** 			}
4111:source\fatfs/ff.c **** 		}
4112:source\fatfs/ff.c **** 		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
4113:source\fatfs/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
4114:source\fatfs/ff.c **** 		sect += csect;
4115:source\fatfs/ff.c **** 		if (move_window(fp->fs, sect) != FR_OK)		/* Move sector window */
4116:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
4117:source\fatfs/ff.c **** 		fp->dsect = sect;
4118:source\fatfs/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
4119:source\fatfs/ff.c **** 		if (rcnt > btf) rcnt = btf;
4120:source\fatfs/ff.c **** 		rcnt = (*func)(&fp->fs->win.d8[(WORD)fp->fptr % SS(fp->fs)], rcnt);
4121:source\fatfs/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
4122:source\fatfs/ff.c **** 	}
4123:source\fatfs/ff.c **** 
4124:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
4125:source\fatfs/ff.c **** }
4126:source\fatfs/ff.c **** #endif /* _USE_FORWARD */
4127:source\fatfs/ff.c **** 
4128:source\fatfs/ff.c **** 
4129:source\fatfs/ff.c **** 
4130:source\fatfs/ff.c **** #if _USE_MKFS && !_FS_READONLY
4131:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4132:source\fatfs/ff.c **** /* Create file system on the logical drive                               */
4133:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4134:source\fatfs/ff.c **** #define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
4135:source\fatfs/ff.c **** #define N_FATS		1		/* Number of FATs (1 or 2) */
4136:source\fatfs/ff.c **** 
4137:source\fatfs/ff.c **** 
4138:source\fatfs/ff.c **** FRESULT f_mkfs (
4139:source\fatfs/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4140:source\fatfs/ff.c **** 	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
4141:source\fatfs/ff.c **** 	UINT au				/* Size of allocation unit in unit of byte or sector */
4142:source\fatfs/ff.c **** )
4143:source\fatfs/ff.c **** {
4144:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
4145:source\fatfs/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
4146:source\fatfs/ff.c **** 	int vol;
4147:source\fatfs/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
4148:source\fatfs/ff.c **** 	DWORD n_clst, vs, n, wsect;
4149:source\fatfs/ff.c **** 	UINT i;
4150:source\fatfs/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
4151:source\fatfs/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
4152:source\fatfs/ff.c **** 	FATFS *fs;
4153:source\fatfs/ff.c **** 	DSTATUS stat;
4154:source\fatfs/ff.c **** #if _USE_TRIM
4155:source\fatfs/ff.c **** 	DWORD eb[2];
4156:source\fatfs/ff.c **** #endif
4157:source\fatfs/ff.c **** 
4158:source\fatfs/ff.c **** 
4159:source\fatfs/ff.c **** 	/* Check mounted drive and clear work area */
4160:source\fatfs/ff.c **** 	if (sfd > 1) return FR_INVALID_PARAMETER;
4161:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
4162:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
4163:source\fatfs/ff.c **** 	fs = FatFs[vol];
4164:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
4165:source\fatfs/ff.c **** 	fs->fs_type = 0;
4166:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
4167:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
4168:source\fatfs/ff.c **** 
4169:source\fatfs/ff.c **** 	/* Get disk statics */
4170:source\fatfs/ff.c **** 	stat = disk_initialize(pdrv);
4171:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4172:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4173:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
4174:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
4175:source\fatfs/ff.c **** 		return FR_DISK_ERR;
4176:source\fatfs/ff.c **** #endif
4177:source\fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
4178:source\fatfs/ff.c **** 		/* Get partition information from partition table in the MBR */
4179:source\fatfs/ff.c **** 		if (disk_read(pdrv, fs->win.d8, 0, 1) != RES_OK) return FR_DISK_ERR;
4180:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
4181:source\fatfs/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
4182:source\fatfs/ff.c **** 		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
4183:source\fatfs/ff.c **** 		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
4184:source\fatfs/ff.c **** 		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
4185:source\fatfs/ff.c **** 	} else {
4186:source\fatfs/ff.c **** 		/* Create a partition in this function */
4187:source\fatfs/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
4188:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4189:source\fatfs/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
4190:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
4191:source\fatfs/ff.c **** 	}
4192:source\fatfs/ff.c **** 
4193:source\fatfs/ff.c **** 	if (au & (au - 1)) au = 0;
4194:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
4195:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
4196:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
4197:source\fatfs/ff.c **** 		au = cst[i];
4198:source\fatfs/ff.c **** 	}
4199:source\fatfs/ff.c **** 	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
4200:source\fatfs/ff.c **** 	if (!au) au = 1;
4201:source\fatfs/ff.c **** 	if (au > 128) au = 128;
4202:source\fatfs/ff.c **** 
4203:source\fatfs/ff.c **** 	/* Pre-compute number of clusters and FAT sub-type */
4204:source\fatfs/ff.c **** 	n_clst = n_vol / au;
4205:source\fatfs/ff.c **** 	fmt = FS_FAT12;
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
4207:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
4208:source\fatfs/ff.c **** 
4209:source\fatfs/ff.c **** 	/* Determine offset and size of FAT structure */
4210:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4211:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
4212:source\fatfs/ff.c **** 		n_rsv = 32;
4213:source\fatfs/ff.c **** 		n_dir = 0;
4214:source\fatfs/ff.c **** 	} else {
4215:source\fatfs/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
4216:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
4217:source\fatfs/ff.c **** 		n_rsv = 1;
4218:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
4219:source\fatfs/ff.c **** 	}
4220:source\fatfs/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
4221:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
4222:source\fatfs/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
4223:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
4224:source\fatfs/ff.c **** 
4225:source\fatfs/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
4226:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
4227:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
4228:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
4229:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
4230:source\fatfs/ff.c **** 		n_rsv += n;
4231:source\fatfs/ff.c **** 		b_fat += n;
4232:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
4233:source\fatfs/ff.c **** 		n_fat += n;
4234:source\fatfs/ff.c **** 	}
4235:source\fatfs/ff.c **** 
4236:source\fatfs/ff.c **** 	/* Determine number of clusters and final check of validity of the FAT sub-type */
4237:source\fatfs/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
4238:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
4239:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
4240:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
4241:source\fatfs/ff.c **** 
4242:source\fatfs/ff.c **** 	/* Determine system ID in the partition table */
4243:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4244:source\fatfs/ff.c **** 		sys = 0x0C;		/* FAT32X */
4245:source\fatfs/ff.c **** 	} else {
4246:source\fatfs/ff.c **** 		if (fmt == FS_FAT12 && n_vol < 0x10000) {
4247:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
4248:source\fatfs/ff.c **** 		} else {
4249:source\fatfs/ff.c **** 			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
4250:source\fatfs/ff.c **** 		}
4251:source\fatfs/ff.c **** 	}
4252:source\fatfs/ff.c **** 
4253:source\fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
4254:source\fatfs/ff.c **** 		/* Update system ID in the partition table */
4255:source\fatfs/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
4256:source\fatfs/ff.c **** 		tbl[4] = sys;
4257:source\fatfs/ff.c **** 		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
4258:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4259:source\fatfs/ff.c **** 		md = 0xF8;
4260:source\fatfs/ff.c **** 	} else {
4261:source\fatfs/ff.c **** 		if (sfd) {	/* No partition table (SFD) */
4262:source\fatfs/ff.c **** 			md = 0xF0;
4263:source\fatfs/ff.c **** 		} else {	/* Create partition table (FDISK) */
4264:source\fatfs/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
4265:source\fatfs/ff.c **** 			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
4266:source\fatfs/ff.c **** 			tbl[1] = 1;						/* Partition start head */
4267:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
4268:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
4269:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
4270:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
4271:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
4272:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
4273:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
4275:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
4276:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
4277:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
4278:source\fatfs/ff.c **** 				return FR_DISK_ERR;
4279:source\fatfs/ff.c **** 			md = 0xF8;
4280:source\fatfs/ff.c **** 		}
4281:source\fatfs/ff.c **** 	}
4282:source\fatfs/ff.c **** 
4283:source\fatfs/ff.c **** 	/* Create BPB in the VBR */
4284:source\fatfs/ff.c **** 	tbl = fs->win.d8;							/* Clear sector */
4285:source\fatfs/ff.c **** 	mem_set(tbl, 0, SS(fs));
4286:source\fatfs/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
4287:source\fatfs/ff.c **** 	i = SS(fs);								/* Sector size */
4288:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_BytsPerSec, i);
4289:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
4290:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
4291:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
4292:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
4293:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
4294:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
4295:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
4296:source\fatfs/ff.c **** 	} else {
4297:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_TotSec32, n_vol);
4298:source\fatfs/ff.c **** 	}
4299:source\fatfs/ff.c **** 	tbl[BPB_Media] = md;					/* Media descriptor */
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
4301:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
4302:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
4303:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
4304:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
4307:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
4309:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
4310:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
4311:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
4312:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
4313:source\fatfs/ff.c **** 	} else {
4314:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
4315:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
4316:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
4317:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
4318:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
4319:source\fatfs/ff.c **** 	}
4320:source\fatfs/ff.c **** 	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
4321:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
4322:source\fatfs/ff.c **** 		return FR_DISK_ERR;
4323:source\fatfs/ff.c **** 	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
4324:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
4325:source\fatfs/ff.c **** 
4326:source\fatfs/ff.c **** 	/* Initialize FAT area */
4327:source\fatfs/ff.c **** 	wsect = b_fat;
4328:source\fatfs/ff.c **** 	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
4329:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
4330:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
4331:source\fatfs/ff.c **** 		if (fmt != FS_FAT32) {
4332:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
4333:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
4334:source\fatfs/ff.c **** 		} else {
4335:source\fatfs/ff.c **** 			n |= 0xFFFFFF00;
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
4338:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
4339:source\fatfs/ff.c **** 		}
4340:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4341:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4342:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
4343:source\fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
4344:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4345:source\fatfs/ff.c **** 				return FR_DISK_ERR;
4346:source\fatfs/ff.c **** 		}
4347:source\fatfs/ff.c **** 	}
4348:source\fatfs/ff.c **** 
4349:source\fatfs/ff.c **** 	/* Initialize root directory */
4350:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
4351:source\fatfs/ff.c **** 	do {
4352:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4353:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4354:source\fatfs/ff.c **** 	} while (--i);
4355:source\fatfs/ff.c **** 
4356:source\fatfs/ff.c **** #if _USE_TRIM	/* Erase data area if needed */
4357:source\fatfs/ff.c **** 	{
4358:source\fatfs/ff.c **** 		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
4359:source\fatfs/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, eb);
4360:source\fatfs/ff.c **** 	}
4361:source\fatfs/ff.c **** #endif
4362:source\fatfs/ff.c **** 
4363:source\fatfs/ff.c **** 	/* Create FSINFO if needed */
4364:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
4368:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
4369:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
4371:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
4372:source\fatfs/ff.c **** 	}
4373:source\fatfs/ff.c **** 
4374:source\fatfs/ff.c **** 	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
4375:source\fatfs/ff.c **** }
4376:source\fatfs/ff.c **** 
4377:source\fatfs/ff.c **** 
4378:source\fatfs/ff.c **** 
4379:source\fatfs/ff.c **** #if _MULTI_PARTITION
4380:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4381:source\fatfs/ff.c **** /* Create partition table on the physical drive                          */
4382:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4383:source\fatfs/ff.c **** 
4384:source\fatfs/ff.c **** FRESULT f_fdisk (
4385:source\fatfs/ff.c **** 	BYTE pdrv,			/* Physical drive number */
4386:source\fatfs/ff.c **** 	const DWORD szt[],	/* Pointer to the size table for each partitions */
4387:source\fatfs/ff.c **** 	void* work			/* Pointer to the working buffer */
4388:source\fatfs/ff.c **** )
4389:source\fatfs/ff.c **** {
4390:source\fatfs/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
4391:source\fatfs/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
4392:source\fatfs/ff.c **** 	DSTATUS stat;
4393:source\fatfs/ff.c **** 	DWORD sz_disk, sz_part, s_part;
4394:source\fatfs/ff.c **** 
4395:source\fatfs/ff.c **** 
4396:source\fatfs/ff.c **** 	stat = disk_initialize(pdrv);
4397:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4398:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4399:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
4400:source\fatfs/ff.c **** 
4401:source\fatfs/ff.c **** 	/* Determine CHS in the table regardless of the drive geometry */
4402:source\fatfs/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
4403:source\fatfs/ff.c **** 	if (n == 256) n--;
4404:source\fatfs/ff.c **** 	e_hd = n - 1;
4405:source\fatfs/ff.c **** 	sz_cyl = 63 * n;
4406:source\fatfs/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
4407:source\fatfs/ff.c **** 
4408:source\fatfs/ff.c **** 	/* Create partition table */
4409:source\fatfs/ff.c **** 	mem_set(buf, 0, _MAX_SS);
4410:source\fatfs/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
4411:source\fatfs/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
4412:source\fatfs/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
4413:source\fatfs/ff.c **** 		if (!p_cyl) continue;
4414:source\fatfs/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
4415:source\fatfs/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
4416:source\fatfs/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
4417:source\fatfs/ff.c **** 			s_hd = 1;
4418:source\fatfs/ff.c **** 			s_part += 63; sz_part -= 63;
4419:source\fatfs/ff.c **** 		} else {
4420:source\fatfs/ff.c **** 			s_hd = 0;
4421:source\fatfs/ff.c **** 		}
4422:source\fatfs/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
4423:source\fatfs/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
4424:source\fatfs/ff.c **** 
4425:source\fatfs/ff.c **** 		/* Set partition table */
4426:source\fatfs/ff.c **** 		p[1] = s_hd;						/* Start head */
4427:source\fatfs/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
4428:source\fatfs/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
4429:source\fatfs/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
4430:source\fatfs/ff.c **** 		p[5] = e_hd;						/* End head */
4431:source\fatfs/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
4432:source\fatfs/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
4433:source\fatfs/ff.c **** 		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
4434:source\fatfs/ff.c **** 		ST_DWORD(p + 12, sz_part);			/* Partition size */
4435:source\fatfs/ff.c **** 
4436:source\fatfs/ff.c **** 		/* Next partition */
4437:source\fatfs/ff.c **** 		b_cyl += p_cyl;
4438:source\fatfs/ff.c **** 	}
4439:source\fatfs/ff.c **** 	ST_WORD(p, 0xAA55);
4440:source\fatfs/ff.c **** 
4441:source\fatfs/ff.c **** 	/* Write it to the MBR */
4442:source\fatfs/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
4443:source\fatfs/ff.c **** }
4444:source\fatfs/ff.c **** 
4445:source\fatfs/ff.c **** 
4446:source\fatfs/ff.c **** #endif /* _MULTI_PARTITION */
4447:source\fatfs/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
4448:source\fatfs/ff.c **** 
4449:source\fatfs/ff.c **** 
4450:source\fatfs/ff.c **** 
4451:source\fatfs/ff.c **** 
4452:source\fatfs/ff.c **** #if _USE_STRFUNC
4453:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4454:source\fatfs/ff.c **** /* Get a string from the file                                            */
4455:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4456:source\fatfs/ff.c **** 
4457:source\fatfs/ff.c **** TCHAR* f_gets (
4458:source\fatfs/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
4459:source\fatfs/ff.c **** 	int len,		/* Size of string buffer (characters) */
4460:source\fatfs/ff.c **** 	FIL* fp			/* Pointer to the file object */
4461:source\fatfs/ff.c **** )
4462:source\fatfs/ff.c **** {
4463:source\fatfs/ff.c **** 	int n = 0;
4464:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
4465:source\fatfs/ff.c **** 	BYTE s[2];
4466:source\fatfs/ff.c **** 	UINT rc;
4467:source\fatfs/ff.c **** 
4468:source\fatfs/ff.c **** 
4469:source\fatfs/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
4470:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4471:source\fatfs/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
4472:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4473:source\fatfs/ff.c **** 		if (rc != 1) break;
4474:source\fatfs/ff.c **** 		c = s[0];
4475:source\fatfs/ff.c **** 		if (c >= 0x80) {
4476:source\fatfs/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
4477:source\fatfs/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence */
4478:source\fatfs/ff.c **** 				f_read(fp, s, 1, &rc);
4479:source\fatfs/ff.c **** 				if (rc != 1) break;
4480:source\fatfs/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
4481:source\fatfs/ff.c **** 				if (c < 0x80) c = '?';
4482:source\fatfs/ff.c **** 			} else {
4483:source\fatfs/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence */
4484:source\fatfs/ff.c **** 					f_read(fp, s, 2, &rc);
4485:source\fatfs/ff.c **** 					if (rc != 2) break;
4486:source\fatfs/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
4487:source\fatfs/ff.c **** 					if (c < 0x800) c = '?';
4488:source\fatfs/ff.c **** 				} else {			/* Reject four-byte sequence */
4489:source\fatfs/ff.c **** 					c = '?';
4490:source\fatfs/ff.c **** 				}
4491:source\fatfs/ff.c **** 			}
4492:source\fatfs/ff.c **** 		}
4493:source\fatfs/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
4494:source\fatfs/ff.c **** 		f_read(fp, s, 2, &rc);
4495:source\fatfs/ff.c **** 		if (rc != 2) break;
4496:source\fatfs/ff.c **** 		c = s[1] + (s[0] << 8);
4497:source\fatfs/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
4498:source\fatfs/ff.c **** 		f_read(fp, s, 2, &rc);
4499:source\fatfs/ff.c **** 		if (rc != 2) break;
4500:source\fatfs/ff.c **** 		c = s[0] + (s[1] << 8);
4501:source\fatfs/ff.c **** #else						/* Read a character in ANSI/OEM */
4502:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4503:source\fatfs/ff.c **** 		if (rc != 1) break;
4504:source\fatfs/ff.c **** 		c = s[0];
4505:source\fatfs/ff.c **** 		if (IsDBCS1(c)) {
4506:source\fatfs/ff.c **** 			f_read(fp, s, 1, &rc);
4507:source\fatfs/ff.c **** 			if (rc != 1) break;
4508:source\fatfs/ff.c **** 			c = (c << 8) + s[0];
4509:source\fatfs/ff.c **** 		}
4510:source\fatfs/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
4511:source\fatfs/ff.c **** 		if (!c) c = '?';
4512:source\fatfs/ff.c **** #endif
4513:source\fatfs/ff.c **** #else						/* Read a character without conversion */
4514:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4515:source\fatfs/ff.c **** 		if (rc != 1) break;
4516:source\fatfs/ff.c **** 		c = s[0];
4517:source\fatfs/ff.c **** #endif
4518:source\fatfs/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
4519:source\fatfs/ff.c **** 		*p++ = c;
4520:source\fatfs/ff.c **** 		n++;
4521:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
4522:source\fatfs/ff.c **** 	}
4523:source\fatfs/ff.c **** 	*p = 0;
4524:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
4525:source\fatfs/ff.c **** }
4526:source\fatfs/ff.c **** 
4527:source\fatfs/ff.c **** 
4528:source\fatfs/ff.c **** 
4529:source\fatfs/ff.c **** 
4530:source\fatfs/ff.c **** #if !_FS_READONLY
4531:source\fatfs/ff.c **** #include <stdarg.h>
4532:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4533:source\fatfs/ff.c **** /* Put a character to the file                                           */
4534:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4535:source\fatfs/ff.c **** 
4536:source\fatfs/ff.c **** typedef struct {
4537:source\fatfs/ff.c **** 	FIL* fp;
4538:source\fatfs/ff.c **** 	int idx, nchr;
4539:source\fatfs/ff.c **** 	BYTE buf[64];
4540:source\fatfs/ff.c **** } putbuff;
4541:source\fatfs/ff.c **** 
4542:source\fatfs/ff.c **** 
4543:source\fatfs/ff.c **** static
4544:source\fatfs/ff.c **** void putc_bfd (
4545:source\fatfs/ff.c **** 	putbuff* pb,
4546:source\fatfs/ff.c **** 	TCHAR c
4547:source\fatfs/ff.c **** )
4548:source\fatfs/ff.c **** {
 6882              		.loc 1 4548 1 is_stmt 1 view -0
 6883              		.cfi_startproc
 6884              		@ args = 0, pretend = 0, frame = 8
 6885              		@ frame_needed = 0, uses_anonymous_args = 0
4549:source\fatfs/ff.c **** 	UINT bw;
 6886              		.loc 1 4549 2 view .LVU2481
4550:source\fatfs/ff.c **** 	int i;
 6887              		.loc 1 4550 2 view .LVU2482
4551:source\fatfs/ff.c **** 
4552:source\fatfs/ff.c **** 
4553:source\fatfs/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 6888              		.loc 1 4553 2 view .LVU2483
 6889              		.loc 1 4553 5 is_stmt 0 view .LVU2484
 6890 0000 0A29     		cmp	r1, #10
4548:source\fatfs/ff.c **** 	UINT bw;
 6891              		.loc 1 4548 1 view .LVU2485
 6892 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 6893              		.cfi_def_cfa_offset 24
 6894              		.cfi_offset 4, -16
 6895              		.cfi_offset 5, -12
 6896              		.cfi_offset 6, -8
 6897              		.cfi_offset 14, -4
4548:source\fatfs/ff.c **** 	UINT bw;
 6898              		.loc 1 4548 1 view .LVU2486
 6899 0004 0446     		mov	r4, r0
 6900 0006 0E46     		mov	r6, r1
 6901              		.loc 1 4553 5 view .LVU2487
 6902 0008 02D1     		bne	.L738
4554:source\fatfs/ff.c **** 		putc_bfd(pb, '\r');
 6903              		.loc 1 4554 3 is_stmt 1 view .LVU2488
 6904 000a 0D21     		movs	r1, #13
 6905              	.LVL769:
 6906              		.loc 1 4554 3 is_stmt 0 view .LVU2489
 6907 000c FFF7F8FF 		bl	putc_bfd
 6908              	.LVL770:
 6909              	.L738:
4555:source\fatfs/ff.c **** 
4556:source\fatfs/ff.c **** 	i = pb->idx;	/* Buffer write index (-1:error) */
 6910              		.loc 1 4556 2 is_stmt 1 view .LVU2490
 6911              		.loc 1 4556 4 is_stmt 0 view .LVU2491
 6912 0010 6368     		ldr	r3, [r4, #4]
 6913              	.LVL771:
4557:source\fatfs/ff.c **** 	if (i < 0) return;
 6914              		.loc 1 4557 2 is_stmt 1 view .LVU2492
 6915              		.loc 1 4557 5 is_stmt 0 view .LVU2493
 6916 0012 002B     		cmp	r3, #0
 6917 0014 14DB     		blt	.L737
4558:source\fatfs/ff.c **** 
4559:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4560:source\fatfs/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
4561:source\fatfs/ff.c **** 	if (c < 0x80) {				/* 7-bit */
4562:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)c;
4563:source\fatfs/ff.c **** 	} else {
4564:source\fatfs/ff.c **** 		if (c < 0x800) {		/* 11-bit */
4565:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
4566:source\fatfs/ff.c **** 		} else {				/* 16-bit */
4567:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
4568:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
4569:source\fatfs/ff.c **** 		}
4570:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
4571:source\fatfs/ff.c **** 	}
4572:source\fatfs/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
4573:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4574:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4575:source\fatfs/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
4576:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4577:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4578:source\fatfs/ff.c **** #else							/* Write a character in ANSI/OEM */
4579:source\fatfs/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
4580:source\fatfs/ff.c **** 	if (!c) c = '?';
4581:source\fatfs/ff.c **** 	if (c >= 0x100)
4582:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
4583:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4584:source\fatfs/ff.c **** #endif
4585:source\fatfs/ff.c **** #else							/* Write a character without conversion */
4586:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
 6918              		.loc 1 4586 2 is_stmt 1 view .LVU2494
 6919              		.loc 1 4586 11 is_stmt 0 view .LVU2495
 6920 0016 5D1C     		adds	r5, r3, #1
 6921              	.LVL772:
 6922              		.loc 1 4586 15 view .LVU2496
 6923 0018 2344     		add	r3, r3, r4
4587:source\fatfs/ff.c **** #endif
4588:source\fatfs/ff.c **** 
4589:source\fatfs/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 6924              		.loc 1 4589 5 view .LVU2497
 6925 001a 3C2D     		cmp	r5, #60
4586:source\fatfs/ff.c **** #endif
 6926              		.loc 1 4586 15 view .LVU2498
 6927 001c 1E73     		strb	r6, [r3, #12]
 6928              		.loc 1 4589 2 is_stmt 1 view .LVU2499
 6929              		.loc 1 4589 5 is_stmt 0 view .LVU2500
 6930 001e 0BDD     		ble	.L741
4590:source\fatfs/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 6931              		.loc 1 4590 3 is_stmt 1 view .LVU2501
 6932 0020 01AB     		add	r3, sp, #4
 6933 0022 2A46     		mov	r2, r5
 6934 0024 2068     		ldr	r0, [r4]
 6935 0026 04F10C01 		add	r1, r4, #12
 6936 002a FFF7FEFF 		bl	f_write
 6937              	.LVL773:
4591:source\fatfs/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 6938              		.loc 1 4591 3 view .LVU2502
 6939              		.loc 1 4591 27 is_stmt 0 view .LVU2503
 6940 002e 019B     		ldr	r3, [sp, #4]
 6941 0030 5D1B     		subs	r5, r3, r5
 6942              	.LVL774:
 6943              		.loc 1 4591 27 view .LVU2504
 6944 0032 18BF     		it	ne
 6945 0034 4FF0FF35 		movne	r5, #-1
 6946              	.L741:
 6947              	.LVL775:
4592:source\fatfs/ff.c **** 	}
4593:source\fatfs/ff.c **** 	pb->idx = i;
 6948              		.loc 1 4593 2 is_stmt 1 view .LVU2505
4594:source\fatfs/ff.c **** 	pb->nchr++;
 6949              		.loc 1 4594 10 is_stmt 0 view .LVU2506
 6950 0038 A368     		ldr	r3, [r4, #8]
4593:source\fatfs/ff.c **** 	pb->nchr++;
 6951              		.loc 1 4593 10 view .LVU2507
 6952 003a 6560     		str	r5, [r4, #4]
 6953              		.loc 1 4594 2 is_stmt 1 view .LVU2508
 6954              		.loc 1 4594 10 is_stmt 0 view .LVU2509
 6955 003c 0133     		adds	r3, r3, #1
 6956 003e A360     		str	r3, [r4, #8]
 6957              	.LVL776:
 6958              	.L737:
4595:source\fatfs/ff.c **** }
 6959              		.loc 1 4595 1 view .LVU2510
 6960 0040 02B0     		add	sp, sp, #8
 6961              		.cfi_def_cfa_offset 16
 6962              		@ sp needed
 6963 0042 70BD     		pop	{r4, r5, r6, pc}
 6964              		.loc 1 4595 1 view .LVU2511
 6965              		.cfi_endproc
 6966              	.LFE189:
 6968              		.section	.text.f_sync,"ax",%progbits
 6969              		.align	1
 6970              		.global	f_sync
 6971              		.syntax unified
 6972              		.thumb
 6973              		.thumb_func
 6975              	f_sync:
 6976              	.LVL777:
 6977              	.LFB173:
2884:source\fatfs/ff.c **** 	FRESULT res;
 6978              		.loc 1 2884 1 is_stmt 1 view -0
 6979              		.cfi_startproc
 6980              		@ args = 0, pretend = 0, frame = 0
 6981              		@ frame_needed = 0, uses_anonymous_args = 0
2885:source\fatfs/ff.c **** 	DWORD tm;
 6982              		.loc 1 2885 2 view .LVU2513
2886:source\fatfs/ff.c **** 	BYTE *dir;
 6983              		.loc 1 2886 2 view .LVU2514
2887:source\fatfs/ff.c **** 
 6984              		.loc 1 2887 2 view .LVU2515
2890:source\fatfs/ff.c **** 	if (res == FR_OK) {
 6985              		.loc 1 2890 2 view .LVU2516
2884:source\fatfs/ff.c **** 	FRESULT res;
 6986              		.loc 1 2884 1 is_stmt 0 view .LVU2517
 6987 0000 70B5     		push	{r4, r5, r6, lr}
 6988              		.cfi_def_cfa_offset 16
 6989              		.cfi_offset 4, -16
 6990              		.cfi_offset 5, -12
 6991              		.cfi_offset 6, -8
 6992              		.cfi_offset 14, -4
2884:source\fatfs/ff.c **** 	FRESULT res;
 6993              		.loc 1 2884 1 view .LVU2518
 6994 0002 0446     		mov	r4, r0
2890:source\fatfs/ff.c **** 	if (res == FR_OK) {
 6995              		.loc 1 2890 8 view .LVU2519
 6996 0004 FFF7FEFF 		bl	validate
 6997              	.LVL778:
2891:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 6998              		.loc 1 2891 2 is_stmt 1 view .LVU2520
2891:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 6999              		.loc 1 2891 5 is_stmt 0 view .LVU2521
 7000 0008 0028     		cmp	r0, #0
 7001 000a 59D1     		bne	.L743
 7002              	.LVL779:
 7003              	.LBB135:
 7004              	.LBI135:
2881:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
 7005              		.loc 1 2881 9 is_stmt 1 view .LVU2522
 7006              	.LBB136:
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7007              		.loc 1 2892 3 view .LVU2523
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7008              		.loc 1 2892 9 is_stmt 0 view .LVU2524
 7009 000c 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7010              		.loc 1 2892 6 view .LVU2525
 7011 0010 13F02000 		ands	r0, r3, #32
 7012              	.LVL780:
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7013              		.loc 1 2892 6 view .LVU2526
 7014 0014 54D0     		beq	.L743
2895:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7015              		.loc 1 2895 4 is_stmt 1 view .LVU2527
2895:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7016              		.loc 1 2895 7 is_stmt 0 view .LVU2528
 7017 0016 5B06     		lsls	r3, r3, #25
 7018 0018 11D5     		bpl	.L744
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7019              		.loc 1 2896 5 is_stmt 1 view .LVU2529
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7020              		.loc 1 2896 9 is_stmt 0 view .LVU2530
 7021 001a D4F80002 		ldr	r0, [r4, #512]
 7022 001e D4F81822 		ldr	r2, [r4, #536]
 7023 0022 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7024 0026 0123     		movs	r3, #1
 7025 0028 2146     		mov	r1, r4
 7026 002a FFF7FEFF 		bl	disk_write
 7027              	.LVL781:
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7028              		.loc 1 2896 8 view .LVU2531
 7029 002e 0028     		cmp	r0, #0
 7030 0030 45D1     		bne	.L745
2898:source\fatfs/ff.c **** 			}
 7031              		.loc 1 2898 5 is_stmt 1 view .LVU2532
2898:source\fatfs/ff.c **** 			}
 7032              		.loc 1 2898 14 is_stmt 0 view .LVU2533
 7033 0032 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7034 0036 23F04003 		bic	r3, r3, #64
 7035 003a 84F80632 		strb	r3, [r4, #518]
 7036              	.L744:
2902:source\fatfs/ff.c **** 			if (res == FR_OK) {
 7037              		.loc 1 2902 4 is_stmt 1 view .LVU2534
2902:source\fatfs/ff.c **** 			if (res == FR_OK) {
 7038              		.loc 1 2902 10 is_stmt 0 view .LVU2535
 7039 003e D4F81C12 		ldr	r1, [r4, #540]
 7040 0042 D4F80002 		ldr	r0, [r4, #512]
 7041 0046 FFF7FEFF 		bl	move_window
 7042              	.LVL782:
 7043 004a 0646     		mov	r6, r0
 7044              	.LVL783:
2903:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
 7045              		.loc 1 2903 4 is_stmt 1 view .LVU2536
2903:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
 7046              		.loc 1 2903 7 is_stmt 0 view .LVU2537
 7047 004c C0BB     		cbnz	r0, .L743
2904:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 7048              		.loc 1 2904 5 is_stmt 1 view .LVU2538
2904:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 7049              		.loc 1 2904 9 is_stmt 0 view .LVU2539
 7050 004e D4F82052 		ldr	r5, [r4, #544]
 7051              	.LVL784:
2905:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 7052              		.loc 1 2905 5 is_stmt 1 view .LVU2540
2905:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 7053              		.loc 1 2905 19 is_stmt 0 view .LVU2541
 7054 0052 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 7055 0054 43F02003 		orr	r3, r3, #32
 7056 0058 EB72     		strb	r3, [r5, #11]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7057              		.loc 1 2906 5 is_stmt 1 view .LVU2542
 7058 005a D4F80C32 		ldr	r3, [r4, #524]
 7059 005e 2B77     		strb	r3, [r5, #28]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7060              		.loc 1 2906 5 view .LVU2543
 7061 0060 B4F80C32 		ldrh	r3, [r4, #524]
 7062 0064 1B0A     		lsrs	r3, r3, #8
 7063 0066 6B77     		strb	r3, [r5, #29]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7064              		.loc 1 2906 5 view .LVU2544
 7065 0068 B4F80E32 		ldrh	r3, [r4, #526]
 7066 006c AB77     		strb	r3, [r5, #30]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7067              		.loc 1 2906 5 view .LVU2545
 7068 006e 94F80F32 		ldrb	r3, [r4, #527]	@ zero_extendqisi2
 7069 0072 EB77     		strb	r3, [r5, #31]
2907:source\fatfs/ff.c **** 				tm = GET_FATTIME();							/* Update updated time */
 7070              		.loc 1 2907 5 view .LVU2546
 7071 0074 D4F81032 		ldr	r3, [r4, #528]
 7072              	.LVL785:
 7073              	.LBB137:
 7074              	.LBI137:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 7075              		.loc 1 1325 6 view .LVU2547
 7076              	.LBB138:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7077              		.loc 1 1330 2 view .LVU2548
 7078 0078 AB76     		strb	r3, [r5, #26]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7079              		.loc 1 1330 2 view .LVU2549
 7080 007a C3F30722 		ubfx	r2, r3, #8, #8
1331:source\fatfs/ff.c **** }
 7081              		.loc 1 1331 2 is_stmt 0 view .LVU2550
 7082 007e 1B0C     		lsrs	r3, r3, #16
 7083              	.LVL786:
1331:source\fatfs/ff.c **** }
 7084              		.loc 1 1331 2 view .LVU2551
 7085 0080 2B75     		strb	r3, [r5, #20]
 7086 0082 1B0A     		lsrs	r3, r3, #8
 7087 0084 6B75     		strb	r3, [r5, #21]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7088              		.loc 1 1330 2 view .LVU2552
 7089 0086 EA76     		strb	r2, [r5, #27]
1331:source\fatfs/ff.c **** }
 7090              		.loc 1 1331 2 is_stmt 1 view .LVU2553
1331:source\fatfs/ff.c **** }
 7091              		.loc 1 1331 2 view .LVU2554
 7092              	.LVL787:
1331:source\fatfs/ff.c **** }
 7093              		.loc 1 1331 2 is_stmt 0 view .LVU2555
 7094              	.LBE138:
 7095              	.LBE137:
2908:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 7096              		.loc 1 2908 5 is_stmt 1 view .LVU2556
2908:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 7097              		.loc 1 2908 10 is_stmt 0 view .LVU2557
 7098 0088 FFF7FEFF 		bl	get_fattime
 7099              	.LVL788:
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7100              		.loc 1 2909 5 is_stmt 1 view .LVU2558
 7101 008c C0F30723 		ubfx	r3, r0, #8, #8
 7102 0090 EB75     		strb	r3, [r5, #23]
 7103 0092 030C     		lsrs	r3, r0, #16
 7104 0094 2B76     		strb	r3, [r5, #24]
 7105 0096 030E     		lsrs	r3, r0, #24
 7106 0098 A875     		strb	r0, [r5, #22]
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7107              		.loc 1 2909 5 view .LVU2559
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7108              		.loc 1 2909 5 view .LVU2560
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7109              		.loc 1 2909 5 view .LVU2561
 7110 009a 6B76     		strb	r3, [r5, #25]
2910:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 7111              		.loc 1 2910 5 view .LVU2562
 7112 009c AE74     		strb	r6, [r5, #18]
2910:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 7113              		.loc 1 2910 5 view .LVU2563
 7114 009e EE74     		strb	r6, [r5, #19]
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7115              		.loc 1 2911 5 view .LVU2564
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7116              		.loc 1 2911 14 is_stmt 0 view .LVU2565
 7117 00a0 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7118              		.loc 1 2912 7 view .LVU2566
 7119 00a4 D4F80002 		ldr	r0, [r4, #512]
 7120              	.LVL789:
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7121              		.loc 1 2911 14 view .LVU2567
 7122 00a8 23F02003 		bic	r3, r3, #32
 7123 00ac 84F80632 		strb	r3, [r4, #518]
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7124              		.loc 1 2912 5 is_stmt 1 view .LVU2568
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7125              		.loc 1 2912 19 is_stmt 0 view .LVU2569
 7126 00b0 0123     		movs	r3, #1
 7127 00b2 80F80432 		strb	r3, [r0, #516]
2913:source\fatfs/ff.c **** 			}
 7128              		.loc 1 2913 5 is_stmt 1 view .LVU2570
 7129              	.LBE136:
 7130              	.LBE135:
2919:source\fatfs/ff.c **** 
 7131              		.loc 1 2919 1 is_stmt 0 view .LVU2571
 7132 00b6 BDE87040 		pop	{r4, r5, r6, lr}
 7133              		.cfi_remember_state
 7134              		.cfi_restore 14
 7135              		.cfi_restore 6
 7136              		.cfi_restore 5
 7137              		.cfi_restore 4
 7138              		.cfi_def_cfa_offset 0
 7139              	.LVL790:
 7140              	.LBB140:
 7141              	.LBB139:
2913:source\fatfs/ff.c **** 			}
 7142              		.loc 1 2913 11 view .LVU2572
 7143 00ba FFF7FEBF 		b	sync_fs
 7144              	.LVL791:
 7145              	.L745:
 7146              		.cfi_restore_state
2897:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7147              		.loc 1 2897 6 view .LVU2573
 7148 00be 0120     		movs	r0, #1
 7149              	.LVL792:
 7150              	.L743:
2897:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7151              		.loc 1 2897 6 view .LVU2574
 7152              	.LBE139:
 7153              	.LBE140:
2919:source\fatfs/ff.c **** 
 7154              		.loc 1 2919 1 view .LVU2575
 7155 00c0 70BD     		pop	{r4, r5, r6, pc}
2919:source\fatfs/ff.c **** 
 7156              		.loc 1 2919 1 view .LVU2576
 7157              		.cfi_endproc
 7158              	.LFE173:
 7160              		.section	.text.f_close,"ax",%progbits
 7161              		.align	1
 7162              		.global	f_close
 7163              		.syntax unified
 7164              		.thumb
 7165              		.thumb_func
 7167              	f_close:
 7168              	.LVL793:
 7169              	.LFB174:
2933:source\fatfs/ff.c **** 	FRESULT res;
 7170              		.loc 1 2933 1 is_stmt 1 view -0
 7171              		.cfi_startproc
 7172              		@ args = 0, pretend = 0, frame = 0
 7173              		@ frame_needed = 0, uses_anonymous_args = 0
2934:source\fatfs/ff.c **** 
 7174              		.loc 1 2934 2 view .LVU2578
2938:source\fatfs/ff.c **** 	if (res == FR_OK)
 7175              		.loc 1 2938 2 view .LVU2579
2933:source\fatfs/ff.c **** 	FRESULT res;
 7176              		.loc 1 2933 1 is_stmt 0 view .LVU2580
 7177 0000 10B5     		push	{r4, lr}
 7178              		.cfi_def_cfa_offset 8
 7179              		.cfi_offset 4, -8
 7180              		.cfi_offset 14, -4
2933:source\fatfs/ff.c **** 	FRESULT res;
 7181              		.loc 1 2933 1 view .LVU2581
 7182 0002 0446     		mov	r4, r0
2938:source\fatfs/ff.c **** 	if (res == FR_OK)
 7183              		.loc 1 2938 8 view .LVU2582
 7184 0004 FFF7FEFF 		bl	f_sync
 7185              	.LVL794:
2939:source\fatfs/ff.c **** #endif
 7186              		.loc 1 2939 2 is_stmt 1 view .LVU2583
2939:source\fatfs/ff.c **** #endif
 7187              		.loc 1 2939 5 is_stmt 0 view .LVU2584
 7188 0008 50B9     		cbnz	r0, .L753
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7189              		.loc 1 2942 3 is_stmt 1 view .LVU2585
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7190              		.loc 1 2942 9 is_stmt 0 view .LVU2586
 7191 000a 2046     		mov	r0, r4
 7192              	.LVL795:
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7193              		.loc 1 2942 9 view .LVU2587
 7194 000c FFF7FEFF 		bl	validate
 7195              	.LVL796:
2943:source\fatfs/ff.c **** #if _FS_REENTRANT
 7196              		.loc 1 2943 3 is_stmt 1 view .LVU2588
2943:source\fatfs/ff.c **** #if _FS_REENTRANT
 7197              		.loc 1 2943 6 is_stmt 0 view .LVU2589
 7198 0010 30B9     		cbnz	r0, .L753
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7199              		.loc 1 2948 4 is_stmt 1 view .LVU2590
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7200              		.loc 1 2948 10 is_stmt 0 view .LVU2591
 7201 0012 D4F82802 		ldr	r0, [r4, #552]
 7202              	.LVL797:
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7203              		.loc 1 2948 10 view .LVU2592
 7204 0016 FFF7FEFF 		bl	dec_lock
 7205              	.LVL798:
2949:source\fatfs/ff.c **** #endif
 7206              		.loc 1 2949 4 is_stmt 1 view .LVU2593
2949:source\fatfs/ff.c **** #endif
 7207              		.loc 1 2949 7 is_stmt 0 view .LVU2594
 7208 001a 08B9     		cbnz	r0, .L753
2951:source\fatfs/ff.c **** #if _FS_REENTRANT
 7209              		.loc 1 2951 5 is_stmt 1 view .LVU2595
2951:source\fatfs/ff.c **** #if _FS_REENTRANT
 7210              		.loc 1 2951 12 is_stmt 0 view .LVU2596
 7211 001c C4F80002 		str	r0, [r4, #512]
 7212              	.L753:
2957:source\fatfs/ff.c **** }
 7213              		.loc 1 2957 2 is_stmt 1 view .LVU2597
2958:source\fatfs/ff.c **** 
 7214              		.loc 1 2958 1 is_stmt 0 view .LVU2598
 7215 0020 10BD     		pop	{r4, pc}
2958:source\fatfs/ff.c **** 
 7216              		.loc 1 2958 1 view .LVU2599
 7217              		.cfi_endproc
 7218              	.LFE174:
 7220              		.section	.text.f_lseek,"ax",%progbits
 7221              		.align	1
 7222              		.global	f_lseek
 7223              		.syntax unified
 7224              		.thumb
 7225              		.thumb_func
 7227              	f_lseek:
 7228              	.LVL799:
 7229              	.LFB175:
3106:source\fatfs/ff.c **** 	FRESULT res;
 7230              		.loc 1 3106 1 is_stmt 1 view -0
 7231              		.cfi_startproc
 7232              		@ args = 0, pretend = 0, frame = 0
 7233              		@ frame_needed = 0, uses_anonymous_args = 0
3107:source\fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
 7234              		.loc 1 3107 2 view .LVU2601
3108:source\fatfs/ff.c **** #if _USE_FASTSEEK
 7235              		.loc 1 3108 2 view .LVU2602
3110:source\fatfs/ff.c **** #endif
 7236              		.loc 1 3110 2 view .LVU2603
3114:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 7237              		.loc 1 3114 2 view .LVU2604
3106:source\fatfs/ff.c **** 	FRESULT res;
 7238              		.loc 1 3106 1 is_stmt 0 view .LVU2605
 7239 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7240              		.cfi_def_cfa_offset 40
 7241              		.cfi_offset 3, -40
 7242              		.cfi_offset 4, -36
 7243              		.cfi_offset 5, -32
 7244              		.cfi_offset 6, -28
 7245              		.cfi_offset 7, -24
 7246              		.cfi_offset 8, -20
 7247              		.cfi_offset 9, -16
 7248              		.cfi_offset 10, -12
 7249              		.cfi_offset 11, -8
 7250              		.cfi_offset 14, -4
3106:source\fatfs/ff.c **** 	FRESULT res;
 7251              		.loc 1 3106 1 view .LVU2606
 7252 0004 0446     		mov	r4, r0
 7253 0006 0E46     		mov	r6, r1
3114:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 7254              		.loc 1 3114 8 view .LVU2607
 7255 0008 FFF7FEFF 		bl	validate
 7256              	.LVL800:
3115:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
 7257              		.loc 1 3115 2 is_stmt 1 view .LVU2608
3115:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
 7258              		.loc 1 3115 5 is_stmt 0 view .LVU2609
 7259 000c 0546     		mov	r5, r0
 7260 000e 10BB     		cbnz	r0, .L755
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7261              		.loc 1 3116 2 is_stmt 1 view .LVU2610
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7262              		.loc 1 3116 8 is_stmt 0 view .LVU2611
 7263 0010 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7264              		.loc 1 3116 5 view .LVU2612
 7265 0014 FDB9     		cbnz	r5, .L755
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7266              		.loc 1 3120 2 is_stmt 1 view .LVU2613
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7267              		.loc 1 3120 8 is_stmt 0 view .LVU2614
 7268 0016 D4F82432 		ldr	r3, [r4, #548]
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7269              		.loc 1 3120 5 view .LVU2615
 7270 001a 002B     		cmp	r3, #0
 7271 001c 00F08780 		beq	.L756
3121:source\fatfs/ff.c **** 			tbl = fp->cltbl;
 7272              		.loc 1 3121 3 is_stmt 1 view .LVU2616
3121:source\fatfs/ff.c **** 			tbl = fp->cltbl;
 7273              		.loc 1 3121 6 is_stmt 0 view .LVU2617
 7274 0020 721C     		adds	r2, r6, #1
 7275 0022 3DD1     		bne	.L757
3122:source\fatfs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 7276              		.loc 1 3122 4 is_stmt 1 view .LVU2618
 7277              	.LVL801:
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7278              		.loc 1 3123 4 view .LVU2619
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7279              		.loc 1 3123 15 is_stmt 0 view .LVU2620
 7280 0024 1E46     		mov	r6, r3
 7281              	.LVL802:
3124:source\fatfs/ff.c **** 			if (cl) {
 7282              		.loc 1 3124 7 view .LVU2621
 7283 0026 D4F81082 		ldr	r8, [r4, #528]
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7284              		.loc 1 3123 9 view .LVU2622
 7285 002a 56F804BB 		ldr	fp, [r6], #4
 7286              	.LVL803:
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7287              		.loc 1 3123 19 is_stmt 1 view .LVU2623
3124:source\fatfs/ff.c **** 			if (cl) {
 7288              		.loc 1 3124 4 view .LVU2624
3125:source\fatfs/ff.c **** 				do {
 7289              		.loc 1 3125 4 view .LVU2625
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7290              		.loc 1 3123 24 is_stmt 0 view .LVU2626
 7291 002e 0227     		movs	r7, #2
3125:source\fatfs/ff.c **** 				do {
 7292              		.loc 1 3125 7 view .LVU2627
 7293 0030 B8F1000F 		cmp	r8, #0
 7294 0034 2BD0     		beq	.L758
 7295              	.LVL804:
 7296              	.L763:
3126:source\fatfs/ff.c **** 					/* Get a fragment */
 7297              		.loc 1 3126 5 is_stmt 1 view .LVU2628
3128:source\fatfs/ff.c **** 					do {
 7298              		.loc 1 3128 6 view .LVU2629
3128:source\fatfs/ff.c **** 					do {
 7299              		.loc 1 3128 16 view .LVU2630
3128:source\fatfs/ff.c **** 					do {
 7300              		.loc 1 3128 25 view .LVU2631
3128:source\fatfs/ff.c **** 					do {
 7301              		.loc 1 3128 25 is_stmt 0 view .LVU2632
 7302 0036 4046     		mov	r0, r8
3128:source\fatfs/ff.c **** 					do {
 7303              		.loc 1 3128 20 view .LVU2633
 7304 0038 4FF0000A 		mov	r10, #0
 7305              	.LVL805:
 7306              	.L761:
3129:source\fatfs/ff.c **** 						pcl = cl; ncl++;
 7307              		.loc 1 3129 6 is_stmt 1 view .LVU2634
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7308              		.loc 1 3130 7 view .LVU2635
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7309              		.loc 1 3130 17 view .LVU2636
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7310              		.loc 1 3131 12 is_stmt 0 view .LVU2637
 7311 003c 0146     		mov	r1, r0
 7312 003e 8146     		mov	r9, r0
 7313 0040 D4F80002 		ldr	r0, [r4, #512]
 7314              	.LVL806:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7315              		.loc 1 3131 12 view .LVU2638
 7316 0044 FFF7FEFF 		bl	get_fat
 7317              	.LVL807:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7318              		.loc 1 3132 10 view .LVU2639
 7319 0048 0128     		cmp	r0, #1
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7320              		.loc 1 3130 20 view .LVU2640
 7321 004a 0AF1010A 		add	r10, r10, #1
 7322              	.LVL808:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7323              		.loc 1 3131 7 is_stmt 1 view .LVU2641
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7324              		.loc 1 3132 7 view .LVU2642
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7325              		.loc 1 3132 10 is_stmt 0 view .LVU2643
 7326 004e 07D8     		bhi	.L759
 7327              	.LVL809:
 7328              	.L765:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7329              		.loc 1 3132 20 is_stmt 1 discriminator 1 view .LVU2644
 7330 0050 0225     		movs	r5, #2
 7331              	.L822:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7332              		.loc 1 3133 29 is_stmt 0 discriminator 1 view .LVU2645
 7333 0052 84F80752 		strb	r5, [r4, #519]
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7334              		.loc 1 3133 29 is_stmt 1 discriminator 1 view .LVU2646
 7335              	.L755:
3251:source\fatfs/ff.c **** 
 7336              		.loc 1 3251 1 is_stmt 0 view .LVU2647
 7337 0056 2846     		mov	r0, r5
 7338 0058 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7339              	.LVL810:
 7340              	.L784:
3251:source\fatfs/ff.c **** 
 7341              		.loc 1 3251 1 view .LVU2648
 7342 005c 8046     		mov	r8, r0
 7343              	.LVL811:
3251:source\fatfs/ff.c **** 
 7344              		.loc 1 3251 1 view .LVU2649
 7345 005e EAE7     		b	.L763
 7346              	.LVL812:
 7347              	.L759:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7348              		.loc 1 3132 45 is_stmt 1 discriminator 2 view .LVU2650
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7349              		.loc 1 3133 7 discriminator 2 view .LVU2651
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7350              		.loc 1 3133 10 is_stmt 0 discriminator 2 view .LVU2652
 7351 0060 431C     		adds	r3, r0, #1
 7352 0062 01D1     		bne	.L760
 7353              	.LVL813:
 7354              	.L768:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7355              		.loc 1 3133 29 is_stmt 1 discriminator 1 view .LVU2653
 7356 0064 0125     		movs	r5, #1
 7357 0066 F4E7     		b	.L822
 7358              	.LVL814:
 7359              	.L760:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7360              		.loc 1 3133 55 discriminator 2 view .LVU2654
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7361              		.loc 1 3134 14 discriminator 2 view .LVU2655
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7362              		.loc 1 3134 25 is_stmt 0 discriminator 2 view .LVU2656
 7363 0068 09F10109 		add	r9, r9, #1
 7364              	.LVL815:
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7365              		.loc 1 3134 6 discriminator 2 view .LVU2657
 7366 006c 8145     		cmp	r9, r0
 7367 006e E5D0     		beq	.L761
 7368              	.LVL816:
3128:source\fatfs/ff.c **** 					do {
 7369              		.loc 1 3128 30 view .LVU2658
 7370 0070 0237     		adds	r7, r7, #2
 7371              	.LVL817:
3135:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7372              		.loc 1 3135 6 is_stmt 1 view .LVU2659
3135:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7373              		.loc 1 3135 9 is_stmt 0 view .LVU2660
 7374 0072 BB45     		cmp	fp, r7
3136:source\fatfs/ff.c **** 					}
 7375              		.loc 1 3136 7 is_stmt 1 view .LVU2661
 7376              	.LVL818:
3136:source\fatfs/ff.c **** 					}
 7377              		.loc 1 3136 14 is_stmt 0 view .LVU2662
 7378 0074 21BF     		itttt	cs
 7379 0076 3346     		movcs	r3, r6
 7380 0078 43F808AB 		strcs	r10, [r3], #8
3136:source\fatfs/ff.c **** 					}
 7381              		.loc 1 3136 21 is_stmt 1 view .LVU2663
 7382              	.LVL819:
3136:source\fatfs/ff.c **** 					}
 7383              		.loc 1 3136 28 is_stmt 0 view .LVU2664
 7384 007c C6F80480 		strcs	r8, [r6, #4]
3136:source\fatfs/ff.c **** 					}
 7385              		.loc 1 3136 25 view .LVU2665
 7386 0080 1E46     		movcs	r6, r3
 7387              	.LVL820:
3138:source\fatfs/ff.c **** 			}
 7388              		.loc 1 3138 13 is_stmt 1 view .LVU2666
3138:source\fatfs/ff.c **** 			}
 7389              		.loc 1 3138 25 is_stmt 0 view .LVU2667
 7390 0082 D4F80032 		ldr	r3, [r4, #512]
3138:source\fatfs/ff.c **** 			}
 7391              		.loc 1 3138 5 view .LVU2668
 7392 0086 D3F81432 		ldr	r3, [r3, #532]
 7393 008a 8342     		cmp	r3, r0
 7394 008c E6D8     		bhi	.L784
 7395              	.LVL821:
 7396              	.L758:
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7397              		.loc 1 3140 4 is_stmt 1 view .LVU2669
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7398              		.loc 1 3140 15 is_stmt 0 view .LVU2670
 7399 008e D4F82432 		ldr	r3, [r4, #548]
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7400              		.loc 1 3141 7 view .LVU2671
 7401 0092 5F45     		cmp	r7, fp
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7402              		.loc 1 3140 15 view .LVU2672
 7403 0094 1F60     		str	r7, [r3]
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7404              		.loc 1 3141 4 is_stmt 1 view .LVU2673
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7405              		.loc 1 3141 7 is_stmt 0 view .LVU2674
 7406 0096 00F2F980 		bhi	.L785
3142:source\fatfs/ff.c **** 			else
 7407              		.loc 1 3142 5 is_stmt 1 view .LVU2675
3142:source\fatfs/ff.c **** 			else
 7408              		.loc 1 3142 10 is_stmt 0 view .LVU2676
 7409 009a 0023     		movs	r3, #0
 7410 009c 3360     		str	r3, [r6]
 7411 009e DAE7     		b	.L755
 7412              	.LVL822:
 7413              	.L757:
3147:source\fatfs/ff.c **** 				ofs = fp->fsize;
 7414              		.loc 1 3147 4 is_stmt 1 view .LVU2677
 7415 00a0 D4F80C72 		ldr	r7, [r4, #524]
 7416 00a4 B742     		cmp	r7, r6
 7417 00a6 28BF     		it	cs
 7418 00a8 3746     		movcs	r7, r6
 7419              	.LVL823:
3149:source\fatfs/ff.c **** 			if (ofs) {
 7420              		.loc 1 3149 4 view .LVU2678
3149:source\fatfs/ff.c **** 			if (ofs) {
 7421              		.loc 1 3149 13 is_stmt 0 view .LVU2679
 7422 00aa C4F80872 		str	r7, [r4, #520]
3150:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7423              		.loc 1 3150 4 is_stmt 1 view .LVU2680
3150:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7424              		.loc 1 3150 7 is_stmt 0 view .LVU2681
 7425 00ae 002F     		cmp	r7, #0
 7426 00b0 D1D0     		beq	.L755
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7427              		.loc 1 3151 5 is_stmt 1 view .LVU2682
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7428              		.loc 1 3151 17 is_stmt 0 view .LVU2683
 7429 00b2 7E1E     		subs	r6, r7, #1
 7430 00b4 3146     		mov	r1, r6
 7431 00b6 2046     		mov	r0, r4
 7432              	.LVL824:
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7433              		.loc 1 3151 17 view .LVU2684
 7434 00b8 FFF7FEFF 		bl	clmt_clust
 7435              	.LVL825:
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7436              		.loc 1 3152 11 view .LVU2685
 7437 00bc D4F80082 		ldr	r8, [r4, #512]
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7438              		.loc 1 3151 15 view .LVU2686
 7439 00c0 C4F81402 		str	r0, [r4, #532]
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7440              		.loc 1 3152 5 is_stmt 1 view .LVU2687
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7441              		.loc 1 3151 17 is_stmt 0 view .LVU2688
 7442 00c4 0146     		mov	r1, r0
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7443              		.loc 1 3152 11 view .LVU2689
 7444 00c6 4046     		mov	r0, r8
 7445 00c8 FFF7FEFF 		bl	clust2sect
 7446              	.LVL826:
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7447              		.loc 1 3153 5 is_stmt 1 view .LVU2690
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7448              		.loc 1 3153 8 is_stmt 0 view .LVU2691
 7449 00cc 0028     		cmp	r0, #0
 7450 00ce BFD0     		beq	.L765
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7451              		.loc 1 3153 40 is_stmt 1 discriminator 2 view .LVU2692
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7452              		.loc 1 3154 5 discriminator 2 view .LVU2693
 7453              	.LVL827:
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7454              		.loc 1 3155 5 discriminator 2 view .LVU2694
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7455              		.loc 1 3155 18 is_stmt 0 discriminator 2 view .LVU2695
 7456 00d0 C7F30807 		ubfx	r7, r7, #0, #9
 7457              	.LVL828:
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7458              		.loc 1 3155 8 discriminator 2 view .LVU2696
 7459 00d4 002F     		cmp	r7, #0
 7460 00d6 BED0     		beq	.L755
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7461              		.loc 1 3154 44 discriminator 1 view .LVU2697
 7462 00d8 98F80212 		ldrb	r1, [r8, #514]	@ zero_extendqisi2
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7463              		.loc 1 3155 43 discriminator 1 view .LVU2698
 7464 00dc D4F81822 		ldr	r2, [r4, #536]
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7465              		.loc 1 3154 52 discriminator 1 view .LVU2699
 7466 00e0 0139     		subs	r1, r1, #1
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7467              		.loc 1 3154 35 discriminator 1 view .LVU2700
 7468 00e2 01EA5621 		and	r1, r1, r6, lsr #9
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7469              		.loc 1 3154 9 discriminator 1 view .LVU2701
 7470 00e6 0E18     		adds	r6, r1, r0
 7471              	.LVL829:
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7472              		.loc 1 3155 31 discriminator 1 view .LVU2702
 7473 00e8 B242     		cmp	r2, r6
 7474 00ea B4D0     		beq	.L755
3158:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7475              		.loc 1 3158 6 is_stmt 1 view .LVU2703
3158:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7476              		.loc 1 3158 9 is_stmt 0 view .LVU2704
 7477 00ec 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7478 00f0 5906     		lsls	r1, r3, #25
 7479 00f2 0DD5     		bpl	.L767
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7480              		.loc 1 3159 7 is_stmt 1 view .LVU2705
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7481              		.loc 1 3159 11 is_stmt 0 view .LVU2706
 7482 00f4 98F80102 		ldrb	r0, [r8, #513]	@ zero_extendqisi2
 7483 00f8 0123     		movs	r3, #1
 7484 00fa 2146     		mov	r1, r4
 7485 00fc FFF7FEFF 		bl	disk_write
 7486              	.LVL830:
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7487              		.loc 1 3159 10 view .LVU2707
 7488 0100 0028     		cmp	r0, #0
 7489 0102 AFD1     		bne	.L768
3160:source\fatfs/ff.c **** 						fp->flag &= ~FA__DIRTY;
 7490              		.loc 1 3160 34 is_stmt 1 view .LVU2708
3161:source\fatfs/ff.c **** 					}
 7491              		.loc 1 3161 7 view .LVU2709
3161:source\fatfs/ff.c **** 					}
 7492              		.loc 1 3161 16 is_stmt 0 view .LVU2710
 7493 0104 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7494 0108 23F04003 		bic	r3, r3, #64
 7495 010c 84F80632 		strb	r3, [r4, #518]
 7496              	.L767:
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7497              		.loc 1 3164 6 is_stmt 1 view .LVU2711
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7498              		.loc 1 3164 10 is_stmt 0 view .LVU2712
 7499 0110 D4F80002 		ldr	r0, [r4, #512]
 7500 0114 0123     		movs	r3, #1
 7501 0116 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7502 011a 3246     		mov	r2, r6
 7503 011c 2146     		mov	r1, r4
 7504 011e FFF7FEFF 		bl	disk_read
 7505              	.LVL831:
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7506              		.loc 1 3164 9 view .LVU2713
 7507 0122 0546     		mov	r5, r0
 7508 0124 0028     		cmp	r0, #0
 7509 0126 9DD1     		bne	.L768
3165:source\fatfs/ff.c **** #endif
 7510              		.loc 1 3165 33 is_stmt 1 view .LVU2714
3167:source\fatfs/ff.c **** 				}
 7511              		.loc 1 3167 6 view .LVU2715
3167:source\fatfs/ff.c **** 				}
 7512              		.loc 1 3167 16 is_stmt 0 view .LVU2716
 7513 0128 C4F81862 		str	r6, [r4, #536]
 7514 012c 93E7     		b	.L755
 7515              	.LVL832:
 7516              	.L756:
3176:source\fatfs/ff.c **** #if !_FS_READONLY
 7517              		.loc 1 3176 3 is_stmt 1 view .LVU2717
3176:source\fatfs/ff.c **** #if !_FS_READONLY
 7518              		.loc 1 3176 15 is_stmt 0 view .LVU2718
 7519 012e D4F80C32 		ldr	r3, [r4, #524]
3176:source\fatfs/ff.c **** #if !_FS_READONLY
 7520              		.loc 1 3176 6 view .LVU2719
 7521 0132 B342     		cmp	r3, r6
 7522 0134 05D2     		bcs	.L769
3178:source\fatfs/ff.c **** #endif
 7523              		.loc 1 3178 5 view .LVU2720
 7524 0136 94F80622 		ldrb	r2, [r4, #518]	@ zero_extendqisi2
 7525 013a 12F0020F 		tst	r2, #2
 7526 013e 08BF     		it	eq
 7527 0140 1E46     		moveq	r6, r3
 7528              	.LVL833:
 7529              	.L769:
3182:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7530              		.loc 1 3182 3 is_stmt 1 view .LVU2721
3183:source\fatfs/ff.c **** 		if (ofs) {
 7531              		.loc 1 3183 12 is_stmt 0 view .LVU2722
 7532 0142 0022     		movs	r2, #0
3182:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7533              		.loc 1 3182 9 view .LVU2723
 7534 0144 D4F80832 		ldr	r3, [r4, #520]
 7535              	.LVL834:
3183:source\fatfs/ff.c **** 		if (ofs) {
 7536              		.loc 1 3183 3 is_stmt 1 view .LVU2724
3183:source\fatfs/ff.c **** 		if (ofs) {
 7537              		.loc 1 3183 12 is_stmt 0 view .LVU2725
 7538 0148 C4F80822 		str	r2, [r4, #520]
3184:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7539              		.loc 1 3184 3 is_stmt 1 view .LVU2726
3184:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7540              		.loc 1 3184 6 is_stmt 0 view .LVU2727
 7541 014c 6EB9     		cbnz	r6, .L770
 7542              	.LVL835:
 7543              	.L771:
3243:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
 7544              		.loc 1 3243 3 is_stmt 1 view .LVU2728
3243:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
 7545              		.loc 1 3243 6 is_stmt 0 view .LVU2729
 7546 014e D4E98232 		ldrd	r3, r2, [r4, #520]
 7547 0152 9342     		cmp	r3, r2
 7548 0154 7FF67FAF 		bls	.L755
3244:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 7549              		.loc 1 3244 4 is_stmt 1 view .LVU2730
3244:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 7550              		.loc 1 3244 14 is_stmt 0 view .LVU2731
 7551 0158 C4F80C32 		str	r3, [r4, #524]
3245:source\fatfs/ff.c **** 		}
 7552              		.loc 1 3245 4 is_stmt 1 view .LVU2732
3245:source\fatfs/ff.c **** 		}
 7553              		.loc 1 3245 13 is_stmt 0 view .LVU2733
 7554 015c 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7555 0160 43F02003 		orr	r3, r3, #32
 7556 0164 84F80632 		strb	r3, [r4, #518]
 7557 0168 75E7     		b	.L755
 7558              	.LVL836:
 7559              	.L770:
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7560              		.loc 1 3185 4 is_stmt 1 view .LVU2734
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7561              		.loc 1 3185 19 is_stmt 0 view .LVU2735
 7562 016a D4F80002 		ldr	r0, [r4, #512]
 7563              	.LVL837:
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7564              		.loc 1 3185 10 view .LVU2736
 7565 016e 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7566              		.loc 1 3185 8 view .LVU2737
 7567 0172 7F02     		lsls	r7, r7, #9
 7568              	.LVL838:
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7569              		.loc 1 3186 4 is_stmt 1 view .LVU2738
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7570              		.loc 1 3186 7 is_stmt 0 view .LVU2739
 7571 0174 002B     		cmp	r3, #0
 7572 0176 3FD0     		beq	.L773
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7573              		.loc 1 3187 31 discriminator 1 view .LVU2740
 7574 0178 013B     		subs	r3, r3, #1
 7575              	.LVL839:
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7576              		.loc 1 3187 10 discriminator 1 view .LVU2741
 7577 017a 721E     		subs	r2, r6, #1
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7578              		.loc 1 3187 36 discriminator 1 view .LVU2742
 7579 017c B3FBF7F1 		udiv	r1, r3, r7
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7580              		.loc 1 3187 15 discriminator 1 view .LVU2743
 7581 0180 B2FBF7F2 		udiv	r2, r2, r7
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7582              		.loc 1 3186 18 discriminator 1 view .LVU2744
 7583 0184 8A42     		cmp	r2, r1
 7584 0186 37D3     		bcc	.L773
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7585              		.loc 1 3188 5 is_stmt 1 view .LVU2745
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7586              		.loc 1 3188 30 is_stmt 0 view .LVU2746
 7587 0188 7A42     		rsbs	r2, r7, #0
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7588              		.loc 1 3188 28 view .LVU2747
 7589 018a 1340     		ands	r3, r3, r2
 7590              	.LVL840:
3190:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
 7591              		.loc 1 3190 10 view .LVU2748
 7592 018c D4F81412 		ldr	r1, [r4, #532]
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7593              		.loc 1 3188 14 view .LVU2749
 7594 0190 C4F80832 		str	r3, [r4, #520]
3189:source\fatfs/ff.c **** 				clst = fp->clust;
 7595              		.loc 1 3189 5 is_stmt 1 view .LVU2750
3189:source\fatfs/ff.c **** 				clst = fp->clust;
 7596              		.loc 1 3189 9 is_stmt 0 view .LVU2751
 7597 0194 F61A     		subs	r6, r6, r3
 7598              	.LVL841:
3190:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
 7599              		.loc 1 3190 5 is_stmt 1 view .LVU2752
 7600              	.L774:
3203:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7601              		.loc 1 3203 4 view .LVU2753
3203:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7602              		.loc 1 3203 7 is_stmt 0 view .LVU2754
 7603 0196 0029     		cmp	r1, #0
 7604 0198 63D1     		bne	.L776
 7605              	.L777:
3183:source\fatfs/ff.c **** 		if (ofs) {
 7606              		.loc 1 3183 20 view .LVU2755
 7607 019a 0026     		movs	r6, #0
 7608              	.LVL842:
 7609              	.L772:
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7610              		.loc 1 3228 3 is_stmt 1 view .LVU2756
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7611              		.loc 1 3228 16 is_stmt 0 view .LVU2757
 7612 019c D4F80832 		ldr	r3, [r4, #520]
 7613 01a0 C3F30803 		ubfx	r3, r3, #0, #9
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7614              		.loc 1 3228 6 view .LVU2758
 7615 01a4 002B     		cmp	r3, #0
 7616 01a6 D2D0     		beq	.L771
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7617              		.loc 1 3228 43 discriminator 1 view .LVU2759
 7618 01a8 D4F81822 		ldr	r2, [r4, #536]
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7619              		.loc 1 3228 29 discriminator 1 view .LVU2760
 7620 01ac B242     		cmp	r2, r6
 7621 01ae CED0     		beq	.L771
3231:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7622              		.loc 1 3231 4 is_stmt 1 view .LVU2761
3231:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7623              		.loc 1 3231 7 is_stmt 0 view .LVU2762
 7624 01b0 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7625 01b4 5B06     		lsls	r3, r3, #25
 7626 01b6 10D5     		bpl	.L782
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7627              		.loc 1 3232 5 is_stmt 1 view .LVU2763
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7628              		.loc 1 3232 9 is_stmt 0 view .LVU2764
 7629 01b8 D4F80002 		ldr	r0, [r4, #512]
 7630 01bc 0123     		movs	r3, #1
 7631 01be 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7632 01c2 2146     		mov	r1, r4
 7633 01c4 FFF7FEFF 		bl	disk_write
 7634              	.LVL843:
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7635              		.loc 1 3232 8 view .LVU2765
 7636 01c8 0028     		cmp	r0, #0
 7637 01ca 7FF44BAF 		bne	.L768
3233:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7638              		.loc 1 3233 32 is_stmt 1 view .LVU2766
3234:source\fatfs/ff.c **** 			}
 7639              		.loc 1 3234 5 view .LVU2767
3234:source\fatfs/ff.c **** 			}
 7640              		.loc 1 3234 14 is_stmt 0 view .LVU2768
 7641 01ce 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7642 01d2 23F04003 		bic	r3, r3, #64
 7643 01d6 84F80632 		strb	r3, [r4, #518]
 7644              	.L782:
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7645              		.loc 1 3237 4 is_stmt 1 view .LVU2769
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7646              		.loc 1 3237 8 is_stmt 0 view .LVU2770
 7647 01da D4F80002 		ldr	r0, [r4, #512]
 7648 01de 0123     		movs	r3, #1
 7649 01e0 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7650 01e4 3246     		mov	r2, r6
 7651 01e6 2146     		mov	r1, r4
 7652 01e8 FFF7FEFF 		bl	disk_read
 7653              	.LVL844:
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7654              		.loc 1 3237 7 view .LVU2771
 7655 01ec 0028     		cmp	r0, #0
 7656 01ee 7FF439AF 		bne	.L768
3238:source\fatfs/ff.c **** #endif
 7657              		.loc 1 3238 31 is_stmt 1 view .LVU2772
3240:source\fatfs/ff.c **** 		}
 7658              		.loc 1 3240 4 view .LVU2773
3240:source\fatfs/ff.c **** 		}
 7659              		.loc 1 3240 14 is_stmt 0 view .LVU2774
 7660 01f2 C4F81862 		str	r6, [r4, #536]
 7661 01f6 AAE7     		b	.L771
 7662              	.LVL845:
 7663              	.L773:
3192:source\fatfs/ff.c **** #if !_FS_READONLY
 7664              		.loc 1 3192 5 is_stmt 1 view .LVU2775
3192:source\fatfs/ff.c **** #if !_FS_READONLY
 7665              		.loc 1 3192 10 is_stmt 0 view .LVU2776
 7666 01f8 D4F81012 		ldr	r1, [r4, #528]
 7667              	.LVL846:
3194:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
 7668              		.loc 1 3194 5 is_stmt 1 view .LVU2777
3194:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
 7669              		.loc 1 3194 8 is_stmt 0 view .LVU2778
 7670 01fc 51B9     		cbnz	r1, .L775
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7671              		.loc 1 3195 6 is_stmt 1 view .LVU2779
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7672              		.loc 1 3195 13 is_stmt 0 view .LVU2780
 7673 01fe FFF7FEFF 		bl	create_chain
 7674              	.LVL847:
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7675              		.loc 1 3196 9 view .LVU2781
 7676 0202 0128     		cmp	r0, #1
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7677              		.loc 1 3195 13 view .LVU2782
 7678 0204 0146     		mov	r1, r0
 7679              	.LVL848:
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7680              		.loc 1 3196 6 is_stmt 1 view .LVU2783
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7681              		.loc 1 3196 9 is_stmt 0 view .LVU2784
 7682 0206 3FF423AF 		beq	.L765
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7683              		.loc 1 3196 46 is_stmt 1 discriminator 2 view .LVU2785
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7684              		.loc 1 3197 6 discriminator 2 view .LVU2786
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7685              		.loc 1 3197 9 is_stmt 0 discriminator 2 view .LVU2787
 7686 020a 421C     		adds	r2, r0, #1
 7687 020c 3FF42AAF 		beq	.L768
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7688              		.loc 1 3197 56 is_stmt 1 discriminator 2 view .LVU2788
3198:source\fatfs/ff.c **** 				}
 7689              		.loc 1 3198 6 discriminator 2 view .LVU2789
3198:source\fatfs/ff.c **** 				}
 7690              		.loc 1 3198 17 is_stmt 0 discriminator 2 view .LVU2790
 7691 0210 C4F81002 		str	r0, [r4, #528]
 7692              	.LVL849:
 7693              	.L775:
3201:source\fatfs/ff.c **** 			}
 7694              		.loc 1 3201 5 is_stmt 1 view .LVU2791
3201:source\fatfs/ff.c **** 			}
 7695              		.loc 1 3201 15 is_stmt 0 view .LVU2792
 7696 0214 C4F81412 		str	r1, [r4, #532]
 7697 0218 BDE7     		b	.L774
 7698              	.L781:
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7699              		.loc 1 3206 6 is_stmt 1 view .LVU2793
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7700              		.loc 1 3206 9 is_stmt 0 view .LVU2794
 7701 021a 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7702              		.loc 1 3207 14 view .LVU2795
 7703 021e D4F80002 		ldr	r0, [r4, #512]
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7704              		.loc 1 3206 9 view .LVU2796
 7705 0222 9B07     		lsls	r3, r3, #30
 7706 0224 05D5     		bpl	.L778
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7707              		.loc 1 3207 7 is_stmt 1 view .LVU2797
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7708              		.loc 1 3207 14 is_stmt 0 view .LVU2798
 7709 0226 FFF7FEFF 		bl	create_chain
 7710              	.LVL850:
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7711              		.loc 1 3208 7 is_stmt 1 view .LVU2799
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7712              		.loc 1 3208 10 is_stmt 0 view .LVU2800
 7713 022a 0146     		mov	r1, r0
 7714 022c 20B9     		cbnz	r0, .L780
 7715 022e 3E46     		mov	r6, r7
 7716              	.LVL851:
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7717              		.loc 1 3208 10 view .LVU2801
 7718 0230 19E0     		b	.L779
 7719              	.LVL852:
 7720              	.L778:
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7721              		.loc 1 3213 7 is_stmt 1 view .LVU2802
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7722              		.loc 1 3213 14 is_stmt 0 view .LVU2803
 7723 0232 FFF7FEFF 		bl	get_fat
 7724              	.LVL853:
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7725              		.loc 1 3213 14 view .LVU2804
 7726 0236 0146     		mov	r1, r0
 7727              	.LVL854:
 7728              	.L780:
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7729              		.loc 1 3214 6 is_stmt 1 view .LVU2805
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7730              		.loc 1 3214 9 is_stmt 0 view .LVU2806
 7731 0238 4A1C     		adds	r2, r1, #1
 7732 023a 3FF413AF 		beq	.L768
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7733              		.loc 1 3214 56 is_stmt 1 discriminator 2 view .LVU2807
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7734              		.loc 1 3215 6 discriminator 2 view .LVU2808
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7735              		.loc 1 3215 9 is_stmt 0 discriminator 2 view .LVU2809
 7736 023e 0129     		cmp	r1, #1
 7737 0240 7FF606AF 		bls	.L765
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7738              		.loc 1 3215 37 discriminator 2 view .LVU2810
 7739 0244 D4F80032 		ldr	r3, [r4, #512]
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7740              		.loc 1 3215 20 discriminator 2 view .LVU2811
 7741 0248 D3F81432 		ldr	r3, [r3, #532]
 7742 024c 8B42     		cmp	r3, r1
 7743 024e 7FF6FFAE 		bls	.L765
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7744              		.loc 1 3215 74 is_stmt 1 discriminator 4 view .LVU2812
3216:source\fatfs/ff.c **** 					fp->fptr += bcs;
 7745              		.loc 1 3216 6 discriminator 4 view .LVU2813
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7746              		.loc 1 3217 15 is_stmt 0 discriminator 4 view .LVU2814
 7747 0252 D4F80832 		ldr	r3, [r4, #520]
3216:source\fatfs/ff.c **** 					fp->fptr += bcs;
 7748              		.loc 1 3216 16 discriminator 4 view .LVU2815
 7749 0256 C4F81412 		str	r1, [r4, #532]
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7750              		.loc 1 3217 6 is_stmt 1 discriminator 4 view .LVU2816
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7751              		.loc 1 3217 15 is_stmt 0 discriminator 4 view .LVU2817
 7752 025a 3B44     		add	r3, r3, r7
 7753 025c C4F80832 		str	r3, [r4, #520]
3218:source\fatfs/ff.c **** 				}
 7754              		.loc 1 3218 6 is_stmt 1 discriminator 4 view .LVU2818
3218:source\fatfs/ff.c **** 				}
 7755              		.loc 1 3218 10 is_stmt 0 discriminator 4 view .LVU2819
 7756 0260 F61B     		subs	r6, r6, r7
 7757              	.LVL855:
 7758              	.L776:
3204:source\fatfs/ff.c **** #if !_FS_READONLY
 7759              		.loc 1 3204 11 is_stmt 1 view .LVU2820
 7760 0262 BE42     		cmp	r6, r7
 7761 0264 D9D8     		bhi	.L781
 7762              	.LVL856:
 7763              	.L779:
3220:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
 7764              		.loc 1 3220 5 view .LVU2821
3220:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
 7765              		.loc 1 3220 14 is_stmt 0 view .LVU2822
 7766 0266 D4F80832 		ldr	r3, [r4, #520]
 7767 026a 3344     		add	r3, r3, r6
 7768 026c C4F80832 		str	r3, [r4, #520]
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7769              		.loc 1 3221 5 is_stmt 1 view .LVU2823
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7770              		.loc 1 3221 13 is_stmt 0 view .LVU2824
 7771 0270 C6F30803 		ubfx	r3, r6, #0, #9
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7772              		.loc 1 3221 8 view .LVU2825
 7773 0274 002B     		cmp	r3, #0
 7774 0276 90D0     		beq	.L777
3222:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 7775              		.loc 1 3222 6 is_stmt 1 view .LVU2826
3222:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 7776              		.loc 1 3222 14 is_stmt 0 view .LVU2827
 7777 0278 D4F80002 		ldr	r0, [r4, #512]
 7778 027c FFF7FEFF 		bl	clust2sect
 7779              	.LVL857:
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7780              		.loc 1 3223 6 is_stmt 1 view .LVU2828
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7781              		.loc 1 3223 9 is_stmt 0 view .LVU2829
 7782 0280 0028     		cmp	r0, #0
 7783 0282 3FF4E5AE 		beq	.L765
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7784              		.loc 1 3223 43 is_stmt 1 discriminator 2 view .LVU2830
3224:source\fatfs/ff.c **** 				}
 7785              		.loc 1 3224 6 discriminator 2 view .LVU2831
3224:source\fatfs/ff.c **** 				}
 7786              		.loc 1 3224 12 is_stmt 0 discriminator 2 view .LVU2832
 7787 0286 00EB5626 		add	r6, r0, r6, lsr #9
 7788              	.LVL858:
3224:source\fatfs/ff.c **** 				}
 7789              		.loc 1 3224 12 discriminator 2 view .LVU2833
 7790 028a 87E7     		b	.L772
 7791              	.LVL859:
 7792              	.L785:
3144:source\fatfs/ff.c **** 
 7793              		.loc 1 3144 9 view .LVU2834
 7794 028c 1125     		movs	r5, #17
 7795 028e E2E6     		b	.L755
 7796              		.cfi_endproc
 7797              	.LFE175:
 7799              		.section	.text.f_opendir,"ax",%progbits
 7800              		.align	1
 7801              		.global	f_opendir
 7802              		.syntax unified
 7803              		.thumb
 7804              		.thumb_func
 7806              	f_opendir:
 7807              	.LVL860:
 7808              	.LFB176:
3264:source\fatfs/ff.c **** 	FRESULT res;
 7809              		.loc 1 3264 1 is_stmt 1 view -0
 7810              		.cfi_startproc
 7811              		@ args = 0, pretend = 0, frame = 24
 7812              		@ frame_needed = 0, uses_anonymous_args = 0
3265:source\fatfs/ff.c **** 	FATFS* fs;
 7813              		.loc 1 3265 2 view .LVU2836
3266:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 7814              		.loc 1 3266 2 view .LVU2837
3267:source\fatfs/ff.c **** 
 7815              		.loc 1 3267 2 view .LVU2838
3267:source\fatfs/ff.c **** 
 7816              		.loc 1 3267 2 view .LVU2839
3270:source\fatfs/ff.c **** 
 7817              		.loc 1 3270 2 view .LVU2840
3264:source\fatfs/ff.c **** 	FRESULT res;
 7818              		.loc 1 3264 1 is_stmt 0 view .LVU2841
 7819 0000 70B5     		push	{r4, r5, r6, lr}
 7820              		.cfi_def_cfa_offset 16
 7821              		.cfi_offset 4, -16
 7822              		.cfi_offset 5, -12
 7823              		.cfi_offset 6, -8
 7824              		.cfi_offset 14, -4
 7825 0002 86B0     		sub	sp, sp, #24
 7826              		.cfi_def_cfa_offset 40
3270:source\fatfs/ff.c **** 
 7827              		.loc 1 3270 5 view .LVU2842
 7828 0004 0546     		mov	r5, r0
3264:source\fatfs/ff.c **** 	FRESULT res;
 7829              		.loc 1 3264 1 view .LVU2843
 7830 0006 0191     		str	r1, [sp, #4]
3270:source\fatfs/ff.c **** 
 7831              		.loc 1 3270 5 view .LVU2844
 7832 0008 0028     		cmp	r0, #0
 7833 000a 50D0     		beq	.L831
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7834              		.loc 1 3273 2 is_stmt 1 view .LVU2845
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7835              		.loc 1 3273 8 is_stmt 0 view .LVU2846
 7836 000c 0022     		movs	r2, #0
 7837 000e 01A9     		add	r1, sp, #4
 7838              	.LVL861:
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7839              		.loc 1 3273 8 view .LVU2847
 7840 0010 02A8     		add	r0, sp, #8
 7841              	.LVL862:
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7842              		.loc 1 3273 8 view .LVU2848
 7843 0012 FFF7FEFF 		bl	find_volume
 7844              	.LVL863:
3274:source\fatfs/ff.c **** 		dp->fs = fs;
 7845              		.loc 1 3274 2 is_stmt 1 view .LVU2849
3274:source\fatfs/ff.c **** 		dp->fs = fs;
 7846              		.loc 1 3274 5 is_stmt 0 view .LVU2850
 7847 0016 0446     		mov	r4, r0
 7848 0018 F0B9     		cbnz	r0, .L825
3275:source\fatfs/ff.c **** 		INIT_BUF(*dp);
 7849              		.loc 1 3275 3 is_stmt 1 view .LVU2851
3275:source\fatfs/ff.c **** 		INIT_BUF(*dp);
 7850              		.loc 1 3275 10 is_stmt 0 view .LVU2852
 7851 001a 029B     		ldr	r3, [sp, #8]
 7852 001c C5F80032 		str	r3, [r5, #512]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7853              		.loc 1 3276 3 is_stmt 1 view .LVU2853
 7854 0020 4FF40070 		mov	r0, #512
 7855              	.LVL864:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7856              		.loc 1 3276 3 is_stmt 0 view .LVU2854
 7857 0024 FFF7FEFF 		bl	ff_memalloc
 7858              	.LVL865:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7859              		.loc 1 3276 3 is_stmt 1 view .LVU2855
 7860 0028 0646     		mov	r6, r0
 7861 002a 0028     		cmp	r0, #0
 7862 002c 41D0     		beq	.L832
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7863              		.loc 1 3276 3 discriminator 2 view .LVU2856
 7864 002e 03AB     		add	r3, sp, #12
 7865 0030 C5F82002 		str	r0, [r5, #544]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7866              		.loc 1 3276 3 discriminator 2 view .LVU2857
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7867              		.loc 1 3277 9 is_stmt 0 discriminator 2 view .LVU2858
 7868 0034 0199     		ldr	r1, [sp, #4]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7869              		.loc 1 3276 3 discriminator 2 view .LVU2859
 7870 0036 C5F81832 		str	r3, [r5, #536]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7871              		.loc 1 3276 16 is_stmt 1 discriminator 2 view .LVU2860
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7872              		.loc 1 3277 3 discriminator 2 view .LVU2861
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7873              		.loc 1 3277 9 is_stmt 0 discriminator 2 view .LVU2862
 7874 003a 2846     		mov	r0, r5
 7875              	.LVL866:
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7876              		.loc 1 3277 9 discriminator 2 view .LVU2863
 7877 003c FFF7FEFF 		bl	follow_path
 7878              	.LVL867:
 7879 0040 0446     		mov	r4, r0
 7880              	.LVL868:
3278:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 7881              		.loc 1 3278 3 is_stmt 1 discriminator 2 view .LVU2864
 7882 0042 3046     		mov	r0, r6
 7883 0044 FFF7FEFF 		bl	ff_memfree
 7884              	.LVL869:
3279:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 7885              		.loc 1 3279 3 discriminator 2 view .LVU2865
3279:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 7886              		.loc 1 3279 6 is_stmt 0 discriminator 2 view .LVU2866
 7887 0048 64BB     		cbnz	r4, .L826
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 7888              		.loc 1 3280 4 is_stmt 1 view .LVU2867
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 7889              		.loc 1 3280 10 is_stmt 0 view .LVU2868
 7890 004a D5F81412 		ldr	r1, [r5, #532]
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 7891              		.loc 1 3280 7 view .LVU2869
 7892 004e 71B1     		cbz	r1, .L827
3281:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 7893              		.loc 1 3281 5 is_stmt 1 view .LVU2870
3281:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 7894              		.loc 1 3281 8 is_stmt 0 view .LVU2871
 7895 0050 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 7896 0052 DB06     		lsls	r3, r3, #27
 7897 0054 04D4     		bmi	.L828
 7898              	.L830:
3284:source\fatfs/ff.c **** 			}
 7899              		.loc 1 3284 10 view .LVU2872
 7900 0056 0524     		movs	r4, #5
 7901              	.LVL870:
 7902              	.L825:
3304:source\fatfs/ff.c **** 
 7903              		.loc 1 3304 20 is_stmt 1 discriminator 1 view .LVU2873
3304:source\fatfs/ff.c **** 
 7904              		.loc 1 3304 27 is_stmt 0 discriminator 1 view .LVU2874
 7905 0058 0023     		movs	r3, #0
 7906 005a C5F80032 		str	r3, [r5, #512]
 7907 005e 1BE0     		b	.L824
 7908              	.LVL871:
 7909              	.L828:
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 7910              		.loc 1 3282 6 is_stmt 1 view .LVU2875
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 7911              		.loc 1 3282 19 is_stmt 0 view .LVU2876
 7912 0060 029B     		ldr	r3, [sp, #8]
 7913 0062 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 7914 0066 FFF7FEFF 		bl	ld_clust.isra.0
 7915              	.LVL872:
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 7916              		.loc 1 3282 17 view .LVU2877
 7917 006a C5F80802 		str	r0, [r5, #520]
 7918              	.L827:
 7919              	.LVL873:
3286:source\fatfs/ff.c **** 				dp->id = fs->id;
 7920              		.loc 1 3286 4 is_stmt 1 view .LVU2878
3287:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 7921              		.loc 1 3287 5 view .LVU2879
3287:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 7922              		.loc 1 3287 16 is_stmt 0 view .LVU2880
 7923 006e 029B     		ldr	r3, [sp, #8]
3287:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 7924              		.loc 1 3287 12 view .LVU2881
 7925 0070 B3F80632 		ldrh	r3, [r3, #518]
 7926 0074 A5F80432 		strh	r3, [r5, #516]	@ movhi
3288:source\fatfs/ff.c **** #if _FS_LOCK
 7927              		.loc 1 3288 5 is_stmt 1 view .LVU2882
3288:source\fatfs/ff.c **** #if _FS_LOCK
 7928              		.loc 1 3288 11 is_stmt 0 view .LVU2883
 7929 0078 0021     		movs	r1, #0
 7930 007a 2846     		mov	r0, r5
 7931 007c FFF7FEFF 		bl	dir_sdi
 7932              	.LVL874:
3290:source\fatfs/ff.c **** 					if (dp->sclust) {
 7933              		.loc 1 3290 5 is_stmt 1 view .LVU2884
3290:source\fatfs/ff.c **** 					if (dp->sclust) {
 7934              		.loc 1 3290 8 is_stmt 0 view .LVU2885
 7935 0080 0446     		mov	r4, r0
 7936 0082 78B9     		cbnz	r0, .L826
3291:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 7937              		.loc 1 3291 6 is_stmt 1 view .LVU2886
3291:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 7938              		.loc 1 3291 9 is_stmt 0 view .LVU2887
 7939 0084 D5F80832 		ldr	r3, [r5, #520]
 7940 0088 4BB1     		cbz	r3, .L829
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 7941              		.loc 1 3292 7 is_stmt 1 view .LVU2888
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 7942              		.loc 1 3292 20 is_stmt 0 view .LVU2889
 7943 008a 0146     		mov	r1, r0
 7944 008c 2846     		mov	r0, r5
 7945              	.LVL875:
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 7946              		.loc 1 3292 20 view .LVU2890
 7947 008e FFF7FEFF 		bl	inc_lock
 7948              	.LVL876:
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 7949              		.loc 1 3292 18 view .LVU2891
 7950 0092 C5F81C02 		str	r0, [r5, #540]
3293:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
 7951              		.loc 1 3293 7 is_stmt 1 view .LVU2892
3293:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
 7952              		.loc 1 3293 10 is_stmt 0 view .LVU2893
 7953 0096 40B1     		cbz	r0, .L833
 7954              	.LVL877:
 7955              	.L824:
3307:source\fatfs/ff.c **** 
 7956              		.loc 1 3307 1 view .LVU2894
 7957 0098 2046     		mov	r0, r4
 7958 009a 06B0     		add	sp, sp, #24
 7959              		.cfi_remember_state
 7960              		.cfi_def_cfa_offset 16
 7961              		@ sp needed
 7962 009c 70BD     		pop	{r4, r5, r6, pc}
 7963              	.LVL878:
 7964              	.L829:
 7965              		.cfi_restore_state
3296:source\fatfs/ff.c **** 					}
 7966              		.loc 1 3296 7 is_stmt 1 view .LVU2895
3296:source\fatfs/ff.c **** 					}
 7967              		.loc 1 3296 18 is_stmt 0 view .LVU2896
 7968 009e C5F81C02 		str	r0, [r5, #540]
 7969              	.LVL879:
3302:source\fatfs/ff.c **** 	}
 7970              		.loc 1 3302 3 is_stmt 1 view .LVU2897
 7971 00a2 F9E7     		b	.L824
 7972              	.LVL880:
 7973              	.L826:
3302:source\fatfs/ff.c **** 	}
 7974              		.loc 1 3302 3 view .LVU2898
3302:source\fatfs/ff.c **** 	}
 7975              		.loc 1 3302 6 is_stmt 0 view .LVU2899
 7976 00a4 042C     		cmp	r4, #4
 7977 00a6 D6D0     		beq	.L830
 7978 00a8 D6E7     		b	.L825
 7979              	.LVL881:
 7980              	.L833:
3294:source\fatfs/ff.c **** 					} else {
 7981              		.loc 1 3294 12 view .LVU2900
 7982 00aa 1224     		movs	r4, #18
 7983 00ac D4E7     		b	.L825
 7984              	.LVL882:
 7985              	.L831:
3270:source\fatfs/ff.c **** 
 7986              		.loc 1 3270 18 view .LVU2901
 7987 00ae 0924     		movs	r4, #9
 7988 00b0 F2E7     		b	.L824
 7989              	.LVL883:
 7990              	.L832:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7991              		.loc 1 3276 3 view .LVU2902
 7992 00b2 1124     		movs	r4, #17
 7993 00b4 F0E7     		b	.L824
 7994              		.cfi_endproc
 7995              	.LFE176:
 7997              		.section	.text.f_closedir,"ax",%progbits
 7998              		.align	1
 7999              		.global	f_closedir
 8000              		.syntax unified
 8001              		.thumb
 8002              		.thumb_func
 8004              	f_closedir:
 8005              	.LVL884:
 8006              	.LFB177:
3319:source\fatfs/ff.c **** 	FRESULT res;
 8007              		.loc 1 3319 1 is_stmt 1 view -0
 8008              		.cfi_startproc
 8009              		@ args = 0, pretend = 0, frame = 0
 8010              		@ frame_needed = 0, uses_anonymous_args = 0
3320:source\fatfs/ff.c **** 
 8011              		.loc 1 3320 2 view .LVU2904
3323:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8012              		.loc 1 3323 2 view .LVU2905
3319:source\fatfs/ff.c **** 	FRESULT res;
 8013              		.loc 1 3319 1 is_stmt 0 view .LVU2906
 8014 0000 38B5     		push	{r3, r4, r5, lr}
 8015              		.cfi_def_cfa_offset 16
 8016              		.cfi_offset 3, -16
 8017              		.cfi_offset 4, -12
 8018              		.cfi_offset 5, -8
 8019              		.cfi_offset 14, -4
3319:source\fatfs/ff.c **** 	FRESULT res;
 8020              		.loc 1 3319 1 view .LVU2907
 8021 0002 0546     		mov	r5, r0
3323:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8022              		.loc 1 3323 8 view .LVU2908
 8023 0004 FFF7FEFF 		bl	validate
 8024              	.LVL885:
3324:source\fatfs/ff.c **** #if _FS_REENTRANT
 8025              		.loc 1 3324 2 is_stmt 1 view .LVU2909
3324:source\fatfs/ff.c **** #if _FS_REENTRANT
 8026              		.loc 1 3324 5 is_stmt 0 view .LVU2910
 8027 0008 0446     		mov	r4, r0
 8028 000a 28B9     		cbnz	r0, .L841
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8029              		.loc 1 3329 3 is_stmt 1 view .LVU2911
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8030              		.loc 1 3329 9 is_stmt 0 view .LVU2912
 8031 000c D5F81C02 		ldr	r0, [r5, #540]
 8032              	.LVL886:
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8033              		.loc 1 3329 6 view .LVU2913
 8034 0010 20B9     		cbnz	r0, .L842
 8035              	.L843:
3333:source\fatfs/ff.c **** #if _FS_REENTRANT
 8036              		.loc 1 3333 4 is_stmt 1 view .LVU2914
3333:source\fatfs/ff.c **** #if _FS_REENTRANT
 8037              		.loc 1 3333 11 is_stmt 0 view .LVU2915
 8038 0012 0023     		movs	r3, #0
 8039 0014 C5F80032 		str	r3, [r5, #512]
 8040              	.L841:
 8041              	.LVL887:
3338:source\fatfs/ff.c **** }
 8042              		.loc 1 3338 2 is_stmt 1 view .LVU2916
3339:source\fatfs/ff.c **** 
 8043              		.loc 1 3339 1 is_stmt 0 view .LVU2917
 8044 0018 2046     		mov	r0, r4
 8045 001a 38BD     		pop	{r3, r4, r5, pc}
 8046              	.LVL888:
 8047              	.L842:
3330:source\fatfs/ff.c **** 		if (res == FR_OK)
 8048              		.loc 1 3330 4 is_stmt 1 view .LVU2918
3330:source\fatfs/ff.c **** 		if (res == FR_OK)
 8049              		.loc 1 3330 10 is_stmt 0 view .LVU2919
 8050 001c FFF7FEFF 		bl	dec_lock
 8051              	.LVL889:
3331:source\fatfs/ff.c **** #endif
 8052              		.loc 1 3331 3 is_stmt 1 view .LVU2920
3331:source\fatfs/ff.c **** #endif
 8053              		.loc 1 3331 6 is_stmt 0 view .LVU2921
 8054 0020 0028     		cmp	r0, #0
 8055 0022 F6D0     		beq	.L843
 8056 0024 0446     		mov	r4, r0
 8057 0026 F7E7     		b	.L841
 8058              		.cfi_endproc
 8059              	.LFE177:
 8061              		.section	.text.f_readdir,"ax",%progbits
 8062              		.align	1
 8063              		.global	f_readdir
 8064              		.syntax unified
 8065              		.thumb
 8066              		.thumb_func
 8068              	f_readdir:
 8069              	.LVL890:
 8070              	.LFB178:
3352:source\fatfs/ff.c **** 	FRESULT res;
 8071              		.loc 1 3352 1 is_stmt 1 view -0
 8072              		.cfi_startproc
 8073              		@ args = 0, pretend = 0, frame = 24
 8074              		@ frame_needed = 0, uses_anonymous_args = 0
3353:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8075              		.loc 1 3353 2 view .LVU2923
3354:source\fatfs/ff.c **** 
 8076              		.loc 1 3354 2 view .LVU2924
3354:source\fatfs/ff.c **** 
 8077              		.loc 1 3354 2 view .LVU2925
3357:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8078              		.loc 1 3357 2 view .LVU2926
3352:source\fatfs/ff.c **** 	FRESULT res;
 8079              		.loc 1 3352 1 is_stmt 0 view .LVU2927
 8080 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8081              		.cfi_def_cfa_offset 20
 8082              		.cfi_offset 4, -20
 8083              		.cfi_offset 5, -16
 8084              		.cfi_offset 6, -12
 8085              		.cfi_offset 7, -8
 8086              		.cfi_offset 14, -4
 8087 0002 87B0     		sub	sp, sp, #28
 8088              		.cfi_def_cfa_offset 48
3352:source\fatfs/ff.c **** 	FRESULT res;
 8089              		.loc 1 3352 1 view .LVU2928
 8090 0004 0546     		mov	r5, r0
 8091 0006 0191     		str	r1, [sp, #4]
3357:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8092              		.loc 1 3357 8 view .LVU2929
 8093 0008 FFF7FEFF 		bl	validate
 8094              	.LVL891:
3358:source\fatfs/ff.c **** 		if (!fno) {
 8095              		.loc 1 3358 2 is_stmt 1 view .LVU2930
3358:source\fatfs/ff.c **** 		if (!fno) {
 8096              		.loc 1 3358 5 is_stmt 0 view .LVU2931
 8097 000c 0646     		mov	r6, r0
 8098 000e 80BB     		cbnz	r0, .L848
3359:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8099              		.loc 1 3359 3 is_stmt 1 view .LVU2932
3359:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8100              		.loc 1 3359 6 is_stmt 0 view .LVU2933
 8101 0010 0199     		ldr	r1, [sp, #4]
 8102 0012 29B9     		cbnz	r1, .L849
3360:source\fatfs/ff.c **** 		} else {
 8103              		.loc 1 3360 4 is_stmt 1 view .LVU2934
3360:source\fatfs/ff.c **** 		} else {
 8104              		.loc 1 3360 10 is_stmt 0 view .LVU2935
 8105 0014 2846     		mov	r0, r5
 8106              	.LVL892:
3381:source\fatfs/ff.c **** 
 8107              		.loc 1 3381 1 view .LVU2936
 8108 0016 07B0     		add	sp, sp, #28
 8109              		.cfi_remember_state
 8110              		.cfi_def_cfa_offset 20
 8111              		@ sp needed
 8112 0018 BDE8F040 		pop	{r4, r5, r6, r7, lr}
 8113              		.cfi_restore 14
 8114              		.cfi_restore 7
 8115              		.cfi_restore 6
 8116              		.cfi_restore 5
 8117              		.cfi_restore 4
 8118              		.cfi_def_cfa_offset 0
 8119              	.LVL893:
3360:source\fatfs/ff.c **** 		} else {
 8120              		.loc 1 3360 10 view .LVU2937
 8121 001c FFF7FEBF 		b	dir_sdi
 8122              	.LVL894:
 8123              	.L849:
 8124              		.cfi_restore_state
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8125              		.loc 1 3362 4 view .LVU2938
 8126 0020 4FF40070 		mov	r0, #512
 8127              	.LVL895:
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8128              		.loc 1 3362 4 view .LVU2939
 8129 0024 0191     		str	r1, [sp, #4]
 8130              	.LVL896:
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8131              		.loc 1 3362 4 is_stmt 1 view .LVU2940
 8132 0026 FFF7FEFF 		bl	ff_memalloc
 8133              	.LVL897:
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8134              		.loc 1 3362 4 view .LVU2941
 8135 002a 0746     		mov	r7, r0
 8136 002c 20B3     		cbz	r0, .L853
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8137              		.loc 1 3362 4 discriminator 2 view .LVU2942
 8138 002e 03AB     		add	r3, sp, #12
 8139 0030 C5F82002 		str	r0, [r5, #544]
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8140              		.loc 1 3362 4 discriminator 2 view .LVU2943
 8141 0034 C5F81832 		str	r3, [r5, #536]
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8142              		.loc 1 3362 17 discriminator 2 view .LVU2944
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8143              		.loc 1 3363 4 discriminator 2 view .LVU2945
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8144              		.loc 1 3363 10 is_stmt 0 discriminator 2 view .LVU2946
 8145 0038 2846     		mov	r0, r5
 8146              	.LVL898:
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8147              		.loc 1 3363 10 discriminator 2 view .LVU2947
 8148 003a FFF7FEFF 		bl	dir_read.constprop.0
 8149              	.LVL899:
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8150              		.loc 1 3364 7 discriminator 2 view .LVU2948
 8151 003e 0428     		cmp	r0, #4
 8152 0040 0199     		ldr	r1, [sp, #4]
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8153              		.loc 1 3363 10 discriminator 2 view .LVU2949
 8154 0042 0446     		mov	r4, r0
 8155              	.LVL900:
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8156              		.loc 1 3364 4 is_stmt 1 discriminator 2 view .LVU2950
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8157              		.loc 1 3364 7 is_stmt 0 discriminator 2 view .LVU2951
 8158 0044 0FD1     		bne	.L850
3365:source\fatfs/ff.c **** 				res = FR_OK;
 8159              		.loc 1 3365 5 is_stmt 1 view .LVU2952
3365:source\fatfs/ff.c **** 				res = FR_OK;
 8160              		.loc 1 3365 14 is_stmt 0 view .LVU2953
 8161 0046 C5F81062 		str	r6, [r5, #528]
3366:source\fatfs/ff.c **** 			}
 8162              		.loc 1 3366 5 is_stmt 1 view .LVU2954
 8163              	.LVL901:
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8164              		.loc 1 3368 4 view .LVU2955
 8165              	.L851:
3369:source\fatfs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8166              		.loc 1 3369 5 view .LVU2956
 8167 004a 2846     		mov	r0, r5
 8168 004c FFF7FEFF 		bl	get_fileinfo
 8169              	.LVL902:
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8170              		.loc 1 3370 5 view .LVU2957
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8171              		.loc 1 3370 11 is_stmt 0 view .LVU2958
 8172 0050 0021     		movs	r1, #0
 8173 0052 2846     		mov	r0, r5
 8174 0054 FFF7FEFF 		bl	dir_next
 8175              	.LVL903:
3371:source\fatfs/ff.c **** 					dp->sect = 0;
 8176              		.loc 1 3371 8 view .LVU2959
 8177 0058 0428     		cmp	r0, #4
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8178              		.loc 1 3370 11 view .LVU2960
 8179 005a 0446     		mov	r4, r0
 8180              	.LVL904:
3371:source\fatfs/ff.c **** 					dp->sect = 0;
 8181              		.loc 1 3371 5 is_stmt 1 view .LVU2961
3372:source\fatfs/ff.c **** 					res = FR_OK;
 8182              		.loc 1 3372 6 view .LVU2962
3372:source\fatfs/ff.c **** 					res = FR_OK;
 8183              		.loc 1 3372 15 is_stmt 0 view .LVU2963
 8184 005c 04BF     		itt	eq
 8185 005e 0024     		moveq	r4, #0
 8186 0060 C5F81042 		streq	r4, [r5, #528]
3373:source\fatfs/ff.c **** 				}
 8187              		.loc 1 3373 6 is_stmt 1 view .LVU2964
 8188              	.LVL905:
3373:source\fatfs/ff.c **** 				}
 8189              		.loc 1 3373 6 is_stmt 0 view .LVU2965
 8190 0064 01E0     		b	.L852
 8191              	.LVL906:
 8192              	.L850:
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8193              		.loc 1 3368 4 is_stmt 1 view .LVU2966
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8194              		.loc 1 3368 7 is_stmt 0 view .LVU2967
 8195 0066 0028     		cmp	r0, #0
 8196 0068 EFD0     		beq	.L851
 8197              	.LVL907:
 8198              	.L852:
3376:source\fatfs/ff.c **** 		}
 8199              		.loc 1 3376 4 is_stmt 1 view .LVU2968
 8200 006a 3846     		mov	r0, r7
 8201 006c FFF7FEFF 		bl	ff_memfree
 8202              	.LVL908:
 8203 0070 2646     		mov	r6, r4
 8204              	.LVL909:
 8205              	.L848:
3381:source\fatfs/ff.c **** 
 8206              		.loc 1 3381 1 is_stmt 0 view .LVU2969
 8207 0072 3046     		mov	r0, r6
 8208 0074 07B0     		add	sp, sp, #28
 8209              		.cfi_remember_state
 8210              		.cfi_def_cfa_offset 20
 8211              		@ sp needed
 8212 0076 F0BD     		pop	{r4, r5, r6, r7, pc}
 8213              	.LVL910:
 8214              	.L853:
 8215              		.cfi_restore_state
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8216              		.loc 1 3362 4 view .LVU2970
 8217 0078 1126     		movs	r6, #17
 8218 007a FAE7     		b	.L848
 8219              		.cfi_endproc
 8220              	.LFE178:
 8222              		.section	.text.f_stat,"ax",%progbits
 8223              		.align	1
 8224              		.global	f_stat
 8225              		.syntax unified
 8226              		.thumb
 8227              		.thumb_func
 8229              	f_stat:
 8230              	.LVL911:
 8231              	.LFB179:
3446:source\fatfs/ff.c **** 	FRESULT res;
 8232              		.loc 1 3446 1 is_stmt 1 view -0
 8233              		.cfi_startproc
 8234              		@ args = 0, pretend = 0, frame = 576
 8235              		@ frame_needed = 0, uses_anonymous_args = 0
3447:source\fatfs/ff.c **** 	DIR dj;
 8236              		.loc 1 3447 2 view .LVU2972
3448:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8237              		.loc 1 3448 2 view .LVU2973
3449:source\fatfs/ff.c **** 
 8238              		.loc 1 3449 2 view .LVU2974
3449:source\fatfs/ff.c **** 
 8239              		.loc 1 3449 2 view .LVU2975
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8240              		.loc 1 3453 2 view .LVU2976
3446:source\fatfs/ff.c **** 	FRESULT res;
 8241              		.loc 1 3446 1 is_stmt 0 view .LVU2977
 8242 0000 70B5     		push	{r4, r5, r6, lr}
 8243              		.cfi_def_cfa_offset 16
 8244              		.cfi_offset 4, -16
 8245              		.cfi_offset 5, -12
 8246              		.cfi_offset 6, -8
 8247              		.cfi_offset 14, -4
 8248 0002 ADF5107D 		sub	sp, sp, #576
 8249              		.cfi_def_cfa_offset 592
3446:source\fatfs/ff.c **** 	FRESULT res;
 8250              		.loc 1 3446 1 view .LVU2978
 8251 0006 0E46     		mov	r6, r1
 8252 0008 0190     		str	r0, [sp, #4]
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8253              		.loc 1 3453 8 view .LVU2979
 8254 000a 0022     		movs	r2, #0
 8255 000c 01A9     		add	r1, sp, #4
 8256              	.LVL912:
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8257              		.loc 1 3453 8 view .LVU2980
 8258 000e 86A8     		add	r0, sp, #536
 8259              	.LVL913:
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8260              		.loc 1 3453 8 view .LVU2981
 8261 0010 FFF7FEFF 		bl	find_volume
 8262              	.LVL914:
3454:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8263              		.loc 1 3454 2 is_stmt 1 view .LVU2982
3454:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8264              		.loc 1 3454 5 is_stmt 0 view .LVU2983
 8265 0014 0446     		mov	r4, r0
 8266 0016 C0B9     		cbnz	r0, .L855
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8267              		.loc 1 3455 3 is_stmt 1 view .LVU2984
 8268 0018 4FF40070 		mov	r0, #512
 8269              	.LVL915:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8270              		.loc 1 3455 3 is_stmt 0 view .LVU2985
 8271 001c FFF7FEFF 		bl	ff_memalloc
 8272              	.LVL916:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8273              		.loc 1 3455 3 is_stmt 1 view .LVU2986
 8274 0020 0546     		mov	r5, r0
 8275 0022 C0B1     		cbz	r0, .L857
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8276              		.loc 1 3455 3 discriminator 2 view .LVU2987
 8277 0024 8E90     		str	r0, [sp, #568]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8278              		.loc 1 3455 3 discriminator 2 view .LVU2988
 8279 0026 03AB     		add	r3, sp, #12
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8280              		.loc 1 3456 9 is_stmt 0 discriminator 2 view .LVU2989
 8281 0028 0199     		ldr	r1, [sp, #4]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8282              		.loc 1 3455 3 discriminator 2 view .LVU2990
 8283 002a 8C93     		str	r3, [sp, #560]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8284              		.loc 1 3455 15 is_stmt 1 discriminator 2 view .LVU2991
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8285              		.loc 1 3456 3 discriminator 2 view .LVU2992
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8286              		.loc 1 3456 9 is_stmt 0 discriminator 2 view .LVU2993
 8287 002c 06A8     		add	r0, sp, #24
 8288              	.LVL917:
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8289              		.loc 1 3456 9 discriminator 2 view .LVU2994
 8290 002e FFF7FEFF 		bl	follow_path
 8291              	.LVL918:
3457:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
 8292              		.loc 1 3457 3 is_stmt 1 discriminator 2 view .LVU2995
3457:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
 8293              		.loc 1 3457 6 is_stmt 0 discriminator 2 view .LVU2996
 8294 0032 0446     		mov	r4, r0
 8295 0034 30B9     		cbnz	r0, .L856
3458:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8296              		.loc 1 3458 4 is_stmt 1 view .LVU2997
3458:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8297              		.loc 1 3458 7 is_stmt 0 view .LVU2998
 8298 0036 8B9B     		ldr	r3, [sp, #556]
 8299 0038 5BB1     		cbz	r3, .L858
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8300              		.loc 1 3459 5 is_stmt 1 view .LVU2999
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8301              		.loc 1 3459 8 is_stmt 0 view .LVU3000
 8302 003a 1EB1     		cbz	r6, .L856
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8303              		.loc 1 3459 14 is_stmt 1 discriminator 1 view .LVU3001
 8304 003c 3146     		mov	r1, r6
 8305 003e 06A8     		add	r0, sp, #24
 8306              	.LVL919:
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8307              		.loc 1 3459 14 is_stmt 0 discriminator 1 view .LVU3002
 8308 0040 FFF7FEFF 		bl	get_fileinfo
 8309              	.LVL920:
 8310              	.L856:
3464:source\fatfs/ff.c **** 	}
 8311              		.loc 1 3464 3 is_stmt 1 view .LVU3003
 8312 0044 2846     		mov	r0, r5
 8313 0046 FFF7FEFF 		bl	ff_memfree
 8314              	.LVL921:
 8315              	.L855:
3468:source\fatfs/ff.c **** 
 8316              		.loc 1 3468 1 is_stmt 0 view .LVU3004
 8317 004a 2046     		mov	r0, r4
 8318 004c 0DF5107D 		add	sp, sp, #576
 8319              		.cfi_remember_state
 8320              		.cfi_def_cfa_offset 16
 8321              		@ sp needed
 8322 0050 70BD     		pop	{r4, r5, r6, pc}
 8323              	.LVL922:
 8324              	.L858:
 8325              		.cfi_restore_state
3461:source\fatfs/ff.c **** 			}
 8326              		.loc 1 3461 9 view .LVU3005
 8327 0052 0624     		movs	r4, #6
 8328 0054 F6E7     		b	.L856
 8329              	.LVL923:
 8330              	.L857:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8331              		.loc 1 3455 3 view .LVU3006
 8332 0056 1124     		movs	r4, #17
 8333 0058 F7E7     		b	.L855
 8334              		.cfi_endproc
 8335              	.LFE179:
 8337              		.section	.text.f_getfree,"ax",%progbits
 8338              		.align	1
 8339              		.global	f_getfree
 8340              		.syntax unified
 8341              		.thumb
 8342              		.thumb_func
 8344              	f_getfree:
 8345              	.LVL924:
 8346              	.LFB180:
3482:source\fatfs/ff.c **** 	FRESULT res;
 8347              		.loc 1 3482 1 is_stmt 1 view -0
 8348              		.cfi_startproc
 8349              		@ args = 0, pretend = 0, frame = 8
 8350              		@ frame_needed = 0, uses_anonymous_args = 0
3483:source\fatfs/ff.c **** 	FATFS *fs;
 8351              		.loc 1 3483 2 view .LVU3008
3484:source\fatfs/ff.c **** 	DWORD n, clst, sect, stat;
 8352              		.loc 1 3484 2 view .LVU3009
3485:source\fatfs/ff.c **** 	UINT i;
 8353              		.loc 1 3485 2 view .LVU3010
3486:source\fatfs/ff.c **** 	BYTE fat, *p;
 8354              		.loc 1 3486 2 view .LVU3011
3487:source\fatfs/ff.c **** 
 8355              		.loc 1 3487 2 view .LVU3012
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8356              		.loc 1 3491 2 view .LVU3013
3482:source\fatfs/ff.c **** 	FRESULT res;
 8357              		.loc 1 3482 1 is_stmt 0 view .LVU3014
 8358 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 8359              		.cfi_def_cfa_offset 40
 8360              		.cfi_offset 4, -32
 8361              		.cfi_offset 5, -28
 8362              		.cfi_offset 6, -24
 8363              		.cfi_offset 7, -20
 8364              		.cfi_offset 8, -16
 8365              		.cfi_offset 9, -12
 8366              		.cfi_offset 10, -8
 8367              		.cfi_offset 14, -4
3482:source\fatfs/ff.c **** 	FRESULT res;
 8368              		.loc 1 3482 1 view .LVU3015
 8369 0004 1546     		mov	r5, r2
 8370 0006 0190     		str	r0, [sp, #4]
 8371 0008 0F46     		mov	r7, r1
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8372              		.loc 1 3491 8 view .LVU3016
 8373 000a 0022     		movs	r2, #0
 8374              	.LVL925:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8375              		.loc 1 3491 8 view .LVU3017
 8376 000c 01A9     		add	r1, sp, #4
 8377              	.LVL926:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8378              		.loc 1 3491 8 view .LVU3018
 8379 000e 2846     		mov	r0, r5
 8380              	.LVL927:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8381              		.loc 1 3491 8 view .LVU3019
 8382 0010 FFF7FEFF 		bl	find_volume
 8383              	.LVL928:
3492:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8384              		.loc 1 3492 2 is_stmt 1 view .LVU3020
3493:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
 8385              		.loc 1 3493 2 view .LVU3021
3493:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
 8386              		.loc 1 3493 5 is_stmt 0 view .LVU3022
 8387 0014 0446     		mov	r4, r0
 8388 0016 38B9     		cbnz	r0, .L863
3492:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8389              		.loc 1 3492 5 view .LVU3023
 8390 0018 2D68     		ldr	r5, [r5]
 8391              	.LVL929:
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8392              		.loc 1 3495 3 is_stmt 1 view .LVU3024
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8393              		.loc 1 3495 27 is_stmt 0 view .LVU3025
 8394 001a D5E98438 		ldrd	r3, r8, [r5, #528]
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8395              		.loc 1 3495 38 view .LVU3026
 8396 001e A8F10202 		sub	r2, r8, #2
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8397              		.loc 1 3495 6 view .LVU3027
 8398 0022 9342     		cmp	r3, r2
 8399 0024 04D8     		bhi	.L864
3496:source\fatfs/ff.c **** 		} else {
 8400              		.loc 1 3496 4 is_stmt 1 view .LVU3028
3496:source\fatfs/ff.c **** 		} else {
 8401              		.loc 1 3496 11 is_stmt 0 view .LVU3029
 8402 0026 3B60     		str	r3, [r7]
 8403              	.LVL930:
 8404              	.L863:
3534:source\fatfs/ff.c **** }
 8405              		.loc 1 3534 2 is_stmt 1 view .LVU3030
3535:source\fatfs/ff.c **** 
 8406              		.loc 1 3535 1 is_stmt 0 view .LVU3031
 8407 0028 2046     		mov	r0, r4
 8408 002a 02B0     		add	sp, sp, #8
 8409              		.cfi_remember_state
 8410              		.cfi_def_cfa_offset 32
 8411              		@ sp needed
 8412 002c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 8413              	.LVL931:
 8414              	.L864:
 8415              		.cfi_restore_state
3499:source\fatfs/ff.c **** 			n = 0;
 8416              		.loc 1 3499 4 is_stmt 1 view .LVU3032
3499:source\fatfs/ff.c **** 			n = 0;
 8417              		.loc 1 3499 8 is_stmt 0 view .LVU3033
 8418 0030 95F80092 		ldrb	r9, [r5, #512]	@ zero_extendqisi2
 8419              	.LVL932:
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8420              		.loc 1 3500 4 is_stmt 1 view .LVU3034
3501:source\fatfs/ff.c **** 				clst = 2;
 8421              		.loc 1 3501 4 view .LVU3035
3501:source\fatfs/ff.c **** 				clst = 2;
 8422              		.loc 1 3501 7 is_stmt 0 view .LVU3036
 8423 0034 B9F1010F 		cmp	r9, #1
 8424 0038 1CD1     		bne	.L865
3502:source\fatfs/ff.c **** 				do {
 8425              		.loc 1 3502 10 view .LVU3037
 8426 003a 4FF00208 		mov	r8, #2
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8427              		.loc 1 3500 6 view .LVU3038
 8428 003e 0646     		mov	r6, r0
 8429              	.LVL933:
 8430              	.L868:
3503:source\fatfs/ff.c **** 					stat = get_fat(fs, clst);
 8431              		.loc 1 3503 5 is_stmt 1 view .LVU3039
3504:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8432              		.loc 1 3504 6 view .LVU3040
3504:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8433              		.loc 1 3504 13 is_stmt 0 view .LVU3041
 8434 0040 4146     		mov	r1, r8
 8435 0042 2846     		mov	r0, r5
 8436 0044 FFF7FEFF 		bl	get_fat
 8437              	.LVL934:
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8438              		.loc 1 3505 6 is_stmt 1 view .LVU3042
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8439              		.loc 1 3505 9 is_stmt 0 view .LVU3043
 8440 0048 431C     		adds	r3, r0, #1
 8441 004a 37D0     		beq	.L875
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8442              		.loc 1 3506 6 is_stmt 1 view .LVU3044
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8443              		.loc 1 3506 9 is_stmt 0 view .LVU3045
 8444 004c 0128     		cmp	r0, #1
 8445 004e 37D0     		beq	.L876
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8446              		.loc 1 3507 6 is_stmt 1 view .LVU3046
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8447              		.loc 1 3507 9 is_stmt 0 view .LVU3047
 8448 0050 00B9     		cbnz	r0, .L867
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8449              		.loc 1 3507 21 is_stmt 1 discriminator 1 view .LVU3048
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8450              		.loc 1 3507 22 is_stmt 0 discriminator 1 view .LVU3049
 8451 0052 0136     		adds	r6, r6, #1
 8452              	.LVL935:
 8453              	.L867:
3508:source\fatfs/ff.c **** 			} else {
 8454              		.loc 1 3508 13 is_stmt 1 view .LVU3050
3508:source\fatfs/ff.c **** 			} else {
 8455              		.loc 1 3508 5 is_stmt 0 view .LVU3051
 8456 0054 D5F81432 		ldr	r3, [r5, #532]
 8457 0058 08F10108 		add	r8, r8, #1
 8458              	.LVL936:
3508:source\fatfs/ff.c **** 			} else {
 8459              		.loc 1 3508 5 view .LVU3052
 8460 005c 4345     		cmp	r3, r8
 8461 005e EFD8     		bhi	.L868
 8462              	.LVL937:
 8463              	.L866:
3529:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 8464              		.loc 1 3529 4 is_stmt 1 view .LVU3053
3530:source\fatfs/ff.c **** 			*nclst = n;
 8465              		.loc 1 3530 17 is_stmt 0 view .LVU3054
 8466 0060 95F80532 		ldrb	r3, [r5, #517]	@ zero_extendqisi2
3529:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 8467              		.loc 1 3529 19 view .LVU3055
 8468 0064 C5F81062 		str	r6, [r5, #528]
3530:source\fatfs/ff.c **** 			*nclst = n;
 8469              		.loc 1 3530 4 is_stmt 1 view .LVU3056
3530:source\fatfs/ff.c **** 			*nclst = n;
 8470              		.loc 1 3530 17 is_stmt 0 view .LVU3057
 8471 0068 43F00103 		orr	r3, r3, #1
 8472 006c 85F80532 		strb	r3, [r5, #517]
3531:source\fatfs/ff.c **** 		}
 8473              		.loc 1 3531 4 is_stmt 1 view .LVU3058
3531:source\fatfs/ff.c **** 		}
 8474              		.loc 1 3531 11 is_stmt 0 view .LVU3059
 8475 0070 3E60     		str	r6, [r7]
 8476 0072 D9E7     		b	.L863
 8477              	.LVL938:
 8478              	.L865:
3510:source\fatfs/ff.c **** 				sect = fs->fatbase;
 8479              		.loc 1 3510 5 is_stmt 1 view .LVU3060
3511:source\fatfs/ff.c **** 				i = 0; p = 0;
 8480              		.loc 1 3511 5 view .LVU3061
3511:source\fatfs/ff.c **** 				i = 0; p = 0;
 8481              		.loc 1 3511 10 is_stmt 0 view .LVU3062
 8482 0074 D5F82012 		ldr	r1, [r5, #544]
 8483              	.LVL939:
3512:source\fatfs/ff.c **** 				do {
 8484              		.loc 1 3512 5 is_stmt 1 view .LVU3063
3512:source\fatfs/ff.c **** 				do {
 8485              		.loc 1 3512 12 view .LVU3064
3512:source\fatfs/ff.c **** 				do {
 8486              		.loc 1 3512 14 is_stmt 0 view .LVU3065
 8487 0078 0346     		mov	r3, r0
3512:source\fatfs/ff.c **** 				do {
 8488              		.loc 1 3512 7 view .LVU3066
 8489 007a 0246     		mov	r2, r0
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8490              		.loc 1 3500 6 view .LVU3067
 8491 007c 0646     		mov	r6, r0
 8492              	.LVL940:
 8493              	.L874:
3513:source\fatfs/ff.c **** 					if (!i) {
 8494              		.loc 1 3513 5 is_stmt 1 view .LVU3068
3514:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
 8495              		.loc 1 3514 6 view .LVU3069
3514:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
 8496              		.loc 1 3514 9 is_stmt 0 view .LVU3070
 8497 007e 4AB9     		cbnz	r2, .L869
 8498              	.LVL941:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8499              		.loc 1 3515 7 is_stmt 1 view .LVU3071
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8500              		.loc 1 3515 13 is_stmt 0 view .LVU3072
 8501 0080 2846     		mov	r0, r5
 8502 0082 01F1010A 		add	r10, r1, #1
 8503              	.LVL942:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8504              		.loc 1 3515 13 view .LVU3073
 8505 0086 FFF7FEFF 		bl	move_window
 8506              	.LVL943:
3516:source\fatfs/ff.c **** 						p = fs->win.d8;
 8507              		.loc 1 3516 7 is_stmt 1 view .LVU3074
3516:source\fatfs/ff.c **** 						p = fs->win.d8;
 8508              		.loc 1 3516 10 is_stmt 0 view .LVU3075
 8509 008a D8B9     		cbnz	r0, .L877
3517:source\fatfs/ff.c **** 						i = SS(fs);
 8510              		.loc 1 3517 7 is_stmt 1 view .LVU3076
 8511              	.LVL944:
3517:source\fatfs/ff.c **** 						i = SS(fs);
 8512              		.loc 1 3517 9 is_stmt 0 view .LVU3077
 8513 008c 2B46     		mov	r3, r5
3518:source\fatfs/ff.c **** 					}
 8514              		.loc 1 3518 7 is_stmt 1 view .LVU3078
 8515              	.LVL945:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8516              		.loc 1 3515 13 is_stmt 0 view .LVU3079
 8517 008e 5146     		mov	r1, r10
3518:source\fatfs/ff.c **** 					}
 8518              		.loc 1 3518 9 view .LVU3080
 8519 0090 4FF40072 		mov	r2, #512
 8520              	.LVL946:
 8521              	.L869:
3520:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8522              		.loc 1 3520 6 is_stmt 1 view .LVU3081
3520:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8523              		.loc 1 3520 9 is_stmt 0 view .LVU3082
 8524 0094 B9F1020F 		cmp	r9, #2
 8525 0098 08D1     		bne	.L870
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8526              		.loc 1 3521 7 is_stmt 1 view .LVU3083
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8527              		.loc 1 3521 10 is_stmt 0 view .LVU3084
 8528 009a 1888     		ldrh	r0, [r3]	@ unaligned
 8529 009c 00B9     		cbnz	r0, .L871
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8530              		.loc 1 3521 28 is_stmt 1 discriminator 1 view .LVU3085
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8531              		.loc 1 3521 29 is_stmt 0 discriminator 1 view .LVU3086
 8532 009e 0136     		adds	r6, r6, #1
 8533              	.LVL947:
 8534              	.L871:
3522:source\fatfs/ff.c **** 					} else {
 8535              		.loc 1 3522 7 is_stmt 1 view .LVU3087
3522:source\fatfs/ff.c **** 					} else {
 8536              		.loc 1 3522 9 is_stmt 0 view .LVU3088
 8537 00a0 0233     		adds	r3, r3, #2
 8538              	.LVL948:
3522:source\fatfs/ff.c **** 					} else {
 8539              		.loc 1 3522 15 is_stmt 1 view .LVU3089
3522:source\fatfs/ff.c **** 					} else {
 8540              		.loc 1 3522 17 is_stmt 0 view .LVU3090
 8541 00a2 023A     		subs	r2, r2, #2
 8542              	.LVL949:
 8543              	.L872:
3527:source\fatfs/ff.c **** 			}
 8544              		.loc 1 3527 13 is_stmt 1 view .LVU3091
3527:source\fatfs/ff.c **** 			}
 8545              		.loc 1 3527 5 is_stmt 0 view .LVU3092
 8546 00a4 B8F10108 		subs	r8, r8, #1
 8547              	.LVL950:
3527:source\fatfs/ff.c **** 			}
 8548              		.loc 1 3527 5 view .LVU3093
 8549 00a8 E9D1     		bne	.L874
3527:source\fatfs/ff.c **** 			}
 8550              		.loc 1 3527 5 view .LVU3094
 8551 00aa D9E7     		b	.L866
 8552              	.LVL951:
 8553              	.L870:
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8554              		.loc 1 3524 7 is_stmt 1 view .LVU3095
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8555              		.loc 1 3524 12 is_stmt 0 view .LVU3096
 8556 00ac 1868     		ldr	r0, [r3]	@ unaligned
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8557              		.loc 1 3524 10 view .LVU3097
 8558 00ae 30F07040 		bics	r0, r0, #-268435456
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8559              		.loc 1 3524 44 is_stmt 1 view .LVU3098
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8560              		.loc 1 3524 45 is_stmt 0 view .LVU3099
 8561 00b2 08BF     		it	eq
 8562 00b4 0136     		addeq	r6, r6, #1
 8563              	.LVL952:
3525:source\fatfs/ff.c **** 					}
 8564              		.loc 1 3525 7 is_stmt 1 view .LVU3100
3525:source\fatfs/ff.c **** 					}
 8565              		.loc 1 3525 9 is_stmt 0 view .LVU3101
 8566 00b6 0433     		adds	r3, r3, #4
 8567              	.LVL953:
3525:source\fatfs/ff.c **** 					}
 8568              		.loc 1 3525 15 is_stmt 1 view .LVU3102
3525:source\fatfs/ff.c **** 					}
 8569              		.loc 1 3525 17 is_stmt 0 view .LVU3103
 8570 00b8 043A     		subs	r2, r2, #4
 8571              	.LVL954:
3525:source\fatfs/ff.c **** 					}
 8572              		.loc 1 3525 17 view .LVU3104
 8573 00ba F3E7     		b	.L872
 8574              	.LVL955:
 8575              	.L875:
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8576              		.loc 1 3505 36 view .LVU3105
 8577 00bc 0124     		movs	r4, #1
 8578 00be CFE7     		b	.L866
 8579              	.L876:
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8580              		.loc 1 3506 27 view .LVU3106
 8581 00c0 0224     		movs	r4, #2
 8582 00c2 CDE7     		b	.L866
 8583              	.LVL956:
 8584              	.L877:
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8585              		.loc 1 3506 27 view .LVU3107
 8586 00c4 0446     		mov	r4, r0
 8587 00c6 CBE7     		b	.L866
 8588              		.cfi_endproc
 8589              	.LFE180:
 8591              		.section	.text.f_truncate,"ax",%progbits
 8592              		.align	1
 8593              		.global	f_truncate
 8594              		.syntax unified
 8595              		.thumb
 8596              		.thumb_func
 8598              	f_truncate:
 8599              	.LVL957:
 8600              	.LFB181:
3547:source\fatfs/ff.c **** 	FRESULT res;
 8601              		.loc 1 3547 1 is_stmt 1 view -0
 8602              		.cfi_startproc
 8603              		@ args = 0, pretend = 0, frame = 0
 8604              		@ frame_needed = 0, uses_anonymous_args = 0
3548:source\fatfs/ff.c **** 	DWORD ncl;
 8605              		.loc 1 3548 2 view .LVU3109
3549:source\fatfs/ff.c **** 
 8606              		.loc 1 3549 2 view .LVU3110
3552:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8607              		.loc 1 3552 2 view .LVU3111
3547:source\fatfs/ff.c **** 	FRESULT res;
 8608              		.loc 1 3547 1 is_stmt 0 view .LVU3112
 8609 0000 70B5     		push	{r4, r5, r6, lr}
 8610              		.cfi_def_cfa_offset 16
 8611              		.cfi_offset 4, -16
 8612              		.cfi_offset 5, -12
 8613              		.cfi_offset 6, -8
 8614              		.cfi_offset 14, -4
3547:source\fatfs/ff.c **** 	FRESULT res;
 8615              		.loc 1 3547 1 view .LVU3113
 8616 0002 0446     		mov	r4, r0
3552:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8617              		.loc 1 3552 8 view .LVU3114
 8618 0004 FFF7FEFF 		bl	validate
 8619              	.LVL958:
3553:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
 8620              		.loc 1 3553 2 is_stmt 1 view .LVU3115
3553:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
 8621              		.loc 1 3553 5 is_stmt 0 view .LVU3116
 8622 0008 0546     		mov	r5, r0
 8623 000a 0028     		cmp	r0, #0
 8624 000c 59D1     		bne	.L895
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8625              		.loc 1 3554 3 is_stmt 1 view .LVU3117
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8626              		.loc 1 3554 9 is_stmt 0 view .LVU3118
 8627 000e 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8628              		.loc 1 3554 6 view .LVU3119
 8629 0012 002D     		cmp	r5, #0
 8630 0014 55D1     		bne	.L895
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8631              		.loc 1 3557 4 is_stmt 1 view .LVU3120
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8632              		.loc 1 3557 12 is_stmt 0 view .LVU3121
 8633 0016 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8634              		.loc 1 3557 7 view .LVU3122
 8635 001a 9907     		lsls	r1, r3, #30
 8636 001c 30D5     		bpl	.L893
 8637              	.LVL959:
3561:source\fatfs/ff.c **** 		if (fp->fsize > fp->fptr) {
 8638              		.loc 1 3561 2 is_stmt 1 view .LVU3123
3562:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8639              		.loc 1 3562 3 view .LVU3124
3562:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8640              		.loc 1 3562 6 is_stmt 0 view .LVU3125
 8641 001e D4E98221 		ldrd	r2, r1, [r4, #520]
 8642 0022 9142     		cmp	r1, r2
 8643 0024 4DD9     		bls	.L895
3563:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 8644              		.loc 1 3563 4 is_stmt 1 view .LVU3126
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8645              		.loc 1 3564 13 is_stmt 0 view .LVU3127
 8646 0026 43F02003 		orr	r3, r3, #32
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8647              		.loc 1 3566 11 view .LVU3128
 8648 002a D4F80002 		ldr	r0, [r4, #512]
3563:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 8649              		.loc 1 3563 14 view .LVU3129
 8650 002e C4F80C22 		str	r2, [r4, #524]
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8651              		.loc 1 3564 4 is_stmt 1 view .LVU3130
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8652              		.loc 1 3564 13 is_stmt 0 view .LVU3131
 8653 0032 84F80632 		strb	r3, [r4, #518]
3565:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 8654              		.loc 1 3565 4 is_stmt 1 view .LVU3132
3565:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 8655              		.loc 1 3565 7 is_stmt 0 view .LVU3133
 8656 0036 52B9     		cbnz	r2, .L883
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8657              		.loc 1 3566 5 is_stmt 1 view .LVU3134
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8658              		.loc 1 3566 11 is_stmt 0 view .LVU3135
 8659 0038 D4F81012 		ldr	r1, [r4, #528]
 8660 003c FFF7FEFF 		bl	remove_chain
 8661              	.LVL960:
3567:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
 8662              		.loc 1 3567 5 is_stmt 1 view .LVU3136
3567:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
 8663              		.loc 1 3567 16 is_stmt 0 view .LVU3137
 8664 0040 C4F81052 		str	r5, [r4, #528]
 8665              	.L884:
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8666              		.loc 1 3579 4 is_stmt 1 view .LVU3138
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8667              		.loc 1 3579 7 is_stmt 0 view .LVU3139
 8668 0044 30B3     		cbz	r0, .L891
 8669              	.LVL961:
 8670              	.L890:
3587:source\fatfs/ff.c **** 	}
 8671              		.loc 1 3587 21 is_stmt 1 discriminator 1 view .LVU3140
3587:source\fatfs/ff.c **** 	}
 8672              		.loc 1 3587 29 is_stmt 0 discriminator 1 view .LVU3141
 8673 0046 84F80702 		strb	r0, [r4, #519]
 8674 004a 0546     		mov	r5, r0
 8675 004c 39E0     		b	.L895
 8676              	.LVL962:
 8677              	.L883:
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8678              		.loc 1 3569 5 is_stmt 1 view .LVU3142
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8679              		.loc 1 3569 11 is_stmt 0 view .LVU3143
 8680 004e D4F81412 		ldr	r1, [r4, #532]
 8681 0052 FFF7FEFF 		bl	get_fat
 8682              	.LVL963:
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8683              		.loc 1 3571 8 view .LVU3144
 8684 0056 421C     		adds	r2, r0, #1
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8685              		.loc 1 3569 11 view .LVU3145
 8686 0058 0646     		mov	r6, r0
 8687              	.LVL964:
3570:source\fatfs/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8688              		.loc 1 3570 5 is_stmt 1 view .LVU3146
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8689              		.loc 1 3571 5 view .LVU3147
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8690              		.loc 1 3571 8 is_stmt 0 view .LVU3148
 8691 005a 13D1     		bne	.L902
 8692              	.LVL965:
 8693              	.L885:
3547:source\fatfs/ff.c **** 	FRESULT res;
 8694              		.loc 1 3547 1 view .LVU3149
 8695 005c 0120     		movs	r0, #1
 8696 005e F2E7     		b	.L890
 8697              	.LVL966:
 8698              	.L887:
3574:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8699              		.loc 1 3574 6 is_stmt 1 view .LVU3150
3574:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8700              		.loc 1 3574 12 is_stmt 0 view .LVU3151
 8701 0060 D4F81412 		ldr	r1, [r4, #532]
 8702 0064 6FF07042 		mvn	r2, #-268435456
 8703 0068 FFF7FEFF 		bl	put_fat
 8704              	.LVL967:
3575:source\fatfs/ff.c **** 				}
 8705              		.loc 1 3575 6 is_stmt 1 view .LVU3152
3575:source\fatfs/ff.c **** 				}
 8706              		.loc 1 3575 9 is_stmt 0 view .LVU3153
 8707 006c 0028     		cmp	r0, #0
 8708 006e EAD1     		bne	.L890
3575:source\fatfs/ff.c **** 				}
 8709              		.loc 1 3575 24 is_stmt 1 discriminator 1 view .LVU3154
3575:source\fatfs/ff.c **** 				}
 8710              		.loc 1 3575 30 is_stmt 0 discriminator 1 view .LVU3155
 8711 0070 D4F80002 		ldr	r0, [r4, #512]
 8712              	.LVL968:
3575:source\fatfs/ff.c **** 				}
 8713              		.loc 1 3575 30 discriminator 1 view .LVU3156
 8714 0074 3146     		mov	r1, r6
 8715 0076 FFF7FEFF 		bl	remove_chain
 8716              	.LVL969:
3575:source\fatfs/ff.c **** 				}
 8717              		.loc 1 3575 30 discriminator 1 view .LVU3157
 8718 007a E3E7     		b	.L884
 8719              	.LVL970:
 8720              	.L894:
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8721              		.loc 1 3572 23 view .LVU3158
 8722 007c 0220     		movs	r0, #2
 8723              	.LVL971:
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8724              		.loc 1 3572 23 view .LVU3159
 8725 007e E2E7     		b	.L890
 8726              	.LVL972:
 8727              	.L893:
3558:source\fatfs/ff.c **** 		}
 8728              		.loc 1 3558 9 view .LVU3160
 8729 0080 0725     		movs	r5, #7
 8730              	.LVL973:
3590:source\fatfs/ff.c **** }
 8731              		.loc 1 3590 2 is_stmt 1 view .LVU3161
 8732 0082 1EE0     		b	.L895
 8733              	.LVL974:
 8734              	.L902:
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8735              		.loc 1 3572 5 view .LVU3162
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8736              		.loc 1 3572 8 is_stmt 0 view .LVU3163
 8737 0084 0128     		cmp	r0, #1
 8738 0086 F9D0     		beq	.L894
 8739              	.LVL975:
3573:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8740              		.loc 1 3573 33 discriminator 1 view .LVU3164
 8741 0088 D4F80002 		ldr	r0, [r4, #512]
 8742              	.LVL976:
3573:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8743              		.loc 1 3573 22 discriminator 1 view .LVU3165
 8744 008c D0F81432 		ldr	r3, [r0, #532]
 8745 0090 B342     		cmp	r3, r6
 8746 0092 E5D8     		bhi	.L887
 8747              	.LVL977:
 8748              	.L891:
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8749              		.loc 1 3579 21 view .LVU3166
 8750 0094 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 8751 0098 5B06     		lsls	r3, r3, #25
 8752 009a 12D5     		bpl	.L895
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8753              		.loc 1 3580 5 is_stmt 1 view .LVU3167
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8754              		.loc 1 3580 9 is_stmt 0 view .LVU3168
 8755 009c D4F80002 		ldr	r0, [r4, #512]
 8756 00a0 D4F81822 		ldr	r2, [r4, #536]
 8757 00a4 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 8758 00a8 0123     		movs	r3, #1
 8759 00aa 2146     		mov	r1, r4
 8760 00ac FFF7FEFF 		bl	disk_write
 8761              	.LVL978:
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8762              		.loc 1 3580 8 view .LVU3169
 8763 00b0 0546     		mov	r5, r0
 8764 00b2 0028     		cmp	r0, #0
 8765 00b4 D2D1     		bne	.L885
3583:source\fatfs/ff.c **** 			}
 8766              		.loc 1 3583 6 is_stmt 1 view .LVU3170
3583:source\fatfs/ff.c **** 			}
 8767              		.loc 1 3583 15 is_stmt 0 view .LVU3171
 8768 00b6 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 8769 00ba 23F04003 		bic	r3, r3, #64
 8770 00be 84F80632 		strb	r3, [r4, #518]
 8771              	.LVL979:
3587:source\fatfs/ff.c **** 	}
 8772              		.loc 1 3587 3 is_stmt 1 view .LVU3172
 8773              	.L895:
3591:source\fatfs/ff.c **** 
 8774              		.loc 1 3591 1 is_stmt 0 view .LVU3173
 8775 00c2 2846     		mov	r0, r5
 8776 00c4 70BD     		pop	{r4, r5, r6, pc}
3591:source\fatfs/ff.c **** 
 8777              		.loc 1 3591 1 view .LVU3174
 8778              		.cfi_endproc
 8779              	.LFE181:
 8781              		.section	.text.f_unlink,"ax",%progbits
 8782              		.align	1
 8783              		.global	f_unlink
 8784              		.syntax unified
 8785              		.thumb
 8786              		.thumb_func
 8788              	f_unlink:
 8789              	.LVL980:
 8790              	.LFB182:
3603:source\fatfs/ff.c **** 	FRESULT res;
 8791              		.loc 1 3603 1 is_stmt 1 view -0
 8792              		.cfi_startproc
 8793              		@ args = 0, pretend = 0, frame = 1128
 8794              		@ frame_needed = 0, uses_anonymous_args = 0
3604:source\fatfs/ff.c **** 	DIR dj, sdj;
 8795              		.loc 1 3604 2 view .LVU3176
3605:source\fatfs/ff.c **** 	BYTE *dir;
 8796              		.loc 1 3605 2 view .LVU3177
3606:source\fatfs/ff.c **** 	DWORD dclst = 0;
 8797              		.loc 1 3606 2 view .LVU3178
3607:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8798              		.loc 1 3607 2 view .LVU3179
3608:source\fatfs/ff.c **** 
 8799              		.loc 1 3608 2 view .LVU3180
3608:source\fatfs/ff.c **** 
 8800              		.loc 1 3608 2 view .LVU3181
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8801              		.loc 1 3612 2 view .LVU3182
3603:source\fatfs/ff.c **** 	FRESULT res;
 8802              		.loc 1 3603 1 is_stmt 0 view .LVU3183
 8803 0000 70B5     		push	{r4, r5, r6, lr}
 8804              		.cfi_def_cfa_offset 16
 8805              		.cfi_offset 4, -16
 8806              		.cfi_offset 5, -12
 8807              		.cfi_offset 6, -8
 8808              		.cfi_offset 14, -4
 8809 0002 ADF58D6D 		sub	sp, sp, #1128
 8810              		.cfi_def_cfa_offset 1144
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8811              		.loc 1 3612 8 view .LVU3184
 8812 0006 0122     		movs	r2, #1
3603:source\fatfs/ff.c **** 	FRESULT res;
 8813              		.loc 1 3603 1 view .LVU3185
 8814 0008 0190     		str	r0, [sp, #4]
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8815              		.loc 1 3612 8 view .LVU3186
 8816 000a 01A9     		add	r1, sp, #4
 8817 000c 86A8     		add	r0, sp, #536
 8818              	.LVL981:
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8819              		.loc 1 3612 8 view .LVU3187
 8820 000e FFF7FEFF 		bl	find_volume
 8821              	.LVL982:
3613:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8822              		.loc 1 3613 2 is_stmt 1 view .LVU3188
3613:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8823              		.loc 1 3613 5 is_stmt 0 view .LVU3189
 8824 0012 0446     		mov	r4, r0
 8825 0014 F8B9     		cbnz	r0, .L905
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8826              		.loc 1 3614 3 is_stmt 1 view .LVU3190
 8827 0016 4FF40070 		mov	r0, #512
 8828              	.LVL983:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8829              		.loc 1 3614 3 is_stmt 0 view .LVU3191
 8830 001a FFF7FEFF 		bl	ff_memalloc
 8831              	.LVL984:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8832              		.loc 1 3614 3 is_stmt 1 view .LVU3192
 8833 001e 0546     		mov	r5, r0
 8834 0020 0028     		cmp	r0, #0
 8835 0022 52D0     		beq	.L912
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8836              		.loc 1 3614 3 discriminator 2 view .LVU3193
 8837 0024 8E90     		str	r0, [sp, #568]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8838              		.loc 1 3614 3 discriminator 2 view .LVU3194
 8839 0026 03AB     		add	r3, sp, #12
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8840              		.loc 1 3615 9 is_stmt 0 discriminator 2 view .LVU3195
 8841 0028 0199     		ldr	r1, [sp, #4]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8842              		.loc 1 3614 3 discriminator 2 view .LVU3196
 8843 002a 8C93     		str	r3, [sp, #560]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8844              		.loc 1 3614 15 is_stmt 1 discriminator 2 view .LVU3197
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8845              		.loc 1 3615 3 discriminator 2 view .LVU3198
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8846              		.loc 1 3615 9 is_stmt 0 discriminator 2 view .LVU3199
 8847 002c 06A8     		add	r0, sp, #24
 8848              	.LVL985:
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8849              		.loc 1 3615 9 discriminator 2 view .LVU3200
 8850 002e FFF7FEFF 		bl	follow_path
 8851              	.LVL986:
3616:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8852              		.loc 1 3616 3 is_stmt 1 discriminator 2 view .LVU3201
3619:source\fatfs/ff.c **** #endif
 8853              		.loc 1 3619 3 discriminator 2 view .LVU3202
3619:source\fatfs/ff.c **** #endif
 8854              		.loc 1 3619 6 is_stmt 0 discriminator 2 view .LVU3203
 8855 0032 0446     		mov	r4, r0
 8856 0034 60B9     		cbnz	r0, .L906
3619:source\fatfs/ff.c **** #endif
 8857              		.loc 1 3619 21 is_stmt 1 discriminator 1 view .LVU3204
3619:source\fatfs/ff.c **** #endif
 8858              		.loc 1 3619 27 is_stmt 0 discriminator 1 view .LVU3205
 8859 0036 0221     		movs	r1, #2
 8860 0038 06A8     		add	r0, sp, #24
 8861              	.LVL987:
3619:source\fatfs/ff.c **** #endif
 8862              		.loc 1 3619 27 discriminator 1 view .LVU3206
 8863 003a FFF7FEFF 		bl	chk_lock
 8864              	.LVL988:
3621:source\fatfs/ff.c **** 			dir = dj.dir;
 8865              		.loc 1 3621 3 is_stmt 1 discriminator 1 view .LVU3207
3621:source\fatfs/ff.c **** 			dir = dj.dir;
 8866              		.loc 1 3621 6 is_stmt 0 discriminator 1 view .LVU3208
 8867 003e 0446     		mov	r4, r0
 8868 0040 30B9     		cbnz	r0, .L906
3622:source\fatfs/ff.c **** 			if (!dir) {
 8869              		.loc 1 3622 4 is_stmt 1 view .LVU3209
3622:source\fatfs/ff.c **** 			if (!dir) {
 8870              		.loc 1 3622 8 is_stmt 0 view .LVU3210
 8871 0042 8B99     		ldr	r1, [sp, #556]
 8872              	.LVL989:
3623:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8873              		.loc 1 3623 4 is_stmt 1 view .LVU3211
3623:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8874              		.loc 1 3623 7 is_stmt 0 view .LVU3212
 8875 0044 0029     		cmp	r1, #0
 8876 0046 3ED0     		beq	.L913
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8877              		.loc 1 3626 5 is_stmt 1 view .LVU3213
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8878              		.loc 1 3626 12 is_stmt 0 view .LVU3214
 8879 0048 CC7A     		ldrb	r4, [r1, #11]	@ zero_extendqisi2
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8880              		.loc 1 3626 8 view .LVU3215
 8881 004a E207     		lsls	r2, r4, #31
 8882 004c 07D5     		bpl	.L907
 8883              	.LVL990:
 8884              	.L909:
3627:source\fatfs/ff.c **** 			}
 8885              		.loc 1 3627 10 view .LVU3216
 8886 004e 0724     		movs	r4, #7
 8887              	.LVL991:
 8888              	.L906:
3656:source\fatfs/ff.c **** 	}
 8889              		.loc 1 3656 3 is_stmt 1 view .LVU3217
 8890 0050 2846     		mov	r0, r5
 8891 0052 FFF7FEFF 		bl	ff_memfree
 8892              	.LVL992:
 8893              	.L905:
3660:source\fatfs/ff.c **** 
 8894              		.loc 1 3660 1 is_stmt 0 view .LVU3218
 8895 0056 2046     		mov	r0, r4
 8896 0058 0DF58D6D 		add	sp, sp, #1128
 8897              		.cfi_remember_state
 8898              		.cfi_def_cfa_offset 16
 8899              		@ sp needed
 8900 005c 70BD     		pop	{r4, r5, r6, pc}
 8901              	.LVL993:
 8902              	.L907:
 8903              		.cfi_restore_state
3629:source\fatfs/ff.c **** 				dclst = ld_clust(dj.fs, dir);
 8904              		.loc 1 3629 4 is_stmt 1 view .LVU3219
3630:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8905              		.loc 1 3630 5 view .LVU3220
3630:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8906              		.loc 1 3630 13 is_stmt 0 view .LVU3221
 8907 005e 869B     		ldr	r3, [sp, #536]
 8908 0060 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 8909 0064 FFF7FEFF 		bl	ld_clust.isra.0
 8910              	.LVL994:
3631:source\fatfs/ff.c **** #if _FS_RPATH
 8911              		.loc 1 3631 5 is_stmt 1 view .LVU3222
3631:source\fatfs/ff.c **** #if _FS_RPATH
 8912              		.loc 1 3631 8 is_stmt 0 view .LVU3223
 8913 0068 0646     		mov	r6, r0
 8914 006a C0B1     		cbz	r0, .L908
3631:source\fatfs/ff.c **** #if _FS_RPATH
 8915              		.loc 1 3631 15 discriminator 1 view .LVU3224
 8916 006c E306     		lsls	r3, r4, #27
 8917 006e 16D5     		bpl	.L908
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 8918              		.loc 1 3638 7 is_stmt 1 view .LVU3225
 8919 0070 4FF40A72 		mov	r2, #552
 8920 0074 06A9     		add	r1, sp, #24
 8921              	.LVL995:
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 8922              		.loc 1 3638 7 is_stmt 0 view .LVU3226
 8923 0076 90A8     		add	r0, sp, #576
 8924              	.LVL996:
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 8925              		.loc 1 3638 7 view .LVU3227
 8926 0078 FFF7FEFF 		bl	mem_cpy
 8927              	.LVL997:
3639:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
 8928              		.loc 1 3639 7 is_stmt 1 view .LVU3228
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 8929              		.loc 1 3640 13 is_stmt 0 view .LVU3229
 8930 007c 0221     		movs	r1, #2
 8931 007e 90A8     		add	r0, sp, #576
3639:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
 8932              		.loc 1 3639 18 view .LVU3230
 8933 0080 CDF84864 		str	r6, [sp, #1096]
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 8934              		.loc 1 3640 7 is_stmt 1 view .LVU3231
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 8935              		.loc 1 3640 13 is_stmt 0 view .LVU3232
 8936 0084 FFF7FEFF 		bl	dir_sdi
 8937              	.LVL998:
3641:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8938              		.loc 1 3641 7 is_stmt 1 view .LVU3233
3641:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8939              		.loc 1 3641 10 is_stmt 0 view .LVU3234
 8940 0088 0446     		mov	r4, r0
 8941 008a 0028     		cmp	r0, #0
 8942 008c E0D1     		bne	.L906
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8943              		.loc 1 3642 8 is_stmt 1 view .LVU3235
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8944              		.loc 1 3642 14 is_stmt 0 view .LVU3236
 8945 008e 90A8     		add	r0, sp, #576
 8946              	.LVL999:
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8947              		.loc 1 3642 14 view .LVU3237
 8948 0090 FFF7FEFF 		bl	dir_read.constprop.0
 8949              	.LVL1000:
3643:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8950              		.loc 1 3643 8 is_stmt 1 view .LVU3238
3643:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8951              		.loc 1 3643 11 is_stmt 0 view .LVU3239
 8952 0094 0446     		mov	r4, r0
 8953 0096 0028     		cmp	r0, #0
 8954 0098 D9D0     		beq	.L909
3644:source\fatfs/ff.c **** 						}
 8955              		.loc 1 3644 8 is_stmt 1 view .LVU3240
3644:source\fatfs/ff.c **** 						}
 8956              		.loc 1 3644 11 is_stmt 0 view .LVU3241
 8957 009a 0428     		cmp	r0, #4
 8958 009c D8D1     		bne	.L906
 8959              	.LVL1001:
 8960              	.L908:
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8961              		.loc 1 3650 5 is_stmt 1 view .LVU3242
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8962              		.loc 1 3650 11 is_stmt 0 view .LVU3243
 8963 009e 06A8     		add	r0, sp, #24
 8964 00a0 FFF7FEFF 		bl	dir_remove
 8965              	.LVL1002:
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 8966              		.loc 1 3651 5 is_stmt 1 view .LVU3244
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 8967              		.loc 1 3651 8 is_stmt 0 view .LVU3245
 8968 00a4 0446     		mov	r4, r0
 8969 00a6 0028     		cmp	r0, #0
 8970 00a8 D2D1     		bne	.L906
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 8971              		.loc 1 3651 22 discriminator 1 view .LVU3246
 8972 00aa 26B9     		cbnz	r6, .L910
 8973              	.L911:
 8974              	.LVL1003:
3653:source\fatfs/ff.c **** 			}
 8975              		.loc 1 3653 23 is_stmt 1 view .LVU3247
3653:source\fatfs/ff.c **** 			}
 8976              		.loc 1 3653 29 is_stmt 0 view .LVU3248
 8977 00ac 8698     		ldr	r0, [sp, #536]
 8978 00ae FFF7FEFF 		bl	sync_fs
 8979              	.LVL1004:
 8980 00b2 0446     		mov	r4, r0
 8981              	.LVL1005:
3653:source\fatfs/ff.c **** 			}
 8982              		.loc 1 3653 29 view .LVU3249
 8983 00b4 CCE7     		b	.L906
 8984              	.LVL1006:
 8985              	.L910:
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 8986              		.loc 1 3652 6 is_stmt 1 view .LVU3250
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 8987              		.loc 1 3652 12 is_stmt 0 view .LVU3251
 8988 00b6 8698     		ldr	r0, [sp, #536]
 8989              	.LVL1007:
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 8990              		.loc 1 3652 12 view .LVU3252
 8991 00b8 3146     		mov	r1, r6
 8992 00ba FFF7FEFF 		bl	remove_chain
 8993              	.LVL1008:
3653:source\fatfs/ff.c **** 			}
 8994              		.loc 1 3653 5 is_stmt 1 view .LVU3253
3653:source\fatfs/ff.c **** 			}
 8995              		.loc 1 3653 8 is_stmt 0 view .LVU3254
 8996 00be 0446     		mov	r4, r0
 8997 00c0 0028     		cmp	r0, #0
 8998 00c2 C5D1     		bne	.L906
 8999 00c4 F2E7     		b	.L911
 9000              	.LVL1009:
 9001              	.L913:
3624:source\fatfs/ff.c **** 			} else {
 9002              		.loc 1 3624 9 view .LVU3255
 9003 00c6 0624     		movs	r4, #6
 9004 00c8 C2E7     		b	.L906
 9005              	.LVL1010:
 9006              	.L912:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9007              		.loc 1 3614 3 view .LVU3256
 9008 00ca 1124     		movs	r4, #17
 9009 00cc C3E7     		b	.L905
 9010              		.cfi_endproc
 9011              	.LFE182:
 9013              		.section	.text.f_mkdir,"ax",%progbits
 9014              		.align	1
 9015              		.global	f_mkdir
 9016              		.syntax unified
 9017              		.thumb
 9018              		.thumb_func
 9020              	f_mkdir:
 9021              	.LVL1011:
 9022              	.LFB183:
3672:source\fatfs/ff.c **** 	FRESULT res;
 9023              		.loc 1 3672 1 is_stmt 1 view -0
 9024              		.cfi_startproc
 9025              		@ args = 0, pretend = 0, frame = 600
 9026              		@ frame_needed = 0, uses_anonymous_args = 0
3673:source\fatfs/ff.c **** 	DIR dj;
 9027              		.loc 1 3673 2 view .LVU3258
3674:source\fatfs/ff.c **** 	BYTE *dir, n;
 9028              		.loc 1 3674 2 view .LVU3259
3675:source\fatfs/ff.c **** 	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 9029              		.loc 1 3675 2 view .LVU3260
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9030              		.loc 1 3676 2 view .LVU3261
3672:source\fatfs/ff.c **** 	FRESULT res;
 9031              		.loc 1 3672 1 is_stmt 0 view .LVU3262
 9032 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9033              		.cfi_def_cfa_offset 36
 9034              		.cfi_offset 4, -36
 9035              		.cfi_offset 5, -32
 9036              		.cfi_offset 6, -28
 9037              		.cfi_offset 7, -24
 9038              		.cfi_offset 8, -20
 9039              		.cfi_offset 9, -16
 9040              		.cfi_offset 10, -12
 9041              		.cfi_offset 11, -8
 9042              		.cfi_offset 14, -4
 9043 0004 ADF5177D 		sub	sp, sp, #604
 9044              		.cfi_def_cfa_offset 640
3672:source\fatfs/ff.c **** 	FRESULT res;
 9045              		.loc 1 3672 1 view .LVU3263
 9046 0008 0790     		str	r0, [sp, #28]
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9047              		.loc 1 3676 28 view .LVU3264
 9048 000a FFF7FEFF 		bl	get_fattime
 9049              	.LVL1012:
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9050              		.loc 1 3681 8 view .LVU3265
 9051 000e 0122     		movs	r2, #1
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9052              		.loc 1 3676 28 view .LVU3266
 9053 0010 0746     		mov	r7, r0
 9054              	.LVL1013:
3677:source\fatfs/ff.c **** 
 9055              		.loc 1 3677 2 is_stmt 1 view .LVU3267
3677:source\fatfs/ff.c **** 
 9056              		.loc 1 3677 2 view .LVU3268
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9057              		.loc 1 3681 2 view .LVU3269
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9058              		.loc 1 3681 8 is_stmt 0 view .LVU3270
 9059 0012 07A9     		add	r1, sp, #28
 9060 0014 8CA8     		add	r0, sp, #560
 9061              	.LVL1014:
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9062              		.loc 1 3681 8 view .LVU3271
 9063 0016 FFF7FEFF 		bl	find_volume
 9064              	.LVL1015:
 9065 001a 0446     		mov	r4, r0
 9066 001c 0546     		mov	r5, r0
 9067              	.LVL1016:
3682:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9068              		.loc 1 3682 2 is_stmt 1 view .LVU3272
3682:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9069              		.loc 1 3682 5 is_stmt 0 view .LVU3273
 9070 001e 0028     		cmp	r0, #0
 9071 0020 40F0C780 		bne	.L942
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9072              		.loc 1 3683 3 is_stmt 1 view .LVU3274
 9073 0024 4FF40070 		mov	r0, #512
 9074              	.LVL1017:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9075              		.loc 1 3683 3 is_stmt 0 view .LVU3275
 9076 0028 FFF7FEFF 		bl	ff_memalloc
 9077              	.LVL1018:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9078              		.loc 1 3683 3 is_stmt 1 view .LVU3276
 9079 002c 8046     		mov	r8, r0
 9080 002e 0028     		cmp	r0, #0
 9081 0030 00F0CA80 		beq	.L937
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9082              		.loc 1 3683 3 discriminator 2 view .LVU3277
 9083 0034 9490     		str	r0, [sp, #592]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9084              		.loc 1 3683 3 discriminator 2 view .LVU3278
 9085 0036 09AB     		add	r3, sp, #36
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9086              		.loc 1 3684 9 is_stmt 0 discriminator 2 view .LVU3279
 9087 0038 0799     		ldr	r1, [sp, #28]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9088              		.loc 1 3683 3 discriminator 2 view .LVU3280
 9089 003a 9293     		str	r3, [sp, #584]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9090              		.loc 1 3683 15 is_stmt 1 discriminator 2 view .LVU3281
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9091              		.loc 1 3684 3 discriminator 2 view .LVU3282
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9092              		.loc 1 3684 9 is_stmt 0 discriminator 2 view .LVU3283
 9093 003c 0CA8     		add	r0, sp, #48
 9094              	.LVL1019:
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9095              		.loc 1 3684 9 discriminator 2 view .LVU3284
 9096 003e FFF7FEFF 		bl	follow_path
 9097              	.LVL1020:
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9098              		.loc 1 3685 3 is_stmt 1 discriminator 2 view .LVU3285
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9099              		.loc 1 3685 6 is_stmt 0 discriminator 2 view .LVU3286
 9100 0042 0446     		mov	r4, r0
 9101 0044 0028     		cmp	r0, #0
 9102 0046 00F0BD80 		beq	.L938
3686:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9103              		.loc 1 3686 3 is_stmt 1 view .LVU3287
3688:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 9104              		.loc 1 3688 3 view .LVU3288
3688:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 9105              		.loc 1 3688 6 is_stmt 0 view .LVU3289
 9106 004a 0428     		cmp	r0, #4
 9107 004c 40F0AE80 		bne	.L928
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9108              		.loc 1 3689 4 is_stmt 1 view .LVU3290
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9109              		.loc 1 3689 10 is_stmt 0 view .LVU3291
 9110 0050 8C98     		ldr	r0, [sp, #560]
 9111              	.LVL1021:
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9112              		.loc 1 3689 10 view .LVU3292
 9113 0052 2946     		mov	r1, r5
 9114 0054 FFF7FEFF 		bl	create_chain
 9115              	.LVL1022:
3690:source\fatfs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 9116              		.loc 1 3690 4 is_stmt 1 view .LVU3293
3691:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9117              		.loc 1 3691 4 view .LVU3294
3691:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9118              		.loc 1 3691 7 is_stmt 0 view .LVU3295
 9119 0058 0646     		mov	r6, r0
 9120 005a 0028     		cmp	r0, #0
 9121 005c 00F0A180 		beq	.L939
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9122              		.loc 1 3692 4 is_stmt 1 view .LVU3296
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9123              		.loc 1 3692 7 is_stmt 0 view .LVU3297
 9124 0060 012E     		cmp	r6, #1
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9125              		.loc 1 3695 11 view .LVU3298
 9126 0062 8C98     		ldr	r0, [sp, #560]
 9127              	.LVL1023:
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9128              		.loc 1 3692 7 view .LVU3299
 9129 0064 00F0AA80 		beq	.L940
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9130              		.loc 1 3693 4 is_stmt 1 view .LVU3300
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9131              		.loc 1 3693 7 is_stmt 0 view .LVU3301
 9132 0068 731C     		adds	r3, r6, #1
 9133 006a 00F0A980 		beq	.L941
3694:source\fatfs/ff.c **** 				res = sync_window(dj.fs);
 9134              		.loc 1 3694 4 is_stmt 1 view .LVU3302
 9135              	.LVL1024:
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9136              		.loc 1 3695 5 view .LVU3303
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9137              		.loc 1 3695 11 is_stmt 0 view .LVU3304
 9138 006e FFF7FEFF 		bl	sync_window
 9139              	.LVL1025:
3696:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 9140              		.loc 1 3696 4 is_stmt 1 view .LVU3305
3696:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 9141              		.loc 1 3696 7 is_stmt 0 view .LVU3306
 9142 0072 0446     		mov	r4, r0
 9143 0074 0028     		cmp	r0, #0
 9144 0076 40F09580 		bne	.L929
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9145              		.loc 1 3697 5 is_stmt 1 view .LVU3307
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9146              		.loc 1 3697 11 is_stmt 0 view .LVU3308
 9147 007a 8C9D     		ldr	r5, [sp, #560]
 9148 007c 3146     		mov	r1, r6
 9149 007e 2846     		mov	r0, r5
 9150              	.LVL1026:
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9151              		.loc 1 3697 11 view .LVU3309
 9152 0080 FFF7FEFF 		bl	clust2sect
 9153              	.LVL1027:
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9154              		.loc 1 3699 5 view .LVU3310
 9155 0084 4FF40072 		mov	r2, #512
 9156 0088 2146     		mov	r1, r4
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9157              		.loc 1 3697 11 view .LVU3311
 9158 008a 0590     		str	r0, [sp, #20]
 9159              	.LVL1028:
3698:source\fatfs/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 9160              		.loc 1 3698 5 is_stmt 1 view .LVU3312
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9161              		.loc 1 3699 5 view .LVU3313
 9162 008c 2846     		mov	r0, r5
 9163              	.LVL1029:
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9164              		.loc 1 3699 5 is_stmt 0 view .LVU3314
 9165 008e FFF7FEFF 		bl	mem_set
 9166              	.LVL1030:
3700:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
 9167              		.loc 1 3700 5 is_stmt 1 view .LVU3315
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9168              		.loc 1 3703 5 is_stmt 0 view .LVU3316
 9169 0092 C7F30723 		ubfx	r3, r7, #8, #8
3700:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
 9170              		.loc 1 3700 5 view .LVU3317
 9171 0096 2021     		movs	r1, #32
 9172 0098 0B22     		movs	r2, #11
 9173 009a 2846     		mov	r0, r5
 9174 009c FFF7FEFF 		bl	mem_set
 9175              	.LVL1031:
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9176              		.loc 1 3701 5 is_stmt 1 view .LVU3318
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9177              		.loc 1 3703 5 is_stmt 0 view .LVU3319
 9178 00a0 0093     		str	r3, [sp]
 9179 00a2 EB75     		strb	r3, [r5, #23]
 9180 00a4 C7F30743 		ubfx	r3, r7, #16, #8
 9181 00a8 0193     		str	r3, [sp, #4]
 9182 00aa 2B76     		strb	r3, [r5, #24]
 9183 00ac 3B0E     		lsrs	r3, r7, #24
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9184              		.loc 1 3702 19 view .LVU3320
 9185 00ae 1022     		movs	r2, #16
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9186              		.loc 1 3703 5 view .LVU3321
 9187 00b0 0293     		str	r3, [sp, #8]
 9188 00b2 6B76     		strb	r3, [r5, #25]
 9189              	.LBB149:
 9190              	.LBB150:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9191              		.loc 1 1330 2 view .LVU3322
 9192 00b4 F3B2     		uxtb	r3, r6
 9193              	.LBE150:
 9194              	.LBE149:
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9195              		.loc 1 3701 19 view .LVU3323
 9196 00b6 2E24     		movs	r4, #46
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9197              		.loc 1 3702 19 view .LVU3324
 9198 00b8 EA72     		strb	r2, [r5, #11]
 9199              	.LBB157:
 9200              	.LBB151:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9201              		.loc 1 1330 2 view .LVU3325
 9202 00ba 0393     		str	r3, [sp, #12]
 9203              	.LBE151:
 9204              	.LBE157:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9205              		.loc 1 3705 5 view .LVU3326
 9206 00bc 0A46     		mov	r2, r1
 9207              	.LBB158:
 9208              	.LBB152:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9209              		.loc 1 1330 2 view .LVU3327
 9210 00be AB76     		strb	r3, [r5, #26]
 9211              	.LBE152:
 9212              	.LBE158:
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9213              		.loc 1 3703 5 view .LVU3328
 9214 00c0 5FFA87FB 		uxtb	fp, r7
 9215              	.LBB159:
 9216              	.LBB153:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9217              		.loc 1 1330 2 view .LVU3329
 9218 00c4 C6F30723 		ubfx	r3, r6, #8, #8
1331:source\fatfs/ff.c **** }
 9219              		.loc 1 1331 2 view .LVU3330
 9220 00c8 C6F30749 		ubfx	r9, r6, #16, #8
 9221 00cc 4FEA166A 		lsr	r10, r6, #24
 9222              	.LBE153:
 9223              	.LBE159:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9224              		.loc 1 3705 5 view .LVU3331
 9225 00d0 A818     		adds	r0, r5, r2
 9226              	.LBB160:
 9227              	.LBB154:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9228              		.loc 1 1330 2 view .LVU3332
 9229 00d2 EB76     		strb	r3, [r5, #27]
 9230              	.LBE154:
 9231              	.LBE160:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9232              		.loc 1 3705 5 view .LVU3333
 9233 00d4 2946     		mov	r1, r5
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9234              		.loc 1 3701 19 view .LVU3334
 9235 00d6 2C70     		strb	r4, [r5]
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9236              		.loc 1 3702 5 is_stmt 1 view .LVU3335
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9237              		.loc 1 3703 5 view .LVU3336
 9238 00d8 85F816B0 		strb	fp, [r5, #22]
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9239              		.loc 1 3703 5 view .LVU3337
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9240              		.loc 1 3703 5 view .LVU3338
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9241              		.loc 1 3703 5 view .LVU3339
3704:source\fatfs/ff.c **** 				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 9242              		.loc 1 3704 5 view .LVU3340
 9243              	.LVL1032:
 9244              	.LBB161:
 9245              	.LBI149:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9246              		.loc 1 1325 6 view .LVU3341
 9247              	.LBB155:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9248              		.loc 1 1330 2 view .LVU3342
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9249              		.loc 1 1330 2 view .LVU3343
1331:source\fatfs/ff.c **** }
 9250              		.loc 1 1331 2 view .LVU3344
 9251 00dc 85F81490 		strb	r9, [r5, #20]
1331:source\fatfs/ff.c **** }
 9252              		.loc 1 1331 2 view .LVU3345
 9253 00e0 85F815A0 		strb	r10, [r5, #21]
 9254              	.LVL1033:
1331:source\fatfs/ff.c **** }
 9255              		.loc 1 1331 2 is_stmt 0 view .LVU3346
 9256              	.LBE155:
 9257              	.LBE161:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9258              		.loc 1 3705 5 is_stmt 1 view .LVU3347
 9259              	.LBB162:
 9260              	.LBB156:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9261              		.loc 1 1330 2 is_stmt 0 view .LVU3348
 9262 00e4 0493     		str	r3, [sp, #16]
 9263              	.LBE156:
 9264              	.LBE162:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9265              		.loc 1 3705 5 view .LVU3349
 9266 00e6 FFF7FEFF 		bl	mem_cpy
 9267              	.LVL1034:
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9268              		.loc 1 3706 5 is_stmt 1 view .LVU3350
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9269              		.loc 1 3706 22 is_stmt 0 view .LVU3351
 9270 00ea 85F82140 		strb	r4, [r5, #33]
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9271              		.loc 1 3706 29 is_stmt 1 view .LVU3352
3707:source\fatfs/ff.c **** 					pcl = 0;
 9272              		.loc 1 3707 11 is_stmt 0 view .LVU3353
 9273 00ee 8C99     		ldr	r1, [sp, #560]
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9274              		.loc 1 3706 33 view .LVU3354
 9275 00f0 8E9A     		ldr	r2, [sp, #568]
 9276              	.LVL1035:
3707:source\fatfs/ff.c **** 					pcl = 0;
 9277              		.loc 1 3707 5 is_stmt 1 view .LVU3355
3707:source\fatfs/ff.c **** 					pcl = 0;
 9278              		.loc 1 3707 8 is_stmt 0 view .LVU3356
 9279 00f2 91F80002 		ldrb	r0, [r1, #512]	@ zero_extendqisi2
 9280 00f6 059B     		ldr	r3, [sp, #20]
 9281 00f8 0328     		cmp	r0, #3
 9282 00fa 04D1     		bne	.L931
3707:source\fatfs/ff.c **** 					pcl = 0;
 9283              		.loc 1 3707 36 discriminator 1 view .LVU3357
 9284 00fc D1F82412 		ldr	r1, [r1, #548]
3708:source\fatfs/ff.c **** 				st_clust(dir + SZ_DIRE, pcl);
 9285              		.loc 1 3708 10 discriminator 1 view .LVU3358
 9286 0100 9142     		cmp	r1, r2
 9287 0102 08BF     		it	eq
 9288 0104 0022     		moveq	r2, #0
 9289              	.LVL1036:
 9290              	.L931:
3709:source\fatfs/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 9291              		.loc 1 3709 5 is_stmt 1 view .LVU3359
 9292              	.LBB163:
 9293              	.LBI163:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9294              		.loc 1 1325 6 view .LVU3360
 9295              	.LBB164:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9296              		.loc 1 1330 2 view .LVU3361
 9297 0106 85F83A20 		strb	r2, [r5, #58]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9298              		.loc 1 1330 2 view .LVU3362
 9299 010a C2F30721 		ubfx	r1, r2, #8, #8
1331:source\fatfs/ff.c **** }
 9300              		.loc 1 1331 2 is_stmt 0 view .LVU3363
 9301 010e 120C     		lsrs	r2, r2, #16
 9302              	.LVL1037:
1331:source\fatfs/ff.c **** }
 9303              		.loc 1 1331 2 view .LVU3364
 9304 0110 85F83420 		strb	r2, [r5, #52]
 9305              	.LBE164:
 9306              	.LBE163:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9307              		.loc 1 3710 16 view .LVU3365
 9308 0114 0CAF     		add	r7, sp, #48
 9309              	.LVL1038:
 9310              	.LBB166:
 9311              	.LBB165:
1331:source\fatfs/ff.c **** }
 9312              		.loc 1 1331 2 view .LVU3366
 9313 0116 120A     		lsrs	r2, r2, #8
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9314              		.loc 1 1330 2 view .LVU3367
 9315 0118 85F83B10 		strb	r1, [r5, #59]
1331:source\fatfs/ff.c **** }
 9316              		.loc 1 1331 2 is_stmt 1 view .LVU3368
1331:source\fatfs/ff.c **** }
 9317              		.loc 1 1331 2 view .LVU3369
 9318 011c 85F83520 		strb	r2, [r5, #53]
 9319              	.LVL1039:
1331:source\fatfs/ff.c **** }
 9320              		.loc 1 1331 2 is_stmt 0 view .LVU3370
 9321              	.LBE165:
 9322              	.LBE166:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9323              		.loc 1 3710 5 is_stmt 1 view .LVU3371
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9324              		.loc 1 3710 12 is_stmt 0 view .LVU3372
 9325 0120 D7F80022 		ldr	r2, [r7, #512]
 9326 0124 92F80222 		ldrb	r2, [r2, #514]	@ zero_extendqisi2
 9327 0128 1A44     		add	r2, r2, r3
 9328 012a 0692     		str	r2, [sp, #24]
 9329              	.LVL1040:
 9330              	.L932:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9331              		.loc 1 3710 28 is_stmt 1 discriminator 1 view .LVU3373
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9332              		.loc 1 3710 5 is_stmt 0 discriminator 1 view .LVU3374
 9333 012c 069A     		ldr	r2, [sp, #24]
 9334 012e 9342     		cmp	r3, r2
 9335 0130 21D1     		bne	.L933
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9336              		.loc 1 3718 4 is_stmt 1 view .LVU3375
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9337              		.loc 1 3718 22 view .LVU3376
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9338              		.loc 1 3718 28 is_stmt 0 view .LVU3377
 9339 0132 3846     		mov	r0, r7
 9340 0134 FFF7FEFF 		bl	dir_register
 9341              	.LVL1041:
3719:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9342              		.loc 1 3719 4 is_stmt 1 view .LVU3378
3719:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9343              		.loc 1 3719 7 is_stmt 0 view .LVU3379
 9344 0138 0446     		mov	r4, r0
 9345 013a 98BB     		cbnz	r0, .L929
3722:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9346              		.loc 1 3722 5 is_stmt 1 view .LVU3380
3722:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9347              		.loc 1 3722 9 is_stmt 0 view .LVU3381
 9348 013c D7F81432 		ldr	r3, [r7, #532]
 9349              	.LVL1042:
3723:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 9350              		.loc 1 3723 5 is_stmt 1 view .LVU3382
3723:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 9351              		.loc 1 3723 19 is_stmt 0 view .LVU3383
 9352 0140 1022     		movs	r2, #16
 9353 0142 DA72     		strb	r2, [r3, #11]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9354              		.loc 1 3724 5 is_stmt 1 view .LVU3384
 9355 0144 009A     		ldr	r2, [sp]
 9356 0146 DA75     		strb	r2, [r3, #23]
 9357 0148 019A     		ldr	r2, [sp, #4]
 9358 014a 1A76     		strb	r2, [r3, #24]
 9359 014c 029A     		ldr	r2, [sp, #8]
 9360 014e 5A76     		strb	r2, [r3, #25]
 9361              	.LBB167:
 9362              	.LBB168:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9363              		.loc 1 1330 2 is_stmt 0 view .LVU3385
 9364 0150 039A     		ldr	r2, [sp, #12]
 9365 0152 9A76     		strb	r2, [r3, #26]
 9366 0154 049A     		ldr	r2, [sp, #16]
 9367              	.LBE168:
 9368              	.LBE167:
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9369              		.loc 1 3724 5 view .LVU3386
 9370 0156 83F816B0 		strb	fp, [r3, #22]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9371              		.loc 1 3724 5 is_stmt 1 view .LVU3387
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9372              		.loc 1 3724 5 view .LVU3388
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9373              		.loc 1 3724 5 view .LVU3389
3725:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9374              		.loc 1 3725 5 view .LVU3390
 9375              	.LVL1043:
 9376              	.LBB170:
 9377              	.LBI167:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9378              		.loc 1 1325 6 view .LVU3391
 9379              	.LBB169:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9380              		.loc 1 1330 2 view .LVU3392
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9381              		.loc 1 1330 2 view .LVU3393
 9382 015a DA76     		strb	r2, [r3, #27]
1331:source\fatfs/ff.c **** }
 9383              		.loc 1 1331 2 view .LVU3394
 9384 015c 83F81490 		strb	r9, [r3, #20]
1331:source\fatfs/ff.c **** }
 9385              		.loc 1 1331 2 view .LVU3395
 9386 0160 83F815A0 		strb	r10, [r3, #21]
 9387              	.LVL1044:
1331:source\fatfs/ff.c **** }
 9388              		.loc 1 1331 2 is_stmt 0 view .LVU3396
 9389              	.LBE169:
 9390              	.LBE170:
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9391              		.loc 1 3726 5 is_stmt 1 view .LVU3397
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9392              		.loc 1 3726 7 is_stmt 0 view .LVU3398
 9393 0164 D7F80002 		ldr	r0, [r7, #512]
 9394              	.LVL1045:
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9395              		.loc 1 3726 18 view .LVU3399
 9396 0168 0123     		movs	r3, #1
 9397              	.LVL1046:
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9398              		.loc 1 3726 18 view .LVU3400
 9399 016a 80F80432 		strb	r3, [r0, #516]
3727:source\fatfs/ff.c **** 			}
 9400              		.loc 1 3727 5 is_stmt 1 view .LVU3401
3727:source\fatfs/ff.c **** 			}
 9401              		.loc 1 3727 11 is_stmt 0 view .LVU3402
 9402 016e FFF7FEFF 		bl	sync_fs
 9403              	.LVL1047:
 9404 0172 0446     		mov	r4, r0
 9405              	.LVL1048:
3727:source\fatfs/ff.c **** 			}
 9406              		.loc 1 3727 11 view .LVU3403
 9407 0174 1AE0     		b	.L928
 9408              	.LVL1049:
 9409              	.L933:
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9410              		.loc 1 3711 6 is_stmt 1 view .LVU3404
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9411              		.loc 1 3711 8 is_stmt 0 view .LVU3405
 9412 0176 D7F80002 		ldr	r0, [r7, #512]
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9413              		.loc 1 3711 26 view .LVU3406
 9414 017a 5A1C     		adds	r2, r3, #1
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9415              		.loc 1 3711 21 view .LVU3407
 9416 017c C0F82C32 		str	r3, [r0, #556]
3712:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
 9417              		.loc 1 3712 19 view .LVU3408
 9418 0180 4FF00103 		mov	r3, #1
 9419 0184 80F80432 		strb	r3, [r0, #516]
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9420              		.loc 1 3711 26 view .LVU3409
 9421 0188 0592     		str	r2, [sp, #20]
 9422              	.LVL1050:
3712:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
 9423              		.loc 1 3712 6 is_stmt 1 view .LVU3410
3713:source\fatfs/ff.c **** 					if (res != FR_OK) break;
 9424              		.loc 1 3713 6 view .LVU3411
 9425              	.LBB171:
 9426              	.LBI171:
 773:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 9427              		.loc 1 773 9 view .LVU3412
 9428              	.LBB172:
 777:source\fatfs/ff.c **** 	UINT nf;
 9429              		.loc 1 777 2 view .LVU3413
 778:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 9430              		.loc 1 778 2 view .LVU3414
 779:source\fatfs/ff.c **** 
 9431              		.loc 1 779 2 view .LVU3415
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 9432              		.loc 1 782 2 view .LVU3416
 9433 018a FFF7FEFF 		bl	sync_window.part.0
 9434              	.LVL1051:
 796:source\fatfs/ff.c **** }
 9435              		.loc 1 796 2 view .LVU3417
 796:source\fatfs/ff.c **** }
 9436              		.loc 1 796 2 is_stmt 0 view .LVU3418
 9437              	.LBE172:
 9438              	.LBE171:
3714:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 9439              		.loc 1 3714 6 is_stmt 1 view .LVU3419
3714:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 9440              		.loc 1 3714 9 is_stmt 0 view .LVU3420
 9441 018e 0446     		mov	r4, r0
 9442 0190 40B9     		cbnz	r0, .L929
3715:source\fatfs/ff.c **** 				}
 9443              		.loc 1 3715 6 is_stmt 1 discriminator 2 view .LVU3421
 9444 0192 0146     		mov	r1, r0
 9445 0194 4FF40072 		mov	r2, #512
 9446 0198 2846     		mov	r0, r5
 9447              	.LVL1052:
3715:source\fatfs/ff.c **** 				}
 9448              		.loc 1 3715 6 is_stmt 0 discriminator 2 view .LVU3422
 9449 019a FFF7FEFF 		bl	mem_set
 9450              	.LVL1053:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9451              		.loc 1 3710 31 is_stmt 1 discriminator 2 view .LVU3423
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9452              		.loc 1 3711 26 is_stmt 0 discriminator 2 view .LVU3424
 9453 019e 059B     		ldr	r3, [sp, #20]
 9454 01a0 C4E7     		b	.L932
 9455              	.LVL1054:
 9456              	.L939:
3691:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9457              		.loc 1 3691 22 view .LVU3425
 9458 01a2 0724     		movs	r4, #7
 9459              	.LVL1055:
 9460              	.L929:
3720:source\fatfs/ff.c **** 			} else {
 9461              		.loc 1 3720 5 is_stmt 1 view .LVU3426
 9462 01a4 8C98     		ldr	r0, [sp, #560]
 9463 01a6 3146     		mov	r1, r6
 9464 01a8 FFF7FEFF 		bl	remove_chain
 9465              	.LVL1056:
 9466              	.L928:
3730:source\fatfs/ff.c **** 	}
 9467              		.loc 1 3730 3 view .LVU3427
 9468 01ac 4046     		mov	r0, r8
 9469 01ae FFF7FEFF 		bl	ff_memfree
 9470              	.LVL1057:
 9471              	.L942:
3734:source\fatfs/ff.c **** 
 9472              		.loc 1 3734 1 is_stmt 0 view .LVU3428
 9473 01b2 2046     		mov	r0, r4
 9474 01b4 0DF5177D 		add	sp, sp, #604
 9475              		.cfi_remember_state
 9476              		.cfi_def_cfa_offset 36
 9477              		@ sp needed
 9478 01b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9479              	.LVL1058:
 9480              	.L940:
 9481              		.cfi_restore_state
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9482              		.loc 1 3692 22 view .LVU3429
 9483 01bc 0224     		movs	r4, #2
 9484 01be F1E7     		b	.L929
 9485              	.L941:
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9486              		.loc 1 3693 31 view .LVU3430
 9487 01c0 0124     		movs	r4, #1
 9488 01c2 EFE7     		b	.L929
 9489              	.LVL1059:
 9490              	.L938:
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9491              		.loc 1 3685 25 view .LVU3431
 9492 01c4 0824     		movs	r4, #8
 9493 01c6 F1E7     		b	.L928
 9494              	.LVL1060:
 9495              	.L937:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9496              		.loc 1 3683 3 view .LVU3432
 9497 01c8 1124     		movs	r4, #17
 9498 01ca F2E7     		b	.L942
 9499              		.cfi_endproc
 9500              	.LFE183:
 9502              		.section	.text.f_chmod,"ax",%progbits
 9503              		.align	1
 9504              		.global	f_chmod
 9505              		.syntax unified
 9506              		.thumb
 9507              		.thumb_func
 9509              	f_chmod:
 9510              	.LVL1061:
 9511              	.LFB184:
3748:source\fatfs/ff.c **** 	FRESULT res;
 9512              		.loc 1 3748 1 is_stmt 1 view -0
 9513              		.cfi_startproc
 9514              		@ args = 0, pretend = 0, frame = 576
 9515              		@ frame_needed = 0, uses_anonymous_args = 0
3749:source\fatfs/ff.c **** 	DIR dj;
 9516              		.loc 1 3749 2 view .LVU3434
3750:source\fatfs/ff.c **** 	BYTE *dir;
 9517              		.loc 1 3750 2 view .LVU3435
3751:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9518              		.loc 1 3751 2 view .LVU3436
3752:source\fatfs/ff.c **** 
 9519              		.loc 1 3752 2 view .LVU3437
3752:source\fatfs/ff.c **** 
 9520              		.loc 1 3752 2 view .LVU3438
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9521              		.loc 1 3756 2 view .LVU3439
3748:source\fatfs/ff.c **** 	FRESULT res;
 9522              		.loc 1 3748 1 is_stmt 0 view .LVU3440
 9523 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9524              		.cfi_def_cfa_offset 20
 9525              		.cfi_offset 4, -20
 9526              		.cfi_offset 5, -16
 9527              		.cfi_offset 6, -12
 9528              		.cfi_offset 7, -8
 9529              		.cfi_offset 14, -4
 9530 0002 ADF5117D 		sub	sp, sp, #580
 9531              		.cfi_def_cfa_offset 600
3748:source\fatfs/ff.c **** 	FRESULT res;
 9532              		.loc 1 3748 1 view .LVU3441
 9533 0006 0E46     		mov	r6, r1
 9534 0008 0190     		str	r0, [sp, #4]
 9535 000a 1546     		mov	r5, r2
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9536              		.loc 1 3756 8 view .LVU3442
 9537 000c 01A9     		add	r1, sp, #4
 9538              	.LVL1062:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9539              		.loc 1 3756 8 view .LVU3443
 9540 000e 0122     		movs	r2, #1
 9541              	.LVL1063:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9542              		.loc 1 3756 8 view .LVU3444
 9543 0010 86A8     		add	r0, sp, #536
 9544              	.LVL1064:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9545              		.loc 1 3756 8 view .LVU3445
 9546 0012 FFF7FEFF 		bl	find_volume
 9547              	.LVL1065:
3757:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9548              		.loc 1 3757 2 is_stmt 1 view .LVU3446
3757:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9549              		.loc 1 3757 5 is_stmt 0 view .LVU3447
 9550 0016 0446     		mov	r4, r0
 9551 0018 08BB     		cbnz	r0, .L948
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9552              		.loc 1 3758 3 is_stmt 1 view .LVU3448
 9553 001a 4FF40070 		mov	r0, #512
 9554              	.LVL1066:
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9555              		.loc 1 3758 3 is_stmt 0 view .LVU3449
 9556 001e FFF7FEFF 		bl	ff_memalloc
 9557              	.LVL1067:
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9558              		.loc 1 3758 3 is_stmt 1 view .LVU3450
 9559 0022 0746     		mov	r7, r0
 9560 0024 F8B1     		cbz	r0, .L949
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9561              		.loc 1 3758 3 discriminator 2 view .LVU3451
 9562 0026 8E90     		str	r0, [sp, #568]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9563              		.loc 1 3758 3 discriminator 2 view .LVU3452
 9564 0028 03AB     		add	r3, sp, #12
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9565              		.loc 1 3759 9 is_stmt 0 discriminator 2 view .LVU3453
 9566 002a 0199     		ldr	r1, [sp, #4]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9567              		.loc 1 3758 3 discriminator 2 view .LVU3454
 9568 002c 8C93     		str	r3, [sp, #560]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9569              		.loc 1 3758 15 is_stmt 1 discriminator 2 view .LVU3455
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9570              		.loc 1 3759 3 discriminator 2 view .LVU3456
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9571              		.loc 1 3759 9 is_stmt 0 discriminator 2 view .LVU3457
 9572 002e 06A8     		add	r0, sp, #24
 9573              	.LVL1068:
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9574              		.loc 1 3759 9 discriminator 2 view .LVU3458
 9575 0030 FFF7FEFF 		bl	follow_path
 9576              	.LVL1069:
 9577 0034 0446     		mov	r4, r0
 9578              	.LVL1070:
3760:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 9579              		.loc 1 3760 3 is_stmt 1 discriminator 2 view .LVU3459
 9580 0036 3846     		mov	r0, r7
 9581 0038 FFF7FEFF 		bl	ff_memfree
 9582              	.LVL1071:
3761:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9583              		.loc 1 3761 3 discriminator 2 view .LVU3460
3763:source\fatfs/ff.c **** 			dir = dj.dir;
 9584              		.loc 1 3763 3 discriminator 2 view .LVU3461
3763:source\fatfs/ff.c **** 			dir = dj.dir;
 9585              		.loc 1 3763 6 is_stmt 0 discriminator 2 view .LVU3462
 9586 003c 7CB9     		cbnz	r4, .L948
3764:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9587              		.loc 1 3764 4 is_stmt 1 view .LVU3463
3764:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9588              		.loc 1 3764 8 is_stmt 0 view .LVU3464
 9589 003e 8B98     		ldr	r0, [sp, #556]
 9590              	.LVL1072:
3765:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9591              		.loc 1 3765 4 is_stmt 1 view .LVU3465
3765:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9592              		.loc 1 3765 7 is_stmt 0 view .LVU3466
 9593 0040 98B1     		cbz	r0, .L950
3768:source\fatfs/ff.c **** 				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 9594              		.loc 1 3768 5 is_stmt 1 view .LVU3467
 9595              	.LVL1073:
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9596              		.loc 1 3769 5 view .LVU3468
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9597              		.loc 1 3769 41 is_stmt 0 view .LVU3469
 9598 0042 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9599              		.loc 1 3769 19 view .LVU3470
 9600 0044 5E40     		eors	r6, r6, r3
 9601 0046 3540     		ands	r5, r5, r6
 9602              	.LVL1074:
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9603              		.loc 1 3769 19 view .LVU3471
 9604 0048 05F02705 		and	r5, r5, #39
 9605 004c 5D40     		eors	r5, r5, r3
 9606 004e C572     		strb	r5, [r0, #11]
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9607              		.loc 1 3770 5 is_stmt 1 view .LVU3472
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9608              		.loc 1 3770 7 is_stmt 0 view .LVU3473
 9609 0050 8698     		ldr	r0, [sp, #536]
 9610              	.LVL1075:
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9611              		.loc 1 3770 18 view .LVU3474
 9612 0052 0123     		movs	r3, #1
 9613 0054 80F80432 		strb	r3, [r0, #516]
3771:source\fatfs/ff.c **** 			}
 9614              		.loc 1 3771 5 is_stmt 1 view .LVU3475
3771:source\fatfs/ff.c **** 			}
 9615              		.loc 1 3771 11 is_stmt 0 view .LVU3476
 9616 0058 FFF7FEFF 		bl	sync_fs
 9617              	.LVL1076:
 9618 005c 0446     		mov	r4, r0
 9619              	.LVL1077:
 9620              	.L948:
3777:source\fatfs/ff.c **** 
 9621              		.loc 1 3777 1 view .LVU3477
 9622 005e 2046     		mov	r0, r4
 9623 0060 0DF5117D 		add	sp, sp, #580
 9624              		.cfi_remember_state
 9625              		.cfi_def_cfa_offset 20
 9626              		@ sp needed
 9627 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 9628              	.LVL1078:
 9629              	.L949:
 9630              		.cfi_restore_state
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9631              		.loc 1 3758 3 view .LVU3478
 9632 0066 1124     		movs	r4, #17
 9633 0068 F9E7     		b	.L948
 9634              	.LVL1079:
 9635              	.L950:
3766:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
 9636              		.loc 1 3766 9 view .LVU3479
 9637 006a 0624     		movs	r4, #6
 9638              	.LVL1080:
3766:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
 9639              		.loc 1 3766 9 view .LVU3480
 9640 006c F7E7     		b	.L948
 9641              		.cfi_endproc
 9642              	.LFE184:
 9644              		.section	.text.f_rename,"ax",%progbits
 9645              		.align	1
 9646              		.global	f_rename
 9647              		.syntax unified
 9648              		.thumb
 9649              		.thumb_func
 9651              	f_rename:
 9652              	.LVL1081:
 9653              	.LFB185:
3790:source\fatfs/ff.c **** 	FRESULT res;
 9654              		.loc 1 3790 1 is_stmt 1 view -0
 9655              		.cfi_startproc
 9656              		@ args = 0, pretend = 0, frame = 1152
 9657              		@ frame_needed = 0, uses_anonymous_args = 0
3791:source\fatfs/ff.c **** 	DIR djo, djn;
 9658              		.loc 1 3791 2 view .LVU3482
3792:source\fatfs/ff.c **** 	BYTE buf[21], *dir;
 9659              		.loc 1 3792 2 view .LVU3483
3793:source\fatfs/ff.c **** 	DWORD dw;
 9660              		.loc 1 3793 2 view .LVU3484
3794:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9661              		.loc 1 3794 2 view .LVU3485
3795:source\fatfs/ff.c **** 
 9662              		.loc 1 3795 2 view .LVU3486
3795:source\fatfs/ff.c **** 
 9663              		.loc 1 3795 2 view .LVU3487
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9664              		.loc 1 3799 2 view .LVU3488
3790:source\fatfs/ff.c **** 	FRESULT res;
 9665              		.loc 1 3790 1 is_stmt 0 view .LVU3489
 9666 0000 70B5     		push	{r4, r5, r6, lr}
 9667              		.cfi_def_cfa_offset 16
 9668              		.cfi_offset 4, -16
 9669              		.cfi_offset 5, -12
 9670              		.cfi_offset 6, -8
 9671              		.cfi_offset 14, -4
 9672 0002 ADF5906D 		sub	sp, sp, #1152
 9673              		.cfi_def_cfa_offset 1168
3790:source\fatfs/ff.c **** 	FRESULT res;
 9674              		.loc 1 3790 1 view .LVU3490
 9675 0006 CDE90010 		strd	r1, r0, [sp]
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9676              		.loc 1 3799 8 view .LVU3491
 9677 000a 0122     		movs	r2, #1
 9678 000c 01A9     		add	r1, sp, #4
 9679              	.LVL1082:
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9680              		.loc 1 3799 8 view .LVU3492
 9681 000e 8CA8     		add	r0, sp, #560
 9682              	.LVL1083:
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9683              		.loc 1 3799 8 view .LVU3493
 9684 0010 FFF7FEFF 		bl	find_volume
 9685              	.LVL1084:
3800:source\fatfs/ff.c **** 		djn.fs = djo.fs;
 9686              		.loc 1 3800 2 is_stmt 1 view .LVU3494
3800:source\fatfs/ff.c **** 		djn.fs = djo.fs;
 9687              		.loc 1 3800 5 is_stmt 0 view .LVU3495
 9688 0014 0446     		mov	r4, r0
 9689 0016 0028     		cmp	r0, #0
 9690 0018 40F08B80 		bne	.L952
3801:source\fatfs/ff.c **** 		INIT_BUF(djo);
 9691              		.loc 1 3801 3 is_stmt 1 view .LVU3496
3801:source\fatfs/ff.c **** 		INIT_BUF(djo);
 9692              		.loc 1 3801 10 is_stmt 0 view .LVU3497
 9693 001c 8C9B     		ldr	r3, [sp, #560]
 9694 001e CDF85834 		str	r3, [sp, #1112]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9695              		.loc 1 3802 3 is_stmt 1 view .LVU3498
 9696 0022 4FF40070 		mov	r0, #512
 9697              	.LVL1085:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9698              		.loc 1 3802 3 is_stmt 0 view .LVU3499
 9699 0026 FFF7FEFF 		bl	ff_memalloc
 9700              	.LVL1086:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9701              		.loc 1 3802 3 is_stmt 1 view .LVU3500
 9702 002a 0546     		mov	r5, r0
 9703 002c 0028     		cmp	r0, #0
 9704 002e 00F08C80 		beq	.L957
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9705              		.loc 1 3802 3 discriminator 2 view .LVU3501
 9706 0032 9490     		str	r0, [sp, #592]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9707              		.loc 1 3802 3 discriminator 2 view .LVU3502
 9708 0034 03AB     		add	r3, sp, #12
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9709              		.loc 1 3803 9 is_stmt 0 discriminator 2 view .LVU3503
 9710 0036 0199     		ldr	r1, [sp, #4]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9711              		.loc 1 3802 3 discriminator 2 view .LVU3504
 9712 0038 9293     		str	r3, [sp, #584]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9713              		.loc 1 3802 16 is_stmt 1 discriminator 2 view .LVU3505
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9714              		.loc 1 3803 3 discriminator 2 view .LVU3506
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9715              		.loc 1 3803 9 is_stmt 0 discriminator 2 view .LVU3507
 9716 003a 0CA8     		add	r0, sp, #48
 9717              	.LVL1087:
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9718              		.loc 1 3803 9 discriminator 2 view .LVU3508
 9719 003c FFF7FEFF 		bl	follow_path
 9720              	.LVL1088:
3804:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9721              		.loc 1 3804 3 is_stmt 1 discriminator 2 view .LVU3509
3807:source\fatfs/ff.c **** #endif
 9722              		.loc 1 3807 3 discriminator 2 view .LVU3510
3807:source\fatfs/ff.c **** #endif
 9723              		.loc 1 3807 6 is_stmt 0 discriminator 2 view .LVU3511
 9724 0040 0446     		mov	r4, r0
 9725 0042 0028     		cmp	r0, #0
 9726 0044 72D1     		bne	.L953
3807:source\fatfs/ff.c **** #endif
 9727              		.loc 1 3807 21 is_stmt 1 discriminator 1 view .LVU3512
3807:source\fatfs/ff.c **** #endif
 9728              		.loc 1 3807 27 is_stmt 0 discriminator 1 view .LVU3513
 9729 0046 0221     		movs	r1, #2
 9730 0048 0CA8     		add	r0, sp, #48
 9731              	.LVL1089:
3807:source\fatfs/ff.c **** #endif
 9732              		.loc 1 3807 27 discriminator 1 view .LVU3514
 9733 004a FFF7FEFF 		bl	chk_lock
 9734              	.LVL1090:
3809:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 9735              		.loc 1 3809 3 is_stmt 1 discriminator 1 view .LVU3515
3809:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 9736              		.loc 1 3809 6 is_stmt 0 discriminator 1 view .LVU3516
 9737 004e 0446     		mov	r4, r0
 9738 0050 0028     		cmp	r0, #0
 9739 0052 6BD1     		bne	.L953
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9740              		.loc 1 3810 4 is_stmt 1 view .LVU3517
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9741              		.loc 1 3810 12 is_stmt 0 view .LVU3518
 9742 0054 9199     		ldr	r1, [sp, #580]
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9743              		.loc 1 3810 7 view .LVU3519
 9744 0056 0029     		cmp	r1, #0
 9745 0058 6FD0     		beq	.L958
3813:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9746              		.loc 1 3813 5 is_stmt 1 view .LVU3520
 9747 005a 1522     		movs	r2, #21
 9748 005c 0B31     		adds	r1, r1, #11
 9749 005e 06A8     		add	r0, sp, #24
 9750              	.LVL1091:
3813:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9751              		.loc 1 3813 5 is_stmt 0 view .LVU3521
 9752 0060 FFF7FEFF 		bl	mem_cpy
 9753              	.LVL1092:
3814:source\fatfs/ff.c **** 				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
 9754              		.loc 1 3814 5 is_stmt 1 view .LVU3522
 9755 0064 4FF40A72 		mov	r2, #552
 9756 0068 0CA9     		add	r1, sp, #48
 9757 006a 96A8     		add	r0, sp, #600
 9758 006c FFF7FEFF 		bl	mem_cpy
 9759              	.LVL1093:
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9760              		.loc 1 3815 5 view .LVU3523
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9761              		.loc 1 3815 9 is_stmt 0 view .LVU3524
 9762 0070 6846     		mov	r0, sp
 9763 0072 FFF7FEFF 		bl	get_ldnumber
 9764              	.LVL1094:
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9765              		.loc 1 3815 8 view .LVU3525
 9766 0076 0028     		cmp	r0, #0
 9767 0078 61DB     		blt	.L959
3816:source\fatfs/ff.c **** 				else
 9768              		.loc 1 3816 6 is_stmt 1 view .LVU3526
3816:source\fatfs/ff.c **** 				else
 9769              		.loc 1 3816 12 is_stmt 0 view .LVU3527
 9770 007a 0099     		ldr	r1, [sp]
 9771 007c 96A8     		add	r0, sp, #600
 9772 007e FFF7FEFF 		bl	follow_path
 9773              	.LVL1095:
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9774              		.loc 1 3819 5 is_stmt 1 view .LVU3528
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9775              		.loc 1 3819 8 is_stmt 0 view .LVU3529
 9776 0082 0446     		mov	r4, r0
 9777 0084 0028     		cmp	r0, #0
 9778 0086 5CD0     		beq	.L960
3820:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9779              		.loc 1 3820 5 is_stmt 1 view .LVU3530
3820:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9780              		.loc 1 3820 8 is_stmt 0 view .LVU3531
 9781 0088 0428     		cmp	r0, #4
 9782 008a 4FD1     		bne	.L953
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9783              		.loc 1 3821 6 is_stmt 1 view .LVU3532
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9784              		.loc 1 3821 12 is_stmt 0 view .LVU3533
 9785 008c 96A8     		add	r0, sp, #600
 9786              	.LVL1096:
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9787              		.loc 1 3821 12 view .LVU3534
 9788 008e FFF7FEFF 		bl	dir_register
 9789              	.LVL1097:
3822:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
 9790              		.loc 1 3822 6 is_stmt 1 view .LVU3535
3822:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
 9791              		.loc 1 3822 9 is_stmt 0 view .LVU3536
 9792 0092 0446     		mov	r4, r0
 9793 0094 0028     		cmp	r0, #0
 9794 0096 49D1     		bne	.L953
3824:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 9795              		.loc 1 3824 7 is_stmt 1 view .LVU3537
3824:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 9796              		.loc 1 3824 11 is_stmt 0 view .LVU3538
 9797 0098 DDF86C64 		ldr	r6, [sp, #1132]
 9798              	.LVL1098:
3825:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9799              		.loc 1 3825 7 is_stmt 1 view .LVU3539
 9800 009c 1322     		movs	r2, #19
 9801 009e 0DF11A01 		add	r1, sp, #26
 9802 00a2 06F10D00 		add	r0, r6, #13
 9803              	.LVL1099:
3825:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9804              		.loc 1 3825 7 is_stmt 0 view .LVU3540
 9805 00a6 FFF7FEFF 		bl	mem_cpy
 9806              	.LVL1100:
3826:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
 9807              		.loc 1 3826 7 is_stmt 1 view .LVU3541
3826:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
 9808              		.loc 1 3826 21 is_stmt 0 view .LVU3542
 9809 00aa 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 9810 00ae 43F02003 		orr	r3, r3, #32
 9811 00b2 F372     		strb	r3, [r6, #11]
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9812              		.loc 1 3827 7 is_stmt 1 view .LVU3543
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9813              		.loc 1 3827 10 is_stmt 0 view .LVU3544
 9814 00b4 8C9C     		ldr	r4, [sp, #560]
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9815              		.loc 1 3827 21 view .LVU3545
 9816 00b6 0123     		movs	r3, #1
 9817 00b8 84F80432 		strb	r3, [r4, #516]
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9818              		.loc 1 3828 7 is_stmt 1 view .LVU3546
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9819              		.loc 1 3828 10 is_stmt 0 view .LVU3547
 9820 00bc F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 9821 00be DB06     		lsls	r3, r3, #27
 9822 00c0 2BD5     		bpl	.L955
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9823              		.loc 1 3828 36 discriminator 1 view .LVU3548
 9824 00c2 8E9A     		ldr	r2, [sp, #568]
 9825 00c4 DDF86034 		ldr	r3, [sp, #1120]
 9826 00c8 9A42     		cmp	r2, r3
 9827 00ca 26D0     		beq	.L955
3829:source\fatfs/ff.c **** 							if (!dw) {
 9828              		.loc 1 3829 8 is_stmt 1 view .LVU3549
3829:source\fatfs/ff.c **** 							if (!dw) {
 9829              		.loc 1 3829 13 is_stmt 0 view .LVU3550
 9830 00cc 3146     		mov	r1, r6
 9831 00ce 94F80002 		ldrb	r0, [r4, #512]	@ zero_extendqisi2
 9832 00d2 FFF7FEFF 		bl	ld_clust.isra.0
 9833              	.LVL1101:
 9834 00d6 0146     		mov	r1, r0
 9835 00d8 2046     		mov	r0, r4
 9836 00da FFF7FEFF 		bl	clust2sect
 9837              	.LVL1102:
3830:source\fatfs/ff.c **** 								res = FR_INT_ERR;
 9838              		.loc 1 3830 8 is_stmt 1 view .LVU3551
3830:source\fatfs/ff.c **** 								res = FR_INT_ERR;
 9839              		.loc 1 3830 11 is_stmt 0 view .LVU3552
 9840 00de 0146     		mov	r1, r0
 9841 00e0 88B3     		cbz	r0, .L961
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9842              		.loc 1 3833 9 is_stmt 1 view .LVU3553
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9843              		.loc 1 3833 15 is_stmt 0 view .LVU3554
 9844 00e2 2046     		mov	r0, r4
 9845              	.LVL1103:
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9846              		.loc 1 3833 15 view .LVU3555
 9847 00e4 FFF7FEFF 		bl	move_window
 9848              	.LVL1104:
3834:source\fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9849              		.loc 1 3834 9 is_stmt 1 view .LVU3556
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9850              		.loc 1 3835 9 view .LVU3557
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9851              		.loc 1 3835 12 is_stmt 0 view .LVU3558
 9852 00e8 0446     		mov	r4, r0
 9853 00ea F8B9     		cbnz	r0, .L953
3834:source\fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9854              		.loc 1 3834 18 discriminator 1 view .LVU3559
 9855 00ec 8C9A     		ldr	r2, [sp, #560]
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9856              		.loc 1 3835 26 discriminator 1 view .LVU3560
 9857 00ee 92F82130 		ldrb	r3, [r2, #33]	@ zero_extendqisi2
 9858 00f2 2E2B     		cmp	r3, #46
 9859 00f4 11D1     		bne	.L955
3836:source\fatfs/ff.c **** 									djo.fs->wflag = 1;
 9860              		.loc 1 3836 10 is_stmt 1 view .LVU3561
 9861 00f6 DDF86034 		ldr	r3, [sp, #1120]
 9862              	.LVL1105:
 9863              	.LBB175:
 9864              	.LBI175:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9865              		.loc 1 1325 6 view .LVU3562
 9866              	.LBB176:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9867              		.loc 1 1330 2 view .LVU3563
 9868 00fa 82F83A30 		strb	r3, [r2, #58]
 9869              	.LVL1106:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9870              		.loc 1 1330 2 view .LVU3564
 9871 00fe C3F30721 		ubfx	r1, r3, #8, #8
1331:source\fatfs/ff.c **** }
 9872              		.loc 1 1331 2 is_stmt 0 view .LVU3565
 9873 0102 1B0C     		lsrs	r3, r3, #16
 9874              	.LVL1107:
1331:source\fatfs/ff.c **** }
 9875              		.loc 1 1331 2 view .LVU3566
 9876 0104 82F83430 		strb	r3, [r2, #52]
 9877 0108 1B0A     		lsrs	r3, r3, #8
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9878              		.loc 1 1330 2 view .LVU3567
 9879 010a 82F83B10 		strb	r1, [r2, #59]
1331:source\fatfs/ff.c **** }
 9880              		.loc 1 1331 2 is_stmt 1 view .LVU3568
1331:source\fatfs/ff.c **** }
 9881              		.loc 1 1331 2 view .LVU3569
 9882 010e 82F83530 		strb	r3, [r2, #53]
 9883              	.LVL1108:
1331:source\fatfs/ff.c **** }
 9884              		.loc 1 1331 2 is_stmt 0 view .LVU3570
 9885              	.LBE176:
 9886              	.LBE175:
3837:source\fatfs/ff.c **** 								}
 9887              		.loc 1 3837 10 is_stmt 1 view .LVU3571
3837:source\fatfs/ff.c **** 								}
 9888              		.loc 1 3837 24 is_stmt 0 view .LVU3572
 9889 0112 8C9B     		ldr	r3, [sp, #560]
 9890 0114 0122     		movs	r2, #1
 9891              	.LVL1109:
3837:source\fatfs/ff.c **** 								}
 9892              		.loc 1 3837 24 view .LVU3573
 9893 0116 83F80422 		strb	r2, [r3, #516]
 9894              	.LVL1110:
3841:source\fatfs/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 9895              		.loc 1 3841 7 is_stmt 1 view .LVU3574
 9896              	.L955:
3842:source\fatfs/ff.c **** 							if (res == FR_OK)
 9897              		.loc 1 3842 8 view .LVU3575
3842:source\fatfs/ff.c **** 							if (res == FR_OK)
 9898              		.loc 1 3842 14 is_stmt 0 view .LVU3576
 9899 011a 0CA8     		add	r0, sp, #48
 9900 011c FFF7FEFF 		bl	dir_remove
 9901              	.LVL1111:
3843:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
 9902              		.loc 1 3843 8 is_stmt 1 view .LVU3577
3843:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
 9903              		.loc 1 3843 11 is_stmt 0 view .LVU3578
 9904 0120 0446     		mov	r4, r0
 9905 0122 18B9     		cbnz	r0, .L953
3844:source\fatfs/ff.c **** 						}
 9906              		.loc 1 3844 9 is_stmt 1 view .LVU3579
3844:source\fatfs/ff.c **** 						}
 9907              		.loc 1 3844 15 is_stmt 0 view .LVU3580
 9908 0124 8C98     		ldr	r0, [sp, #560]
 9909              	.LVL1112:
3844:source\fatfs/ff.c **** 						}
 9910              		.loc 1 3844 15 view .LVU3581
 9911 0126 FFF7FEFF 		bl	sync_fs
 9912              	.LVL1113:
 9913 012a 0446     		mov	r4, r0
 9914              	.LVL1114:
 9915              	.L953:
3851:source\fatfs/ff.c **** 	}
 9916              		.loc 1 3851 3 is_stmt 1 view .LVU3582
 9917 012c 2846     		mov	r0, r5
 9918 012e FFF7FEFF 		bl	ff_memfree
 9919              	.LVL1115:
 9920              	.L952:
3855:source\fatfs/ff.c **** 
 9921              		.loc 1 3855 1 is_stmt 0 view .LVU3583
 9922 0132 2046     		mov	r0, r4
 9923 0134 0DF5906D 		add	sp, sp, #1152
 9924              		.cfi_remember_state
 9925              		.cfi_def_cfa_offset 16
 9926              		@ sp needed
 9927 0138 70BD     		pop	{r4, r5, r6, pc}
 9928              	.LVL1116:
 9929              	.L958:
 9930              		.cfi_restore_state
3811:source\fatfs/ff.c **** 			} else {
 9931              		.loc 1 3811 9 view .LVU3584
 9932 013a 0424     		movs	r4, #4
 9933 013c F6E7     		b	.L953
 9934              	.LVL1117:
 9935              	.L959:
3818:source\fatfs/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 9936              		.loc 1 3818 10 view .LVU3585
 9937 013e 0B24     		movs	r4, #11
 9938 0140 F4E7     		b	.L953
 9939              	.LVL1118:
 9940              	.L960:
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9941              		.loc 1 3819 27 view .LVU3586
 9942 0142 0824     		movs	r4, #8
 9943 0144 F2E7     		b	.L953
 9944              	.LVL1119:
 9945              	.L961:
3831:source\fatfs/ff.c **** 							} else {
 9946              		.loc 1 3831 13 view .LVU3587
 9947 0146 0224     		movs	r4, #2
 9948 0148 F0E7     		b	.L953
 9949              	.LVL1120:
 9950              	.L957:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9951              		.loc 1 3802 3 view .LVU3588
 9952 014a 1124     		movs	r4, #17
 9953 014c F1E7     		b	.L952
 9954              		.cfi_endproc
 9955              	.LFE185:
 9957              		.section	.text.f_utime,"ax",%progbits
 9958              		.align	1
 9959              		.global	f_utime
 9960              		.syntax unified
 9961              		.thumb
 9962              		.thumb_func
 9964              	f_utime:
 9965              	.LVL1121:
 9966              	.LFB186:
3868:source\fatfs/ff.c **** 	FRESULT res;
 9967              		.loc 1 3868 1 is_stmt 1 view -0
 9968              		.cfi_startproc
 9969              		@ args = 0, pretend = 0, frame = 576
 9970              		@ frame_needed = 0, uses_anonymous_args = 0
3869:source\fatfs/ff.c **** 	DIR dj;
 9971              		.loc 1 3869 2 view .LVU3590
3870:source\fatfs/ff.c **** 	BYTE *dir;
 9972              		.loc 1 3870 2 view .LVU3591
3871:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9973              		.loc 1 3871 2 view .LVU3592
3872:source\fatfs/ff.c **** 
 9974              		.loc 1 3872 2 view .LVU3593
3872:source\fatfs/ff.c **** 
 9975              		.loc 1 3872 2 view .LVU3594
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9976              		.loc 1 3876 2 view .LVU3595
3868:source\fatfs/ff.c **** 	FRESULT res;
 9977              		.loc 1 3868 1 is_stmt 0 view .LVU3596
 9978 0000 70B5     		push	{r4, r5, r6, lr}
 9979              		.cfi_def_cfa_offset 16
 9980              		.cfi_offset 4, -16
 9981              		.cfi_offset 5, -12
 9982              		.cfi_offset 6, -8
 9983              		.cfi_offset 14, -4
 9984 0002 ADF5107D 		sub	sp, sp, #576
 9985              		.cfi_def_cfa_offset 592
3868:source\fatfs/ff.c **** 	FRESULT res;
 9986              		.loc 1 3868 1 view .LVU3597
 9987 0006 0D46     		mov	r5, r1
 9988 0008 0190     		str	r0, [sp, #4]
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9989              		.loc 1 3876 8 view .LVU3598
 9990 000a 0122     		movs	r2, #1
 9991 000c 01A9     		add	r1, sp, #4
 9992              	.LVL1122:
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9993              		.loc 1 3876 8 view .LVU3599
 9994 000e 86A8     		add	r0, sp, #536
 9995              	.LVL1123:
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9996              		.loc 1 3876 8 view .LVU3600
 9997 0010 FFF7FEFF 		bl	find_volume
 9998              	.LVL1124:
3877:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9999              		.loc 1 3877 2 is_stmt 1 view .LVU3601
3877:source\fatfs/ff.c **** 		INIT_BUF(dj);
 10000              		.loc 1 3877 5 is_stmt 0 view .LVU3602
 10001 0014 0446     		mov	r4, r0
 10002 0016 20BB     		cbnz	r0, .L963
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10003              		.loc 1 3878 3 is_stmt 1 view .LVU3603
 10004 0018 4FF40070 		mov	r0, #512
 10005              	.LVL1125:
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10006              		.loc 1 3878 3 is_stmt 0 view .LVU3604
 10007 001c FFF7FEFF 		bl	ff_memalloc
 10008              	.LVL1126:
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10009              		.loc 1 3878 3 is_stmt 1 view .LVU3605
 10010 0020 0646     		mov	r6, r0
 10011 0022 10B3     		cbz	r0, .L964
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10012              		.loc 1 3878 3 discriminator 2 view .LVU3606
 10013 0024 8E90     		str	r0, [sp, #568]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10014              		.loc 1 3878 3 discriminator 2 view .LVU3607
 10015 0026 03AB     		add	r3, sp, #12
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10016              		.loc 1 3879 9 is_stmt 0 discriminator 2 view .LVU3608
 10017 0028 0199     		ldr	r1, [sp, #4]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10018              		.loc 1 3878 3 discriminator 2 view .LVU3609
 10019 002a 8C93     		str	r3, [sp, #560]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10020              		.loc 1 3878 15 is_stmt 1 discriminator 2 view .LVU3610
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10021              		.loc 1 3879 3 discriminator 2 view .LVU3611
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10022              		.loc 1 3879 9 is_stmt 0 discriminator 2 view .LVU3612
 10023 002c 06A8     		add	r0, sp, #24
 10024              	.LVL1127:
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10025              		.loc 1 3879 9 discriminator 2 view .LVU3613
 10026 002e FFF7FEFF 		bl	follow_path
 10027              	.LVL1128:
 10028 0032 0446     		mov	r4, r0
 10029              	.LVL1129:
3880:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 10030              		.loc 1 3880 3 is_stmt 1 discriminator 2 view .LVU3614
 10031 0034 3046     		mov	r0, r6
 10032 0036 FFF7FEFF 		bl	ff_memfree
 10033              	.LVL1130:
3881:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 10034              		.loc 1 3881 3 discriminator 2 view .LVU3615
3883:source\fatfs/ff.c **** 			dir = dj.dir;
 10035              		.loc 1 3883 3 discriminator 2 view .LVU3616
3883:source\fatfs/ff.c **** 			dir = dj.dir;
 10036              		.loc 1 3883 6 is_stmt 0 discriminator 2 view .LVU3617
 10037 003a 94B9     		cbnz	r4, .L963
3884:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
 10038              		.loc 1 3884 4 is_stmt 1 view .LVU3618
3884:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
 10039              		.loc 1 3884 8 is_stmt 0 view .LVU3619
 10040 003c 8B9B     		ldr	r3, [sp, #556]
 10041              	.LVL1131:
3885:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 10042              		.loc 1 3885 4 is_stmt 1 view .LVU3620
3885:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 10043              		.loc 1 3885 7 is_stmt 0 view .LVU3621
 10044 003e B3B1     		cbz	r3, .L965
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 10045              		.loc 1 3888 5 is_stmt 1 view .LVU3622
 10046 0040 EA88     		ldrh	r2, [r5, #6]
 10047 0042 9A75     		strb	r2, [r3, #22]
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 10048              		.loc 1 3888 5 view .LVU3623
 10049 0044 EA88     		ldrh	r2, [r5, #6]
 10050 0046 120A     		lsrs	r2, r2, #8
 10051 0048 DA75     		strb	r2, [r3, #23]
3889:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 10052              		.loc 1 3889 5 view .LVU3624
 10053 004a AA88     		ldrh	r2, [r5, #4]
 10054 004c 1A76     		strb	r2, [r3, #24]
3889:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 10055              		.loc 1 3889 5 view .LVU3625
 10056 004e AA88     		ldrh	r2, [r5, #4]
 10057 0050 120A     		lsrs	r2, r2, #8
 10058 0052 5A76     		strb	r2, [r3, #25]
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10059              		.loc 1 3890 5 view .LVU3626
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10060              		.loc 1 3890 7 is_stmt 0 view .LVU3627
 10061 0054 8698     		ldr	r0, [sp, #536]
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10062              		.loc 1 3890 18 view .LVU3628
 10063 0056 0123     		movs	r3, #1
 10064              	.LVL1132:
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10065              		.loc 1 3890 18 view .LVU3629
 10066 0058 80F80432 		strb	r3, [r0, #516]
3891:source\fatfs/ff.c **** 			}
 10067              		.loc 1 3891 5 is_stmt 1 view .LVU3630
3891:source\fatfs/ff.c **** 			}
 10068              		.loc 1 3891 11 is_stmt 0 view .LVU3631
 10069 005c FFF7FEFF 		bl	sync_fs
 10070              	.LVL1133:
 10071 0060 0446     		mov	r4, r0
 10072              	.LVL1134:
 10073              	.L963:
3897:source\fatfs/ff.c **** 
 10074              		.loc 1 3897 1 view .LVU3632
 10075 0062 2046     		mov	r0, r4
 10076 0064 0DF5107D 		add	sp, sp, #576
 10077              		.cfi_remember_state
 10078              		.cfi_def_cfa_offset 16
 10079              		@ sp needed
 10080 0068 70BD     		pop	{r4, r5, r6, pc}
 10081              	.LVL1135:
 10082              	.L964:
 10083              		.cfi_restore_state
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10084              		.loc 1 3878 3 view .LVU3633
 10085 006a 1124     		movs	r4, #17
 10086 006c F9E7     		b	.L963
 10087              	.LVL1136:
 10088              	.L965:
3886:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
 10089              		.loc 1 3886 9 view .LVU3634
 10090 006e 0624     		movs	r4, #6
 10091              	.LVL1137:
3886:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
 10092              		.loc 1 3886 9 view .LVU3635
 10093 0070 F7E7     		b	.L963
 10094              		.cfi_endproc
 10095              	.LFE186:
 10097              		.section	.rodata.f_mkfs.str1.1,"aMS",%progbits,1
 10098              	.LC2:
 10099 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10099      53444F53 
 10099      352E3000 
 10100              	.LC3:
 10101 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10101      414D4520 
 10101      20202046 
 10101      41543332 
 10101      20202000 
 10102              	.LC4:
 10103 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 10103      414D4520 
 10103      20202046 
 10103      41542020 
 10103      20202000 
 10104              		.section	.text.f_mkfs,"ax",%progbits
 10105              		.align	1
 10106              		.global	f_mkfs
 10107              		.syntax unified
 10108              		.thumb
 10109              		.thumb_func
 10111              	f_mkfs:
 10112              	.LVL1138:
 10113              	.LFB187:
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10114              		.loc 1 4143 1 is_stmt 1 view -0
 10115              		.cfi_startproc
 10116              		@ args = 0, pretend = 0, frame = 24
 10117              		@ frame_needed = 0, uses_anonymous_args = 0
4144:source\fatfs/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
 10118              		.loc 1 4144 2 view .LVU3637
4145:source\fatfs/ff.c **** 	int vol;
 10119              		.loc 1 4145 2 view .LVU3638
4146:source\fatfs/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
 10120              		.loc 1 4146 2 view .LVU3639
4147:source\fatfs/ff.c **** 	DWORD n_clst, vs, n, wsect;
 10121              		.loc 1 4147 2 view .LVU3640
4148:source\fatfs/ff.c **** 	UINT i;
 10122              		.loc 1 4148 2 view .LVU3641
4149:source\fatfs/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
 10123              		.loc 1 4149 2 view .LVU3642
4150:source\fatfs/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
 10124              		.loc 1 4150 2 view .LVU3643
4151:source\fatfs/ff.c **** 	FATFS *fs;
 10125              		.loc 1 4151 2 view .LVU3644
4152:source\fatfs/ff.c **** 	DSTATUS stat;
 10126              		.loc 1 4152 2 view .LVU3645
4153:source\fatfs/ff.c **** #if _USE_TRIM
 10127              		.loc 1 4153 2 view .LVU3646
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10128              		.loc 1 4160 2 view .LVU3647
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10129              		.loc 1 4143 1 is_stmt 0 view .LVU3648
 10130 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 10131              		.cfi_def_cfa_offset 36
 10132              		.cfi_offset 4, -36
 10133              		.cfi_offset 5, -32
 10134              		.cfi_offset 6, -28
 10135              		.cfi_offset 7, -24
 10136              		.cfi_offset 8, -20
 10137              		.cfi_offset 9, -16
 10138              		.cfi_offset 10, -12
 10139              		.cfi_offset 11, -8
 10140              		.cfi_offset 14, -4
 10141 0004 87B0     		sub	sp, sp, #28
 10142              		.cfi_def_cfa_offset 64
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10143              		.loc 1 4160 5 view .LVU3649
 10144 0006 0129     		cmp	r1, #1
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10145              		.loc 1 4143 1 view .LVU3650
 10146 0008 0390     		str	r0, [sp, #12]
 10147 000a 8B46     		mov	fp, r1
 10148 000c 1646     		mov	r6, r2
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10149              		.loc 1 4160 5 view .LVU3651
 10150 000e 00F28B82 		bhi	.L1008
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10151              		.loc 1 4161 2 is_stmt 1 view .LVU3652
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10152              		.loc 1 4161 8 is_stmt 0 view .LVU3653
 10153 0012 03A8     		add	r0, sp, #12
 10154              	.LVL1139:
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10155              		.loc 1 4161 8 view .LVU3654
 10156 0014 FFF7FEFF 		bl	get_ldnumber
 10157              	.LVL1140:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 10158              		.loc 1 4162 2 is_stmt 1 view .LVU3655
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 10159              		.loc 1 4162 5 is_stmt 0 view .LVU3656
 10160 0018 0028     		cmp	r0, #0
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 10161              		.loc 1 4162 5 view .LVU3657
 10162 001a C0F28782 		blt	.L1009
4163:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10163              		.loc 1 4163 2 is_stmt 1 view .LVU3658
4163:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10164              		.loc 1 4163 5 is_stmt 0 view .LVU3659
 10165 001e 574B     		ldr	r3, .L1027
 10166 0020 53F82040 		ldr	r4, [r3, r0, lsl #2]
 10167              	.LVL1141:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 10168              		.loc 1 4164 2 is_stmt 1 view .LVU3660
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 10169              		.loc 1 4164 5 is_stmt 0 view .LVU3661
 10170 0024 002C     		cmp	r4, #0
 10171 0026 00F08382 		beq	.L1010
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10172              		.loc 1 4165 2 is_stmt 1 view .LVU3662
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10173              		.loc 1 4165 14 is_stmt 0 view .LVU3663
 10174 002a 0023     		movs	r3, #0
4166:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10175              		.loc 1 4166 7 view .LVU3664
 10176 002c C7B2     		uxtb	r7, r0
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10177              		.loc 1 4165 14 view .LVU3665
 10178 002e 84F80032 		strb	r3, [r4, #512]
4166:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10179              		.loc 1 4166 2 is_stmt 1 view .LVU3666
 10180              	.LVL1142:
4167:source\fatfs/ff.c **** 
 10181              		.loc 1 4167 2 view .LVU3667
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10182              		.loc 1 4170 2 view .LVU3668
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10183              		.loc 1 4170 9 is_stmt 0 view .LVU3669
 10184 0032 3846     		mov	r0, r7
 10185              	.LVL1143:
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10186              		.loc 1 4170 9 view .LVU3670
 10187 0034 FFF7FEFF 		bl	disk_initialize
 10188              	.LVL1144:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10189              		.loc 1 4171 2 is_stmt 1 view .LVU3671
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10190              		.loc 1 4171 5 is_stmt 0 view .LVU3672
 10191 0038 C207     		lsls	r2, r0, #31
 10192 003a 00F17B82 		bmi	.L1011
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 10193              		.loc 1 4172 2 is_stmt 1 view .LVU3673
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 10194              		.loc 1 4172 5 is_stmt 0 view .LVU3674
 10195 003e 4307     		lsls	r3, r0, #29
 10196 0040 00F17A82 		bmi	.L1012
4177:source\fatfs/ff.c **** 		/* Get partition information from partition table in the MBR */
 10197              		.loc 1 4177 2 is_stmt 1 view .LVU3675
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10198              		.loc 1 4187 3 view .LVU3676
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10199              		.loc 1 4187 7 is_stmt 0 view .LVU3677
 10200 0044 05AA     		add	r2, sp, #20
 10201 0046 0121     		movs	r1, #1
 10202 0048 3846     		mov	r0, r7
 10203              	.LVL1145:
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10204              		.loc 1 4187 7 view .LVU3678
 10205 004a FFF7FEFF 		bl	disk_ioctl
 10206              	.LVL1146:
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10207              		.loc 1 4187 6 view .LVU3679
 10208 004e 18B1     		cbz	r0, .L968
 10209              	.LVL1147:
 10210              	.L969:
4188:source\fatfs/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 10211              		.loc 1 4188 11 view .LVU3680
 10212 0050 0120     		movs	r0, #1
 10213              	.LVL1148:
 10214              	.L1022:
4375:source\fatfs/ff.c **** 
 10215              		.loc 1 4375 1 view .LVU3681
 10216 0052 07B0     		add	sp, sp, #28
 10217              		.cfi_remember_state
 10218              		.cfi_def_cfa_offset 36
 10219              		@ sp needed
 10220 0054 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 10221              	.LVL1149:
 10222              	.L968:
 10223              		.cfi_restore_state
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10224              		.loc 1 4187 69 discriminator 1 view .LVU3682
 10225 0058 0599     		ldr	r1, [sp, #20]
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10226              		.loc 1 4187 60 discriminator 1 view .LVU3683
 10227 005a 7F29     		cmp	r1, #127
 10228 005c F8D9     		bls	.L969
4189:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 10229              		.loc 1 4189 3 is_stmt 1 view .LVU3684
4189:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 10230              		.loc 1 4189 21 is_stmt 0 view .LVU3685
 10231 005e BBF1000F 		cmp	fp, #0
 10232 0062 14BF     		ite	ne
 10233 0064 4FF00009 		movne	r9, #0
 10234 0068 4FF03F09 		moveq	r9, #63
 10235              	.LVL1150:
4190:source\fatfs/ff.c **** 	}
 10236              		.loc 1 4190 3 is_stmt 1 view .LVU3686
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10237              		.loc 1 4193 15 is_stmt 0 view .LVU3687
 10238 006c 731E     		subs	r3, r6, #1
4190:source\fatfs/ff.c **** 	}
 10239              		.loc 1 4190 9 view .LVU3688
 10240 006e A1EB0901 		sub	r1, r1, r9
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10241              		.loc 1 4193 5 view .LVU3689
 10242 0072 3342     		tst	r3, r6
4190:source\fatfs/ff.c **** 	}
 10243              		.loc 1 4190 9 view .LVU3690
 10244 0074 0591     		str	r1, [sp, #20]
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10245              		.loc 1 4193 2 is_stmt 1 view .LVU3691
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10246              		.loc 1 4193 5 is_stmt 0 view .LVU3692
 10247 0076 00D1     		bne	.L971
4194:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 10248              		.loc 1 4194 2 is_stmt 1 view .LVU3693
4194:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 10249              		.loc 1 4194 5 is_stmt 0 view .LVU3694
 10250 0078 66B9     		cbnz	r6, .L972
 10251              	.L971:
 10252              	.LVL1151:
4195:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 10253              		.loc 1 4195 3 is_stmt 1 view .LVU3695
 10254 007a 4148     		ldr	r0, .L1027+4
4196:source\fatfs/ff.c **** 		au = cst[i];
 10255              		.loc 1 4196 10 is_stmt 0 view .LVU3696
 10256 007c 0023     		movs	r3, #0
4195:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 10257              		.loc 1 4195 6 view .LVU3697
 10258 007e 4FF4FA62 		mov	r2, #2000
 10259 0082 B1FBF2F2 		udiv	r2, r1, r2
 10260              	.LVL1152:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10261              		.loc 1 4196 3 is_stmt 1 view .LVU3698
 10262              	.L973:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10263              		.loc 1 4196 15 discriminator 1 view .LVU3699
4196:source\fatfs/ff.c **** 		au = cst[i];
 10264              		.loc 1 4196 23 is_stmt 0 discriminator 1 view .LVU3700
 10265 0086 30F8025B 		ldrh	r5, [r0], #2
4196:source\fatfs/ff.c **** 		au = cst[i];
 10266              		.loc 1 4196 3 discriminator 1 view .LVU3701
 10267 008a AA42     		cmp	r2, r5
 10268 008c 22D3     		bcc	.L974
4197:source\fatfs/ff.c **** 	}
 10269              		.loc 1 4197 3 is_stmt 1 view .LVU3702
4197:source\fatfs/ff.c **** 	}
 10270              		.loc 1 4197 11 is_stmt 0 view .LVU3703
 10271 008e 3D4A     		ldr	r2, .L1027+8
 10272              	.LVL1153:
4197:source\fatfs/ff.c **** 	}
 10273              		.loc 1 4197 6 view .LVU3704
 10274 0090 32F81360 		ldrh	r6, [r2, r3, lsl #1]
 10275              	.LVL1154:
 10276              	.L972:
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10277              		.loc 1 4199 2 is_stmt 1 view .LVU3705
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10278              		.loc 1 4199 5 is_stmt 0 view .LVU3706
 10279 0094 B6F5007F 		cmp	r6, #512
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10280              		.loc 1 4199 21 is_stmt 1 view .LVU3707
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10281              		.loc 1 4199 24 is_stmt 0 view .LVU3708
 10282 0098 28BF     		it	cs
 10283 009a 760A     		lsrcs	r6, r6, #9
 10284              	.LVL1155:
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10285              		.loc 1 4200 2 is_stmt 1 view .LVU3709
 10286 009c 802E     		cmp	r6, #128
 10287 009e 28BF     		it	cs
 10288 00a0 8026     		movcs	r6, #128
 10289              	.LVL1156:
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10290              		.loc 1 4200 2 is_stmt 0 view .LVU3710
 10291 00a2 012E     		cmp	r6, #1
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10292              		.loc 1 4206 5 view .LVU3711
 10293 00a4 40F6F573 		movw	r3, #4085
 10294 00a8 38BF     		it	cc
 10295 00aa 0126     		movcc	r6, #1
 10296              	.LVL1157:
4204:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 10297              		.loc 1 4204 2 is_stmt 1 view .LVU3712
4204:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 10298              		.loc 1 4204 9 is_stmt 0 view .LVU3713
 10299 00ac B1FBF6F5 		udiv	r5, r1, r6
 10300              	.LVL1158:
4205:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 10301              		.loc 1 4205 2 is_stmt 1 view .LVU3714
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10302              		.loc 1 4206 2 view .LVU3715
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10303              		.loc 1 4206 5 is_stmt 0 view .LVU3716
 10304 00b0 9D42     		cmp	r5, r3
 10305 00b2 00F24382 		bhi	.L976
4207:source\fatfs/ff.c **** 
 10306              		.loc 1 4207 2 is_stmt 1 discriminator 1 view .LVU3717
4210:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 10307              		.loc 1 4210 2 discriminator 1 view .LVU3718
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10308              		.loc 1 4215 3 discriminator 1 view .LVU3719
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10309              		.loc 1 4215 39 is_stmt 0 discriminator 1 view .LVU3720
 10310 00b6 05EB4505 		add	r5, r5, r5, lsl #1
 10311              	.LVL1159:
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10312              		.loc 1 4215 43 discriminator 1 view .LVU3721
 10313 00ba 0135     		adds	r5, r5, #1
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10314              		.loc 1 4215 48 discriminator 1 view .LVU3722
 10315 00bc 6D08     		lsrs	r5, r5, #1
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10316              		.loc 1 4215 56 discriminator 1 view .LVU3723
 10317 00be 0335     		adds	r5, r5, #3
4205:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 10318              		.loc 1 4205 6 discriminator 1 view .LVU3724
 10319 00c0 4FF00108 		mov	r8, #1
 10320              	.LVL1160:
 10321              	.L979:
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10322              		.loc 1 4216 3 is_stmt 1 discriminator 4 view .LVU3725
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10323              		.loc 1 4216 27 is_stmt 0 discriminator 4 view .LVU3726
 10324 00c4 05F2FF15 		addw	r5, r5, #511
 10325              	.LVL1161:
4218:source\fatfs/ff.c **** 	}
 10326              		.loc 1 4218 9 discriminator 4 view .LVU3727
 10327 00c8 2023     		movs	r3, #32
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10328              		.loc 1 4216 9 discriminator 4 view .LVU3728
 10329 00ca 6D0A     		lsrs	r5, r5, #9
 10330              	.LVL1162:
4217:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 10331              		.loc 1 4217 3 is_stmt 1 discriminator 4 view .LVU3729
4218:source\fatfs/ff.c **** 	}
 10332              		.loc 1 4218 3 discriminator 4 view .LVU3730
4218:source\fatfs/ff.c **** 	}
 10333              		.loc 1 4218 9 is_stmt 0 discriminator 4 view .LVU3731
 10334 00cc 0193     		str	r3, [sp, #4]
4217:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 10335              		.loc 1 4217 9 discriminator 4 view .LVU3732
 10336 00ce 4FF0010A 		mov	r10, #1
 10337 00d2 0BE0     		b	.L978
 10338              	.LVL1163:
 10339              	.L974:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10340              		.loc 1 4196 33 is_stmt 1 discriminator 3 view .LVU3733
4196:source\fatfs/ff.c **** 		au = cst[i];
 10341              		.loc 1 4196 28 discriminator 3 view .LVU3734
4196:source\fatfs/ff.c **** 		au = cst[i];
 10342              		.loc 1 4196 29 is_stmt 0 discriminator 3 view .LVU3735
 10343 00d4 0133     		adds	r3, r3, #1
 10344              	.LVL1164:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10345              		.loc 1 4196 29 discriminator 3 view .LVU3736
 10346 00d6 D6E7     		b	.L973
 10347              	.LVL1165:
 10348              	.L1006:
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10349              		.loc 1 4211 3 is_stmt 1 view .LVU3737
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10350              		.loc 1 4211 29 is_stmt 0 view .LVU3738
 10351 00d8 AD00     		lsls	r5, r5, #2
 10352              	.LVL1166:
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10353              		.loc 1 4211 38 view .LVU3739
 10354 00da 05F20725 		addw	r5, r5, #519
4213:source\fatfs/ff.c **** 	} else {
 10355              		.loc 1 4213 9 view .LVU3740
 10356 00de 0023     		movs	r3, #0
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10357              		.loc 1 4211 9 view .LVU3741
 10358 00e0 6D0A     		lsrs	r5, r5, #9
 10359              	.LVL1167:
4212:source\fatfs/ff.c **** 		n_dir = 0;
 10360              		.loc 1 4212 3 is_stmt 1 view .LVU3742
4213:source\fatfs/ff.c **** 	} else {
 10361              		.loc 1 4213 3 view .LVU3743
4213:source\fatfs/ff.c **** 	} else {
 10362              		.loc 1 4213 3 is_stmt 0 view .LVU3744
 10363 00e2 4FF00308 		mov	r8, #3
4213:source\fatfs/ff.c **** 	} else {
 10364              		.loc 1 4213 9 view .LVU3745
 10365 00e6 0193     		str	r3, [sp, #4]
4212:source\fatfs/ff.c **** 		n_dir = 0;
 10366              		.loc 1 4212 9 view .LVU3746
 10367 00e8 4FF0200A 		mov	r10, #32
 10368              	.LVL1168:
 10369              	.L978:
4220:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 10370              		.loc 1 4220 2 is_stmt 1 view .LVU3747
4220:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 10371              		.loc 1 4220 8 is_stmt 0 view .LVU3748
 10372 00ec 0AEB0903 		add	r3, r10, r9
 10373 00f0 0093     		str	r3, [sp]
 10374              	.LVL1169:
4221:source\fatfs/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
 10375              		.loc 1 4221 2 is_stmt 1 view .LVU3749
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10376              		.loc 1 4222 2 view .LVU3750
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10377              		.loc 1 4222 9 is_stmt 0 view .LVU3751
 10378 00f2 019B     		ldr	r3, [sp, #4]
 10379              	.LVL1170:
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10380              		.loc 1 4222 9 view .LVU3752
 10381 00f4 009A     		ldr	r2, [sp]
 10382 00f6 EB18     		adds	r3, r5, r3
 10383 00f8 1344     		add	r3, r3, r2
 10384              	.LVL1171:
4223:source\fatfs/ff.c **** 
 10385              		.loc 1 4223 2 is_stmt 1 view .LVU3753
4223:source\fatfs/ff.c **** 
 10386              		.loc 1 4223 26 is_stmt 0 view .LVU3754
 10387 00fa A6EB0902 		sub	r2, r6, r9
 10388 00fe 1A44     		add	r2, r2, r3
4223:source\fatfs/ff.c **** 
 10389              		.loc 1 4223 5 view .LVU3755
 10390 0100 9142     		cmp	r1, r2
 10391 0102 01D2     		bcs	.L980
 10392              	.LVL1172:
 10393              	.L986:
4223:source\fatfs/ff.c **** 
 10394              		.loc 1 4223 42 view .LVU3756
 10395 0104 0E20     		movs	r0, #14
 10396 0106 A4E7     		b	.L1022
 10397              	.LVL1173:
 10398              	.L980:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10399              		.loc 1 4226 6 view .LVU3757
 10400 0108 04AA     		add	r2, sp, #16
 10401 010a 0321     		movs	r1, #3
 10402              	.LVL1174:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10403              		.loc 1 4226 6 view .LVU3758
 10404 010c 3846     		mov	r0, r7
 10405 010e 0293     		str	r3, [sp, #8]
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10406              		.loc 1 4226 2 is_stmt 1 view .LVU3759
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10407              		.loc 1 4226 6 is_stmt 0 view .LVU3760
 10408 0110 FFF7FEFF 		bl	disk_ioctl
 10409              	.LVL1175:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10410              		.loc 1 4226 5 view .LVU3761
 10411 0114 029B     		ldr	r3, [sp, #8]
 10412 0116 20B9     		cbnz	r0, .L981
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10413              		.loc 1 4226 53 discriminator 2 view .LVU3762
 10414 0118 049A     		ldr	r2, [sp, #16]
 10415 011a 013A     		subs	r2, r2, #1
 10416 011c B2F5004F 		cmp	r2, #32768
 10417 0120 01D3     		bcc	.L982
 10418              	.L981:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10419              		.loc 1 4226 73 is_stmt 1 discriminator 5 view .LVU3763
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10420              		.loc 1 4226 75 is_stmt 0 discriminator 5 view .LVU3764
 10421 0122 0122     		movs	r2, #1
 10422 0124 0492     		str	r2, [sp, #16]
 10423              	.L982:
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10424              		.loc 1 4227 2 is_stmt 1 view .LVU3765
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10425              		.loc 1 4227 14 is_stmt 0 view .LVU3766
 10426 0126 0499     		ldr	r1, [sp, #16]
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10427              		.loc 1 4228 2 is_stmt 1 view .LVU3767
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10428              		.loc 1 4227 18 is_stmt 0 view .LVU3768
 10429 0128 4A1E     		subs	r2, r1, #1
 10430 012a 1A44     		add	r2, r2, r3
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10431              		.loc 1 4227 25 view .LVU3769
 10432 012c 4942     		rsbs	r1, r1, #0
4229:source\fatfs/ff.c **** 		n_rsv += n;
 10433              		.loc 1 4229 5 view .LVU3770
 10434 012e B8F1030F 		cmp	r8, #3
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10435              		.loc 1 4227 23 view .LVU3771
 10436 0132 02EA0102 		and	r2, r2, r1
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10437              		.loc 1 4228 9 view .LVU3772
 10438 0136 A2EB0303 		sub	r3, r2, r3
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10439              		.loc 1 4231 9 view .LVU3773
 10440 013a 08BF     		it	eq
 10441 013c 009A     		ldreq	r2, [sp]
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10442              		.loc 1 4228 4 view .LVU3774
 10443 013e 0493     		str	r3, [sp, #16]
4229:source\fatfs/ff.c **** 		n_rsv += n;
 10444              		.loc 1 4229 2 is_stmt 1 view .LVU3775
4230:source\fatfs/ff.c **** 		b_fat += n;
 10445              		.loc 1 4230 3 view .LVU3776
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10446              		.loc 1 4231 9 is_stmt 0 view .LVU3777
 10447 0140 05BF     		ittet	eq
 10448 0142 D218     		addeq	r2, r2, r3
4230:source\fatfs/ff.c **** 		b_fat += n;
 10449              		.loc 1 4230 9 view .LVU3778
 10450 0144 9A44     		addeq	r10, r10, r3
 10451              	.LVL1176:
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10452              		.loc 1 4231 3 is_stmt 1 view .LVU3779
4233:source\fatfs/ff.c **** 	}
 10453              		.loc 1 4233 9 is_stmt 0 view .LVU3780
 10454 0146 ED18     		addne	r5, r5, r3
 10455              	.LVL1177:
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10456              		.loc 1 4231 9 view .LVU3781
 10457 0148 0092     		streq	r2, [sp]
 10458              	.LVL1178:
4233:source\fatfs/ff.c **** 	}
 10459              		.loc 1 4233 3 is_stmt 1 view .LVU3782
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10460              		.loc 1 4237 2 view .LVU3783
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10461              		.loc 1 4237 43 is_stmt 0 view .LVU3784
 10462 014a 019B     		ldr	r3, [sp, #4]
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10463              		.loc 1 4237 18 view .LVU3785
 10464 014c 059A     		ldr	r2, [sp, #20]
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10465              		.loc 1 4237 43 view .LVU3786
 10466 014e D31A     		subs	r3, r2, r3
 10467 0150 A3EB0A03 		sub	r3, r3, r10
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10468              		.loc 1 4238 5 view .LVU3787
 10469 0154 B8F1020F 		cmp	r8, #2
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10470              		.loc 1 4237 43 view .LVU3788
 10471 0158 A3EB0503 		sub	r3, r3, r5
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10472              		.loc 1 4237 9 view .LVU3789
 10473 015c B3FBF6F3 		udiv	r3, r3, r6
 10474 0160 0293     		str	r3, [sp, #8]
 10475              	.LVL1179:
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10476              		.loc 1 4238 2 is_stmt 1 view .LVU3790
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10477              		.loc 1 4238 5 is_stmt 0 view .LVU3791
 10478 0162 11D1     		bne	.L985
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10479              		.loc 1 4238 26 discriminator 1 view .LVU3792
 10480 0164 0299     		ldr	r1, [sp, #8]
 10481 0166 40F6F573 		movw	r3, #4085
 10482              	.LVL1180:
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10483              		.loc 1 4238 26 discriminator 1 view .LVU3793
 10484 016a 9942     		cmp	r1, r3
 10485 016c CAD9     		bls	.L986
 10486              	.LVL1181:
 10487              	.L987:
4249:source\fatfs/ff.c **** 		}
 10488              		.loc 1 4249 4 is_stmt 1 view .LVU3794
4249:source\fatfs/ff.c **** 		}
 10489              		.loc 1 4249 8 is_stmt 0 view .LVU3795
 10490 016e B2F5803F 		cmp	r2, #65536
 10491 0172 2CBF     		ite	cs
 10492 0174 0623     		movcs	r3, #6
 10493 0176 0423     		movcc	r3, #4
 10494 0178 10E0     		b	.L989
 10495              	.L1028:
 10496 017a 00BF     		.align	2
 10497              	.L1027:
 10498 017c 00000000 		.word	.LANCHOR1
 10499 0180 00000000 		.word	.LANCHOR4
 10500 0184 00000000 		.word	.LANCHOR5
 10501              	.LVL1182:
 10502              	.L985:
4239:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
 10503              		.loc 1 4239 3 view .LVU3796
 10504 0188 B8F1030F 		cmp	r8, #3
 10505 018c 40F01381 		bne	.L988
4239:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
 10506              		.loc 1 4239 23 discriminator 1 view .LVU3797
 10507 0190 029A     		ldr	r2, [sp, #8]
 10508 0192 4FF6F573 		movw	r3, #65525
 10509 0196 9A42     		cmp	r2, r3
 10510 0198 B4D9     		bls	.L986
4244:source\fatfs/ff.c **** 	} else {
 10511              		.loc 1 4244 7 view .LVU3798
 10512 019a 0C23     		movs	r3, #12
 10513              	.L989:
 10514              	.LVL1183:
4253:source\fatfs/ff.c **** 		/* Update system ID in the partition table */
 10515              		.loc 1 4253 2 is_stmt 1 view .LVU3799
4261:source\fatfs/ff.c **** 			md = 0xF0;
 10516              		.loc 1 4261 3 view .LVU3800
4261:source\fatfs/ff.c **** 			md = 0xF0;
 10517              		.loc 1 4261 6 is_stmt 0 view .LVU3801
 10518 019c BBF1000F 		cmp	fp, #0
 10519 01a0 40F01381 		bne	.L1016
4264:source\fatfs/ff.c **** 			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 10520              		.loc 1 4264 4 is_stmt 1 view .LVU3802
 10521 01a4 4FF40072 		mov	r2, #512
 10522 01a8 5946     		mov	r1, fp
 10523 01aa 2046     		mov	r0, r4
 10524 01ac FFF7FEFF 		bl	mem_set
 10525              	.LVL1184:
4265:source\fatfs/ff.c **** 			tbl[1] = 1;						/* Partition start head */
 10526              		.loc 1 4265 4 view .LVU3803
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10527              		.loc 1 4266 4 view .LVU3804
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10528              		.loc 1 4271 15 is_stmt 0 view .LVU3805
 10529 01b0 059A     		ldr	r2, [sp, #20]
4269:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 10530              		.loc 1 4269 11 view .LVU3806
 10531 01b2 84F8C231 		strb	r3, [r4, #450]
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10532              		.loc 1 4270 11 view .LVU3807
 10533 01b6 FE23     		movs	r3, #254
 10534              	.LVL1185:
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10535              		.loc 1 4271 15 view .LVU3808
 10536 01b8 09EB0200 		add	r0, r9, r2
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10537              		.loc 1 4270 11 view .LVU3809
 10538 01bc 84F8C331 		strb	r3, [r4, #451]
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10539              		.loc 1 4271 29 view .LVU3810
 10540 01c0 43F6C163 		movw	r3, #16065
 10541 01c4 B0FBF3F0 		udiv	r0, r0, r3
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10542              		.loc 1 4272 22 view .LVU3811
 10543 01c8 8308     		lsrs	r3, r0, #2
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10544              		.loc 1 4272 13 view .LVU3812
 10545 01ca 43F03F03 		orr	r3, r3, #63
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10546              		.loc 1 4272 11 view .LVU3813
 10547 01ce 84F8C431 		strb	r3, [r4, #452]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10548              		.loc 1 4274 4 view .LVU3814
 10549 01d2 3F23     		movs	r3, #63
 10550 01d4 84F8C631 		strb	r3, [r4, #454]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10551              		.loc 1 4275 4 view .LVU3815
 10552 01d8 C2F30723 		ubfx	r3, r2, #8, #8
 10553 01dc 84F8CB31 		strb	r3, [r4, #459]
 10554 01e0 130C     		lsrs	r3, r2, #16
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10555              		.loc 1 4266 11 view .LVU3816
 10556 01e2 4FF0010C 		mov	ip, #1
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10557              		.loc 1 4275 4 view .LVU3817
 10558 01e6 84F8CA21 		strb	r2, [r4, #458]
 10559 01ea 84F8CC31 		strb	r3, [r4, #460]
 10560 01ee 120E     		lsrs	r2, r2, #24
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10561              		.loc 1 4276 4 view .LVU3818
 10562 01f0 4AF65523 		movw	r3, #43605
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10563              		.loc 1 4271 6 view .LVU3819
 10564 01f4 0490     		str	r0, [sp, #16]
4273:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 10565              		.loc 1 4273 13 view .LVU3820
 10566 01f6 84F8C501 		strb	r0, [r4, #453]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10567              		.loc 1 4275 4 view .LVU3821
 10568 01fa 84F8CD21 		strb	r2, [r4, #461]
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10569              		.loc 1 4276 4 view .LVU3822
 10570 01fe A4F8FE31 		strh	r3, [r4, #510]	@ movhi
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10571              		.loc 1 4266 11 view .LVU3823
 10572 0202 84F8BFC1 		strb	ip, [r4, #447]
4267:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 10573              		.loc 1 4267 4 is_stmt 1 view .LVU3824
4267:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 10574              		.loc 1 4267 11 is_stmt 0 view .LVU3825
 10575 0206 84F8C0C1 		strb	ip, [r4, #448]
4268:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
 10576              		.loc 1 4268 4 is_stmt 1 view .LVU3826
4268:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
 10577              		.loc 1 4268 11 is_stmt 0 view .LVU3827
 10578 020a 84F8C1B1 		strb	fp, [r4, #449]
4269:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 10579              		.loc 1 4269 4 is_stmt 1 view .LVU3828
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10580              		.loc 1 4270 4 view .LVU3829
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10581              		.loc 1 4271 4 view .LVU3830
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10582              		.loc 1 4272 4 view .LVU3831
4273:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 10583              		.loc 1 4273 4 view .LVU3832
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10584              		.loc 1 4274 4 view .LVU3833
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10585              		.loc 1 4274 4 view .LVU3834
 10586 020e 84F8C7B1 		strb	fp, [r4, #455]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10587              		.loc 1 4274 4 view .LVU3835
 10588 0212 84F8C8B1 		strb	fp, [r4, #456]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10589              		.loc 1 4274 4 view .LVU3836
 10590 0216 84F8C9B1 		strb	fp, [r4, #457]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10591              		.loc 1 4275 4 view .LVU3837
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10592              		.loc 1 4275 4 view .LVU3838
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10593              		.loc 1 4275 4 view .LVU3839
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10594              		.loc 1 4275 4 view .LVU3840
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10595              		.loc 1 4276 4 view .LVU3841
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10596              		.loc 1 4276 4 view .LVU3842
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10597              		.loc 1 4277 4 view .LVU3843
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10598              		.loc 1 4277 8 is_stmt 0 view .LVU3844
 10599 021a 6346     		mov	r3, ip
 10600 021c 5A46     		mov	r2, fp
 10601 021e 2146     		mov	r1, r4
 10602 0220 3846     		mov	r0, r7
 10603 0222 FFF7FEFF 		bl	disk_write
 10604              	.LVL1186:
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10605              		.loc 1 4277 7 view .LVU3845
 10606 0226 0028     		cmp	r0, #0
 10607 0228 7FF412AF 		bne	.L969
4279:source\fatfs/ff.c **** 		}
 10608              		.loc 1 4279 7 view .LVU3846
 10609 022c 4FF0F80B 		mov	fp, #248
 10610              	.LVL1187:
 10611              	.L990:
4284:source\fatfs/ff.c **** 	mem_set(tbl, 0, SS(fs));
 10612              		.loc 1 4284 2 is_stmt 1 view .LVU3847
4285:source\fatfs/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 10613              		.loc 1 4285 2 view .LVU3848
 10614 0230 4FF40072 		mov	r2, #512
 10615 0234 0021     		movs	r1, #0
 10616 0236 2046     		mov	r0, r4
 10617 0238 FFF7FEFF 		bl	mem_set
 10618              	.LVL1188:
4286:source\fatfs/ff.c **** 	i = SS(fs);								/* Sector size */
 10619              		.loc 1 4286 2 view .LVU3849
 10620 023c C449     		ldr	r1, .L1029
 10621 023e 0B22     		movs	r2, #11
 10622 0240 2046     		mov	r0, r4
 10623 0242 FFF7FEFF 		bl	mem_cpy
 10624              	.LVL1189:
4287:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_BytsPerSec, i);
 10625              		.loc 1 4287 2 view .LVU3850
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10626              		.loc 1 4288 2 view .LVU3851
 10627 0246 0023     		movs	r3, #0
4292:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
 10628              		.loc 1 4292 28 is_stmt 0 view .LVU3852
 10629 0248 B8F1030F 		cmp	r8, #3
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10630              		.loc 1 4288 2 view .LVU3853
 10631 024c E372     		strb	r3, [r4, #11]
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10632              		.loc 1 4288 2 is_stmt 1 view .LVU3854
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10633              		.loc 1 4293 2 is_stmt 0 view .LVU3855
 10634 024e 6374     		strb	r3, [r4, #17]
 10635 0250 18BF     		it	ne
 10636 0252 4FF40073 		movne	r3, #512
 10637 0256 1B0A     		lsrs	r3, r3, #8
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10638              		.loc 1 4288 2 view .LVU3856
 10639 0258 0222     		movs	r2, #2
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10640              		.loc 1 4293 2 view .LVU3857
 10641 025a A374     		strb	r3, [r4, #18]
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10642              		.loc 1 4294 12 view .LVU3858
 10643 025c 059B     		ldr	r3, [sp, #20]
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10644              		.loc 1 4288 2 view .LVU3859
 10645 025e 2273     		strb	r2, [r4, #12]
4289:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 10646              		.loc 1 4289 2 is_stmt 1 view .LVU3860
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10647              		.loc 1 4291 19 is_stmt 0 view .LVU3861
 10648 0260 0122     		movs	r2, #1
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10649              		.loc 1 4294 5 view .LVU3862
 10650 0262 B3F5803F 		cmp	r3, #65536
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10651              		.loc 1 4291 19 view .LVU3863
 10652 0266 2274     		strb	r2, [r4, #16]
4295:source\fatfs/ff.c **** 	} else {
 10653              		.loc 1 4295 3 view .LVU3864
 10654 0268 C3F30722 		ubfx	r2, r3, #8, #8
 10655 026c D9B2     		uxtb	r1, r3
4297:source\fatfs/ff.c **** 	}
 10656              		.loc 1 4297 3 view .LVU3865
 10657 026e 21BF     		itttt	cs
 10658 0270 84F82120 		strbcs	r2, [r4, #33]
 10659 0274 1A0C     		lsrcs	r2, r3, #16
 10660 0276 1B0E     		lsrcs	r3, r3, #24
 10661 0278 84F82330 		strbcs	r3, [r4, #35]
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10662              		.loc 1 4290 2 view .LVU3866
 10663 027c 84F80EA0 		strb	r10, [r4, #14]
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10664              		.loc 1 4300 2 view .LVU3867
 10665 0280 4FF03F03 		mov	r3, #63
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10666              		.loc 1 4290 2 view .LVU3868
 10667 0284 CAF3072A 		ubfx	r10, r10, #8, #8
 10668              	.LVL1190:
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10669              		.loc 1 4290 2 view .LVU3869
 10670 0288 84F80FA0 		strb	r10, [r4, #15]
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10671              		.loc 1 4300 2 view .LVU3870
 10672 028c 2376     		strb	r3, [r4, #24]
 10673 028e 4FF0000A 		mov	r10, #0
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10674              		.loc 1 4301 2 view .LVU3871
 10675 0292 4FF0FF03 		mov	r3, #255
4295:source\fatfs/ff.c **** 	} else {
 10676              		.loc 1 4295 3 view .LVU3872
 10677 0296 39BF     		ittee	cc
 10678 0298 E174     		strbcc	r1, [r4, #19]
 10679 029a 2275     		strbcc	r2, [r4, #20]
4297:source\fatfs/ff.c **** 	}
 10680              		.loc 1 4297 3 view .LVU3873
 10681 029c 84F82010 		strbcs	r1, [r4, #32]
 10682 02a0 84F82220 		strbcs	r2, [r4, #34]
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10683              		.loc 1 4301 2 view .LVU3874
 10684 02a4 A376     		strb	r3, [r4, #26]
4289:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 10685              		.loc 1 4289 24 view .LVU3875
 10686 02a6 6673     		strb	r6, [r4, #13]
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10687              		.loc 1 4290 2 is_stmt 1 view .LVU3876
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10688              		.loc 1 4290 2 view .LVU3877
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10689              		.loc 1 4291 2 view .LVU3878
4292:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
 10690              		.loc 1 4292 2 view .LVU3879
 10691              	.LVL1191:
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10692              		.loc 1 4293 2 view .LVU3880
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10693              		.loc 1 4293 2 view .LVU3881
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10694              		.loc 1 4294 2 view .LVU3882
4295:source\fatfs/ff.c **** 	} else {
 10695              		.loc 1 4295 3 view .LVU3883
4295:source\fatfs/ff.c **** 	} else {
 10696              		.loc 1 4295 3 view .LVU3884
4297:source\fatfs/ff.c **** 	}
 10697              		.loc 1 4297 3 view .LVU3885
4297:source\fatfs/ff.c **** 	}
 10698              		.loc 1 4297 3 view .LVU3886
4297:source\fatfs/ff.c **** 	}
 10699              		.loc 1 4297 3 view .LVU3887
4297:source\fatfs/ff.c **** 	}
 10700              		.loc 1 4297 3 view .LVU3888
4299:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 10701              		.loc 1 4299 2 view .LVU3889
4299:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 10702              		.loc 1 4299 17 is_stmt 0 view .LVU3890
 10703 02a8 84F815B0 		strb	fp, [r4, #21]
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10704              		.loc 1 4300 2 is_stmt 1 view .LVU3891
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10705              		.loc 1 4300 2 view .LVU3892
 10706 02ac 84F819A0 		strb	r10, [r4, #25]
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10707              		.loc 1 4301 2 view .LVU3893
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10708              		.loc 1 4301 2 view .LVU3894
 10709 02b0 84F81BA0 		strb	r10, [r4, #27]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10710              		.loc 1 4302 2 view .LVU3895
 10711 02b4 84F81C90 		strb	r9, [r4, #28]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10712              		.loc 1 4302 2 view .LVU3896
 10713 02b8 84F81DA0 		strb	r10, [r4, #29]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10714              		.loc 1 4302 2 view .LVU3897
 10715 02bc 84F81EA0 		strb	r10, [r4, #30]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10716              		.loc 1 4302 2 view .LVU3898
 10717 02c0 84F81FA0 		strb	r10, [r4, #31]
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10718              		.loc 1 4303 2 view .LVU3899
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10719              		.loc 1 4303 6 is_stmt 0 view .LVU3900
 10720 02c4 FFF7FEFF 		bl	get_fattime
 10721              	.LVL1192:
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10722              		.loc 1 4304 5 view .LVU3901
 10723 02c8 B8F1030F 		cmp	r8, #3
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10724              		.loc 1 4303 4 view .LVU3902
 10725 02cc 0490     		str	r0, [sp, #16]
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10726              		.loc 1 4304 2 is_stmt 1 view .LVU3903
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10727              		.loc 1 4306 3 is_stmt 0 view .LVU3904
 10728 02ce E9B2     		uxtb	r1, r5
 10729 02d0 C5F30722 		ubfx	r2, r5, #8, #8
 10730 02d4 83B2     		uxth	r3, r0
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10731              		.loc 1 4304 5 view .LVU3905
 10732 02d6 7BD1     		bne	.L994
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10733              		.loc 1 4305 3 is_stmt 1 view .LVU3906
 10734 02d8 1B0A     		lsrs	r3, r3, #8
 10735 02da 84F84430 		strb	r3, [r4, #68]
 10736 02de 030C     		lsrs	r3, r0, #16
 10737 02e0 84F84530 		strb	r3, [r4, #69]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10738              		.loc 1 4306 3 is_stmt 0 view .LVU3907
 10739 02e4 2B0C     		lsrs	r3, r5, #16
 10740 02e6 84F82630 		strb	r3, [r4, #38]
 10741 02ea 2B0E     		lsrs	r3, r5, #24
 10742 02ec 84F82730 		strb	r3, [r4, #39]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10743              		.loc 1 4307 3 view .LVU3908
 10744 02f0 0223     		movs	r3, #2
 10745 02f2 84F82C30 		strb	r3, [r4, #44]
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10746              		.loc 1 4308 3 view .LVU3909
 10747 02f6 0123     		movs	r3, #1
 10748 02f8 84F83030 		strb	r3, [r4, #48]
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10749              		.loc 1 4309 3 view .LVU3910
 10750 02fc 0623     		movs	r3, #6
 10751 02fe 84F83230 		strb	r3, [r4, #50]
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10752              		.loc 1 4310 20 view .LVU3911
 10753 0302 8023     		movs	r3, #128
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10754              		.loc 1 4305 3 view .LVU3912
 10755 0304 84F84300 		strb	r0, [r4, #67]
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10756              		.loc 1 4305 3 is_stmt 1 view .LVU3913
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10757              		.loc 1 4305 3 view .LVU3914
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10758              		.loc 1 4305 3 view .LVU3915
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10759              		.loc 1 4306 3 is_stmt 0 view .LVU3916
 10760 0308 84F82410 		strb	r1, [r4, #36]
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10761              		.loc 1 4305 3 view .LVU3917
 10762 030c 000E     		lsrs	r0, r0, #24
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10763              		.loc 1 4310 20 view .LVU3918
 10764 030e 84F84030 		strb	r3, [r4, #64]
4312:source\fatfs/ff.c **** 	} else {
 10765              		.loc 1 4312 3 view .LVU3919
 10766 0312 9049     		ldr	r1, .L1029+4
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10767              		.loc 1 4305 3 view .LVU3920
 10768 0314 84F84600 		strb	r0, [r4, #70]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10769              		.loc 1 4306 3 is_stmt 1 view .LVU3921
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10770              		.loc 1 4306 3 view .LVU3922
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10771              		.loc 1 4311 21 is_stmt 0 view .LVU3923
 10772 0318 2923     		movs	r3, #41
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10773              		.loc 1 4306 3 view .LVU3924
 10774 031a 84F82520 		strb	r2, [r4, #37]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10775              		.loc 1 4306 3 is_stmt 1 view .LVU3925
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10776              		.loc 1 4306 3 view .LVU3926
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10777              		.loc 1 4307 3 view .LVU3927
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10778              		.loc 1 4307 3 view .LVU3928
 10779 031e 84F82DA0 		strb	r10, [r4, #45]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10780              		.loc 1 4307 3 view .LVU3929
 10781 0322 84F82EA0 		strb	r10, [r4, #46]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10782              		.loc 1 4307 3 view .LVU3930
 10783 0326 84F82FA0 		strb	r10, [r4, #47]
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10784              		.loc 1 4308 3 view .LVU3931
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10785              		.loc 1 4308 3 view .LVU3932
 10786 032a 84F831A0 		strb	r10, [r4, #49]
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10787              		.loc 1 4309 3 view .LVU3933
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10788              		.loc 1 4309 3 view .LVU3934
 10789 032e 84F833A0 		strb	r10, [r4, #51]
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10790              		.loc 1 4310 3 view .LVU3935
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10791              		.loc 1 4311 3 view .LVU3936
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10792              		.loc 1 4311 21 is_stmt 0 view .LVU3937
 10793 0332 84F84230 		strb	r3, [r4, #66]
4312:source\fatfs/ff.c **** 	} else {
 10794              		.loc 1 4312 3 is_stmt 1 view .LVU3938
 10795 0336 1322     		movs	r2, #19
 10796 0338 04F14700 		add	r0, r4, #71
 10797              	.L1026:
4318:source\fatfs/ff.c **** 	}
 10798              		.loc 1 4318 3 is_stmt 0 view .LVU3939
 10799 033c FFF7FEFF 		bl	mem_cpy
 10800              	.LVL1193:
4320:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 10801              		.loc 1 4320 2 is_stmt 1 view .LVU3940
 10802 0340 5523     		movs	r3, #85
 10803 0342 84F8FE31 		strb	r3, [r4, #510]
4320:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 10804              		.loc 1 4320 2 view .LVU3941
 10805 0346 AA23     		movs	r3, #170
 10806 0348 84F8FF31 		strb	r3, [r4, #511]
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10807              		.loc 1 4321 2 view .LVU3942
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10808              		.loc 1 4321 6 is_stmt 0 view .LVU3943
 10809 034c 4A46     		mov	r2, r9
 10810 034e 0123     		movs	r3, #1
 10811 0350 2146     		mov	r1, r4
 10812 0352 3846     		mov	r0, r7
 10813 0354 FFF7FEFF 		bl	disk_write
 10814              	.LVL1194:
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10815              		.loc 1 4321 5 view .LVU3944
 10816 0358 0028     		cmp	r0, #0
 10817 035a 7FF479AE 		bne	.L969
4323:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 10818              		.loc 1 4323 2 is_stmt 1 view .LVU3945
4323:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 10819              		.loc 1 4323 5 is_stmt 0 view .LVU3946
 10820 035e B8F1030F 		cmp	r8, #3
 10821 0362 06D1     		bne	.L996
4324:source\fatfs/ff.c **** 
 10822              		.loc 1 4324 3 is_stmt 1 view .LVU3947
 10823 0364 0123     		movs	r3, #1
 10824 0366 09F10602 		add	r2, r9, #6
 10825 036a 2146     		mov	r1, r4
 10826 036c 3846     		mov	r0, r7
 10827 036e FFF7FEFF 		bl	disk_write
 10828              	.LVL1195:
 10829              	.L996:
4328:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 10830              		.loc 1 4328 14 view .LVU3948
4329:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
 10831              		.loc 1 4329 3 view .LVU3949
 10832 0372 4FF40072 		mov	r2, #512
 10833 0376 0021     		movs	r1, #0
 10834 0378 2046     		mov	r0, r4
 10835 037a FFF7FEFF 		bl	mem_set
 10836              	.LVL1196:
4330:source\fatfs/ff.c **** 		if (fmt != FS_FAT32) {
 10837              		.loc 1 4330 3 view .LVU3950
4331:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 10838              		.loc 1 4331 3 view .LVU3951
4331:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 10839              		.loc 1 4331 6 is_stmt 0 view .LVU3952
 10840 037e B8F1030F 		cmp	r8, #3
 10841 0382 3DD1     		bne	.L1004
4335:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 10842              		.loc 1 4335 4 is_stmt 1 view .LVU3953
4335:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 10843              		.loc 1 4335 6 is_stmt 0 view .LVU3954
 10844 0384 6BF0FF03 		orn	r3, fp, #255
 10845 0388 0493     		str	r3, [sp, #16]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 10846              		.loc 1 4336 4 is_stmt 1 view .LVU3955
 10847 038a 2370     		strb	r3, [r4]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 10848              		.loc 1 4336 4 view .LVU3956
 10849 038c BDF81030 		ldrh	r3, [sp, #16]
 10850 0390 1B0A     		lsrs	r3, r3, #8
 10851 0392 6370     		strb	r3, [r4, #1]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 10852              		.loc 1 4336 4 view .LVU3957
 10853 0394 BDF81230 		ldrh	r3, [sp, #18]
 10854 0398 A370     		strb	r3, [r4, #2]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 10855              		.loc 1 4336 4 view .LVU3958
 10856 039a 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
 10857 039e E370     		strb	r3, [r4, #3]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 10858              		.loc 1 4337 4 view .LVU3959
 10859 03a0 FF23     		movs	r3, #255
 10860 03a2 2371     		strb	r3, [r4, #4]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 10861              		.loc 1 4337 4 view .LVU3960
 10862 03a4 6371     		strb	r3, [r4, #5]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 10863              		.loc 1 4337 4 view .LVU3961
 10864 03a6 A371     		strb	r3, [r4, #6]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 10865              		.loc 1 4337 4 view .LVU3962
 10866 03a8 E371     		strb	r3, [r4, #7]
4338:source\fatfs/ff.c **** 		}
 10867              		.loc 1 4338 4 view .LVU3963
 10868 03aa 2372     		strb	r3, [r4, #8]
4338:source\fatfs/ff.c **** 		}
 10869              		.loc 1 4338 4 view .LVU3964
 10870 03ac 6372     		strb	r3, [r4, #9]
4338:source\fatfs/ff.c **** 		}
 10871              		.loc 1 4338 4 view .LVU3965
 10872 03ae A372     		strb	r3, [r4, #10]
4338:source\fatfs/ff.c **** 		}
 10873              		.loc 1 4338 4 view .LVU3966
 10874 03b0 0F23     		movs	r3, #15
 10875 03b2 E372     		strb	r3, [r4, #11]
 10876 03b4 38E0     		b	.L998
 10877              	.LVL1197:
 10878              	.L988:
4243:source\fatfs/ff.c **** 		sys = 0x0C;		/* FAT32X */
 10879              		.loc 1 4243 2 view .LVU3967
4246:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
 10880              		.loc 1 4246 3 view .LVU3968
4246:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
 10881              		.loc 1 4246 6 is_stmt 0 view .LVU3969
 10882 03b6 B8F1010F 		cmp	r8, #1
 10883 03ba 7FF4D8AE 		bne	.L987
4247:source\fatfs/ff.c **** 		} else {
 10884              		.loc 1 4247 8 discriminator 1 view .LVU3970
 10885 03be B2F5803F 		cmp	r2, #65536
 10886 03c2 2CBF     		ite	cs
 10887 03c4 0623     		movcs	r3, #6
 10888 03c6 0123     		movcc	r3, #1
 10889 03c8 E8E6     		b	.L989
 10890              	.LVL1198:
 10891              	.L1016:
4262:source\fatfs/ff.c **** 		} else {	/* Create partition table (FDISK) */
 10892              		.loc 1 4262 7 view .LVU3971
 10893 03ca 4FF0F00B 		mov	fp, #240
 10894 03ce 2FE7     		b	.L990
 10895              	.LVL1199:
 10896              	.L994:
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10897              		.loc 1 4314 3 is_stmt 1 view .LVU3972
 10898 03d0 1B0A     		lsrs	r3, r3, #8
 10899 03d2 84F82830 		strb	r3, [r4, #40]
 10900 03d6 030C     		lsrs	r3, r0, #16
 10901 03d8 84F82930 		strb	r3, [r4, #41]
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 10902              		.loc 1 4316 18 is_stmt 0 view .LVU3973
 10903 03dc 8023     		movs	r3, #128
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10904              		.loc 1 4314 3 view .LVU3974
 10905 03de 84F82700 		strb	r0, [r4, #39]
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10906              		.loc 1 4314 3 is_stmt 1 view .LVU3975
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10907              		.loc 1 4314 3 view .LVU3976
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10908              		.loc 1 4314 3 view .LVU3977
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 10909              		.loc 1 4316 18 is_stmt 0 view .LVU3978
 10910 03e2 84F82430 		strb	r3, [r4, #36]
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10911              		.loc 1 4314 3 view .LVU3979
 10912 03e6 000E     		lsrs	r0, r0, #24
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 10913              		.loc 1 4317 19 view .LVU3980
 10914 03e8 2923     		movs	r3, #41
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 10915              		.loc 1 4314 3 view .LVU3981
 10916 03ea 84F82A00 		strb	r0, [r4, #42]
4315:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 10917              		.loc 1 4315 3 is_stmt 1 view .LVU3982
 10918 03ee A175     		strb	r1, [r4, #22]
4315:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 10919              		.loc 1 4315 3 view .LVU3983
 10920 03f0 E275     		strb	r2, [r4, #23]
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 10921              		.loc 1 4316 3 view .LVU3984
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 10922              		.loc 1 4317 3 view .LVU3985
4318:source\fatfs/ff.c **** 	}
 10923              		.loc 1 4318 3 is_stmt 0 view .LVU3986
 10924 03f2 5949     		ldr	r1, .L1029+8
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 10925              		.loc 1 4317 19 view .LVU3987
 10926 03f4 84F82630 		strb	r3, [r4, #38]
4318:source\fatfs/ff.c **** 	}
 10927              		.loc 1 4318 3 is_stmt 1 view .LVU3988
 10928 03f8 1322     		movs	r2, #19
 10929 03fa 04F12B00 		add	r0, r4, #43
 10930 03fe 9DE7     		b	.L1026
 10931              	.LVL1200:
 10932              	.L1004:
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10933              		.loc 1 4332 4 view .LVU3989
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10934              		.loc 1 4332 40 is_stmt 0 view .LVU3990
 10935 0400 564B     		ldr	r3, .L1029+12
 10936 0402 B8F1010F 		cmp	r8, #1
 10937 0406 18BF     		it	ne
 10938 0408 6FF0FF03 		mvnne	r3, #255
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10939              		.loc 1 4332 6 view .LVU3991
 10940 040c 43EA0B03 		orr	r3, r3, fp
 10941 0410 0493     		str	r3, [sp, #16]
4333:source\fatfs/ff.c **** 		} else {
 10942              		.loc 1 4333 4 is_stmt 1 view .LVU3992
 10943 0412 2370     		strb	r3, [r4]
4333:source\fatfs/ff.c **** 		} else {
 10944              		.loc 1 4333 4 view .LVU3993
 10945 0414 BDF81030 		ldrh	r3, [sp, #16]
 10946 0418 1B0A     		lsrs	r3, r3, #8
 10947 041a 6370     		strb	r3, [r4, #1]
4333:source\fatfs/ff.c **** 		} else {
 10948              		.loc 1 4333 4 view .LVU3994
 10949 041c BDF81230 		ldrh	r3, [sp, #18]
 10950 0420 A370     		strb	r3, [r4, #2]
4333:source\fatfs/ff.c **** 		} else {
 10951              		.loc 1 4333 4 view .LVU3995
 10952 0422 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
 10953 0426 E370     		strb	r3, [r4, #3]
 10954              	.L998:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10955              		.loc 1 4340 3 view .LVU3996
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10956              		.loc 1 4340 7 is_stmt 0 view .LVU3997
 10957 0428 009B     		ldr	r3, [sp]
 10958 042a 009A     		ldr	r2, [sp]
 10959 042c 2146     		mov	r1, r4
 10960 042e 03F1010A 		add	r10, r3, #1
 10961              	.LVL1201:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10962              		.loc 1 4340 7 view .LVU3998
 10963 0432 3846     		mov	r0, r7
 10964 0434 0123     		movs	r3, #1
 10965 0436 FFF7FEFF 		bl	disk_write
 10966              	.LVL1202:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10967              		.loc 1 4340 6 view .LVU3999
 10968 043a 0146     		mov	r1, r0
 10969 043c 0028     		cmp	r0, #0
 10970 043e 7FF407AE 		bne	.L969
4342:source\fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 10971              		.loc 1 4342 3 is_stmt 1 view .LVU4000
 10972 0442 4FF40072 		mov	r2, #512
 10973 0446 2046     		mov	r0, r4
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10974              		.loc 1 4343 10 is_stmt 0 view .LVU4001
 10975 0448 0123     		movs	r3, #1
4342:source\fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 10976              		.loc 1 4342 3 view .LVU4002
 10977 044a FFF7FEFF 		bl	mem_set
 10978              	.LVL1203:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10979              		.loc 1 4343 3 is_stmt 1 view .LVU4003
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10980              		.loc 1 4343 10 is_stmt 0 view .LVU4004
 10981 044e 0493     		str	r3, [sp, #16]
 10982              	.LVL1204:
 10983              	.L999:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10984              		.loc 1 4343 15 is_stmt 1 discriminator 1 view .LVU4005
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10985              		.loc 1 4343 3 is_stmt 0 discriminator 1 view .LVU4006
 10986 0450 049B     		ldr	r3, [sp, #16]
 10987 0452 9D42     		cmp	r5, r3
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10988              		.loc 1 4344 8 discriminator 1 view .LVU4007
 10989 0454 0AF1010B 		add	fp, r10, #1
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10990              		.loc 1 4343 3 discriminator 1 view .LVU4008
 10991 0458 58D8     		bhi	.L1000
 10992              	.LVL1205:
4328:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 10993              		.loc 1 4328 14 is_stmt 1 view .LVU4009
4350:source\fatfs/ff.c **** 	do {
 10994              		.loc 1 4350 2 view .LVU4010
4350:source\fatfs/ff.c **** 	do {
 10995              		.loc 1 4350 29 is_stmt 0 view .LVU4011
 10996 045a 019B     		ldr	r3, [sp, #4]
 10997 045c B8F1030F 		cmp	r8, #3
 10998 0460 18BF     		it	ne
 10999 0462 1E46     		movne	r6, r3
 11000              	.LVL1206:
4354:source\fatfs/ff.c **** 
 11001              		.loc 1 4354 2 view .LVU4012
 11002 0464 5644     		add	r6, r6, r10
 11003              	.LVL1207:
 11004              	.L1002:
4351:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 11005              		.loc 1 4351 2 is_stmt 1 view .LVU4013
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 11006              		.loc 1 4352 3 view .LVU4014
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 11007              		.loc 1 4352 3 is_stmt 0 view .LVU4015
 11008 0466 5246     		mov	r2, r10
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 11009              		.loc 1 4352 7 view .LVU4016
 11010 0468 0123     		movs	r3, #1
 11011 046a 2146     		mov	r1, r4
 11012 046c 3846     		mov	r0, r7
 11013 046e 9A44     		add	r10, r10, r3
 11014              	.LVL1208:
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 11015              		.loc 1 4352 7 view .LVU4017
 11016 0470 FFF7FEFF 		bl	disk_write
 11017              	.LVL1209:
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 11018              		.loc 1 4352 6 view .LVU4018
 11019 0474 0028     		cmp	r0, #0
 11020 0476 7FF4EBAD 		bne	.L969
4354:source\fatfs/ff.c **** 
 11021              		.loc 1 4354 10 is_stmt 1 view .LVU4019
4354:source\fatfs/ff.c **** 
 11022              		.loc 1 4354 2 is_stmt 0 view .LVU4020
 11023 047a B245     		cmp	r10, r6
 11024 047c F3D1     		bne	.L1002
4364:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 11025              		.loc 1 4364 2 is_stmt 1 view .LVU4021
4364:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 11026              		.loc 1 4364 5 is_stmt 0 view .LVU4022
 11027 047e B8F1030F 		cmp	r8, #3
 11028 0482 3AD1     		bne	.L1003
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11029              		.loc 1 4365 3 is_stmt 1 view .LVU4023
 11030 0484 5223     		movs	r3, #82
 11031 0486 2370     		strb	r3, [r4]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11032              		.loc 1 4365 3 view .LVU4024
 11033 0488 6370     		strb	r3, [r4, #1]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11034              		.loc 1 4365 3 view .LVU4025
 11035 048a 6123     		movs	r3, #97
 11036 048c A370     		strb	r3, [r4, #2]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11037              		.loc 1 4365 3 view .LVU4026
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11038              		.loc 1 4366 3 is_stmt 0 view .LVU4027
 11039 048e 84F8E731 		strb	r3, [r4, #487]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11040              		.loc 1 4367 3 view .LVU4028
 11041 0492 029B     		ldr	r3, [sp, #8]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11042              		.loc 1 4368 3 view .LVU4029
 11043 0494 84F8ED01 		strb	r0, [r4, #493]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11044              		.loc 1 4367 3 view .LVU4030
 11045 0498 013B     		subs	r3, r3, #1
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11046              		.loc 1 4365 3 view .LVU4031
 11047 049a 4122     		movs	r2, #65
 11048 049c E270     		strb	r2, [r4, #3]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11049              		.loc 1 4366 3 is_stmt 1 view .LVU4032
 11050 049e 84F8E621 		strb	r2, [r4, #486]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11051              		.loc 1 4367 3 is_stmt 0 view .LVU4033
 11052 04a2 C3F30722 		ubfx	r2, r3, #8, #8
 11053 04a6 84F8E831 		strb	r3, [r4, #488]
 11054 04aa 84F8E921 		strb	r2, [r4, #489]
 11055 04ae 1A0C     		lsrs	r2, r3, #16
 11056 04b0 1B0E     		lsrs	r3, r3, #24
 11057 04b2 84F8EB31 		strb	r3, [r4, #491]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11058              		.loc 1 4368 3 view .LVU4034
 11059 04b6 0223     		movs	r3, #2
 11060 04b8 84F8EC31 		strb	r3, [r4, #492]
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11061              		.loc 1 4369 3 view .LVU4035
 11062 04bc 5523     		movs	r3, #85
 11063 04be 84F8FE31 		strb	r3, [r4, #510]
 11064 04c2 AA23     		movs	r3, #170
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11065              		.loc 1 4366 3 view .LVU4036
 11066 04c4 7221     		movs	r1, #114
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11067              		.loc 1 4369 3 view .LVU4037
 11068 04c6 84F8FF31 		strb	r3, [r4, #511]
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11069              		.loc 1 4370 3 view .LVU4038
 11070 04ca 0123     		movs	r3, #1
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11071              		.loc 1 4366 3 view .LVU4039
 11072 04cc 84F8E411 		strb	r1, [r4, #484]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11073              		.loc 1 4366 3 is_stmt 1 view .LVU4040
 11074 04d0 84F8E511 		strb	r1, [r4, #485]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11075              		.loc 1 4366 3 view .LVU4041
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11076              		.loc 1 4366 3 view .LVU4042
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11077              		.loc 1 4367 3 view .LVU4043
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11078              		.loc 1 4367 3 view .LVU4044
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11079              		.loc 1 4367 3 view .LVU4045
 11080 04d4 84F8EA21 		strb	r2, [r4, #490]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11081              		.loc 1 4367 3 view .LVU4046
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11082              		.loc 1 4368 3 view .LVU4047
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11083              		.loc 1 4368 3 view .LVU4048
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11084              		.loc 1 4368 3 view .LVU4049
 11085 04d8 84F8EE01 		strb	r0, [r4, #494]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11086              		.loc 1 4368 3 view .LVU4050
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11087              		.loc 1 4370 3 is_stmt 0 view .LVU4051
 11088 04dc 09EB0302 		add	r2, r9, r3
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11089              		.loc 1 4368 3 view .LVU4052
 11090 04e0 84F8EF01 		strb	r0, [r4, #495]
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11091              		.loc 1 4369 3 is_stmt 1 view .LVU4053
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11092              		.loc 1 4369 3 view .LVU4054
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11093              		.loc 1 4370 3 view .LVU4055
 11094 04e4 2146     		mov	r1, r4
 11095 04e6 3846     		mov	r0, r7
 11096 04e8 FFF7FEFF 		bl	disk_write
 11097              	.LVL1210:
4371:source\fatfs/ff.c **** 	}
 11098              		.loc 1 4371 3 view .LVU4056
 11099 04ec 0123     		movs	r3, #1
 11100 04ee 09F10702 		add	r2, r9, #7
 11101 04f2 2146     		mov	r1, r4
 11102 04f4 3846     		mov	r0, r7
 11103 04f6 FFF7FEFF 		bl	disk_write
 11104              	.LVL1211:
 11105              	.L1003:
4374:source\fatfs/ff.c **** }
 11106              		.loc 1 4374 2 view .LVU4057
4374:source\fatfs/ff.c **** }
 11107              		.loc 1 4374 10 is_stmt 0 view .LVU4058
 11108 04fa 0022     		movs	r2, #0
 11109 04fc 1146     		mov	r1, r2
 11110 04fe 3846     		mov	r0, r7
 11111 0500 FFF7FEFF 		bl	disk_ioctl
 11112              	.LVL1212:
4374:source\fatfs/ff.c **** }
 11113              		.loc 1 4374 60 view .LVU4059
 11114 0504 0038     		subs	r0, r0, #0
 11115 0506 18BF     		it	ne
 11116 0508 0120     		movne	r0, #1
 11117 050a A2E5     		b	.L1022
 11118              	.LVL1213:
 11119              	.L1000:
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11120              		.loc 1 4344 4 is_stmt 1 view .LVU4060
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11121              		.loc 1 4344 8 is_stmt 0 view .LVU4061
 11122 050c 0123     		movs	r3, #1
 11123 050e 5246     		mov	r2, r10
 11124 0510 2146     		mov	r1, r4
 11125 0512 3846     		mov	r0, r7
 11126 0514 FFF7FEFF 		bl	disk_write
 11127              	.LVL1214:
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11128              		.loc 1 4344 7 view .LVU4062
 11129 0518 0028     		cmp	r0, #0
 11130 051a 7FF499AD 		bne	.L969
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 11131              		.loc 1 4343 26 is_stmt 1 discriminator 2 view .LVU4063
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 11132              		.loc 1 4343 27 is_stmt 0 discriminator 2 view .LVU4064
 11133 051e 049B     		ldr	r3, [sp, #16]
 11134 0520 0133     		adds	r3, r3, #1
 11135 0522 0493     		str	r3, [sp, #16]
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11136              		.loc 1 4344 8 discriminator 2 view .LVU4065
 11137 0524 DA46     		mov	r10, fp
 11138              	.LVL1215:
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11139              		.loc 1 4344 8 discriminator 2 view .LVU4066
 11140 0526 93E7     		b	.L999
 11141              	.LVL1216:
 11142              	.L1008:
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 11143              		.loc 1 4160 22 view .LVU4067
 11144 0528 1320     		movs	r0, #19
 11145              	.LVL1217:
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 11146              		.loc 1 4160 22 view .LVU4068
 11147 052a 92E5     		b	.L1022
 11148              	.LVL1218:
 11149              	.L1009:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 11150              		.loc 1 4162 22 view .LVU4069
 11151 052c 0B20     		movs	r0, #11
 11152              	.LVL1219:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 11153              		.loc 1 4162 22 view .LVU4070
 11154 052e 90E5     		b	.L1022
 11155              	.LVL1220:
 11156              	.L1010:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 11157              		.loc 1 4164 18 view .LVU4071
 11158 0530 0C20     		movs	r0, #12
 11159              	.LVL1221:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 11160              		.loc 1 4164 18 view .LVU4072
 11161 0532 8EE5     		b	.L1022
 11162              	.LVL1222:
 11163              	.L1011:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 11164              		.loc 1 4171 32 view .LVU4073
 11165 0534 0320     		movs	r0, #3
 11166              	.LVL1223:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 11167              		.loc 1 4171 32 view .LVU4074
 11168 0536 8CE5     		b	.L1022
 11169              	.LVL1224:
 11170              	.L1012:
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 11171              		.loc 1 4172 33 view .LVU4075
 11172 0538 0A20     		movs	r0, #10
 11173              	.LVL1225:
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 11174              		.loc 1 4172 33 view .LVU4076
 11175 053a 8AE5     		b	.L1022
 11176              	.LVL1226:
 11177              	.L976:
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 11178              		.loc 1 4206 27 is_stmt 1 view .LVU4077
4207:source\fatfs/ff.c **** 
 11179              		.loc 1 4207 2 view .LVU4078
4207:source\fatfs/ff.c **** 
 11180              		.loc 1 4207 5 is_stmt 0 view .LVU4079
 11181 053c 4FF6F573 		movw	r3, #65525
 11182 0540 9D42     		cmp	r5, r3
 11183 0542 3FF6C9AD 		bhi	.L1006
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 11184              		.loc 1 4215 71 discriminator 2 view .LVU4080
 11185 0546 0235     		adds	r5, r5, #2
 11186              	.LVL1227:
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 11187              		.loc 1 4215 56 discriminator 2 view .LVU4081
 11188 0548 6D00     		lsls	r5, r5, #1
 11189              	.LVL1228:
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 11190              		.loc 1 4215 56 discriminator 2 view .LVU4082
 11191 054a 4FF00208 		mov	r8, #2
 11192 054e B9E5     		b	.L979
 11193              	.L1030:
 11194              		.align	2
 11195              	.L1029:
 11196 0550 00000000 		.word	.LC2
 11197 0554 0C000000 		.word	.LC3
 11198 0558 20000000 		.word	.LC4
 11199 055c 00FFFF00 		.word	16776960
 11200              		.cfi_endproc
 11201              	.LFE187:
 11203              		.section	.text.f_gets,"ax",%progbits
 11204              		.align	1
 11205              		.global	f_gets
 11206              		.syntax unified
 11207              		.thumb
 11208              		.thumb_func
 11210              	f_gets:
 11211              	.LVL1229:
 11212              	.LFB188:
4462:source\fatfs/ff.c **** 	int n = 0;
 11213              		.loc 1 4462 1 is_stmt 1 view -0
 11214              		.cfi_startproc
 11215              		@ args = 0, pretend = 0, frame = 8
 11216              		@ frame_needed = 0, uses_anonymous_args = 0
4463:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
 11217              		.loc 1 4463 2 view .LVU4084
4464:source\fatfs/ff.c **** 	BYTE s[2];
 11218              		.loc 1 4464 2 view .LVU4085
4465:source\fatfs/ff.c **** 	UINT rc;
 11219              		.loc 1 4465 2 view .LVU4086
4466:source\fatfs/ff.c **** 
 11220              		.loc 1 4466 2 view .LVU4087
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11221              		.loc 1 4469 2 view .LVU4088
4462:source\fatfs/ff.c **** 	int n = 0;
 11222              		.loc 1 4462 1 is_stmt 0 view .LVU4089
 11223 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 11224              		.cfi_def_cfa_offset 32
 11225              		.cfi_offset 4, -24
 11226              		.cfi_offset 5, -20
 11227              		.cfi_offset 6, -16
 11228              		.cfi_offset 7, -12
 11229              		.cfi_offset 8, -8
 11230              		.cfi_offset 14, -4
4462:source\fatfs/ff.c **** 	int n = 0;
 11231              		.loc 1 4462 1 view .LVU4090
 11232 0004 0446     		mov	r4, r0
 11233 0006 9046     		mov	r8, r2
4464:source\fatfs/ff.c **** 	BYTE s[2];
 11234              		.loc 1 4464 12 view .LVU4091
 11235 0008 0646     		mov	r6, r0
4463:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
 11236              		.loc 1 4463 6 view .LVU4092
 11237 000a 0025     		movs	r5, #0
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11238              		.loc 1 4469 17 view .LVU4093
 11239 000c 4F1E     		subs	r7, r1, #1
 11240              	.LVL1230:
 11241              	.L1034:
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11242              		.loc 1 4469 8 is_stmt 1 view .LVU4094
 11243 000e BD42     		cmp	r5, r7
 11244 0010 12DA     		bge	.L1033
4514:source\fatfs/ff.c **** 		if (rc != 1) break;
 11245              		.loc 1 4514 3 view .LVU4095
 11246 0012 01AB     		add	r3, sp, #4
 11247 0014 0122     		movs	r2, #1
 11248 0016 6946     		mov	r1, sp
 11249 0018 4046     		mov	r0, r8
 11250 001a FFF7FEFF 		bl	f_read
 11251              	.LVL1231:
4515:source\fatfs/ff.c **** 		c = s[0];
 11252              		.loc 1 4515 3 view .LVU4096
4515:source\fatfs/ff.c **** 		c = s[0];
 11253              		.loc 1 4515 6 is_stmt 0 view .LVU4097
 11254 001e 019B     		ldr	r3, [sp, #4]
 11255 0020 012B     		cmp	r3, #1
 11256 0022 09D1     		bne	.L1033
4516:source\fatfs/ff.c **** #endif
 11257              		.loc 1 4516 3 is_stmt 1 view .LVU4098
4516:source\fatfs/ff.c **** #endif
 11258              		.loc 1 4516 5 is_stmt 0 view .LVU4099
 11259 0024 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 11260              	.LVL1232:
4518:source\fatfs/ff.c **** 		*p++ = c;
 11261              		.loc 1 4518 3 is_stmt 1 view .LVU4100
4518:source\fatfs/ff.c **** 		*p++ = c;
 11262              		.loc 1 4518 6 is_stmt 0 view .LVU4101
 11263 0028 0D2B     		cmp	r3, #13
 11264 002a F0D0     		beq	.L1034
4519:source\fatfs/ff.c **** 		n++;
 11265              		.loc 1 4519 3 is_stmt 1 view .LVU4102
 11266              	.LVL1233:
4521:source\fatfs/ff.c **** 	}
 11267              		.loc 1 4521 6 is_stmt 0 view .LVU4103
 11268 002c 0A2B     		cmp	r3, #10
4519:source\fatfs/ff.c **** 		n++;
 11269              		.loc 1 4519 8 view .LVU4104
 11270 002e 06F8013B 		strb	r3, [r6], #1
 11271              	.LVL1234:
4520:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11272              		.loc 1 4520 3 is_stmt 1 view .LVU4105
4520:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11273              		.loc 1 4520 4 is_stmt 0 view .LVU4106
 11274 0032 05F10105 		add	r5, r5, #1
 11275              	.LVL1235:
4521:source\fatfs/ff.c **** 	}
 11276              		.loc 1 4521 3 is_stmt 1 view .LVU4107
4521:source\fatfs/ff.c **** 	}
 11277              		.loc 1 4521 6 is_stmt 0 view .LVU4108
 11278 0036 EAD1     		bne	.L1034
 11279              	.LVL1236:
 11280              	.L1033:
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11281              		.loc 1 4523 2 is_stmt 1 view .LVU4109
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11282              		.loc 1 4523 5 is_stmt 0 view .LVU4110
 11283 0038 0023     		movs	r3, #0
4524:source\fatfs/ff.c **** }
 11284              		.loc 1 4524 18 view .LVU4111
 11285 003a 9D42     		cmp	r5, r3
4525:source\fatfs/ff.c **** 
 11286              		.loc 1 4525 1 view .LVU4112
 11287 003c 14BF     		ite	ne
 11288 003e 2046     		movne	r0, r4
 11289 0040 1846     		moveq	r0, r3
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11290              		.loc 1 4523 5 view .LVU4113
 11291 0042 3370     		strb	r3, [r6]
4524:source\fatfs/ff.c **** }
 11292              		.loc 1 4524 2 is_stmt 1 view .LVU4114
4525:source\fatfs/ff.c **** 
 11293              		.loc 1 4525 1 is_stmt 0 view .LVU4115
 11294 0044 02B0     		add	sp, sp, #8
 11295              		.cfi_def_cfa_offset 24
 11296              		@ sp needed
 11297 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
4525:source\fatfs/ff.c **** 
 11298              		.loc 1 4525 1 view .LVU4116
 11299              		.cfi_endproc
 11300              	.LFE188:
 11302              		.section	.text.f_putc,"ax",%progbits
 11303              		.align	1
 11304              		.global	f_putc
 11305              		.syntax unified
 11306              		.thumb
 11307              		.thumb_func
 11309              	f_putc:
 11310              	.LVL1237:
 11311              	.LFB190:
4596:source\fatfs/ff.c **** 
4597:source\fatfs/ff.c **** 
4598:source\fatfs/ff.c **** 
4599:source\fatfs/ff.c **** int f_putc (
4600:source\fatfs/ff.c **** 	TCHAR c,	/* A character to be output */
4601:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
4602:source\fatfs/ff.c **** )
4603:source\fatfs/ff.c **** {
 11312              		.loc 1 4603 1 is_stmt 1 view -0
 11313              		.cfi_startproc
 11314              		@ args = 0, pretend = 0, frame = 80
 11315              		@ frame_needed = 0, uses_anonymous_args = 0
4604:source\fatfs/ff.c **** 	putbuff pb;
 11316              		.loc 1 4604 2 view .LVU4118
4605:source\fatfs/ff.c **** 	UINT nw;
 11317              		.loc 1 4605 2 view .LVU4119
4606:source\fatfs/ff.c **** 
4607:source\fatfs/ff.c **** 
4608:source\fatfs/ff.c **** 	pb.fp = fp;			/* Initialize output buffer */
 11318              		.loc 1 4608 2 view .LVU4120
4603:source\fatfs/ff.c **** 	putbuff pb;
 11319              		.loc 1 4603 1 is_stmt 0 view .LVU4121
 11320 0000 00B5     		push	{lr}
 11321              		.cfi_def_cfa_offset 4
 11322              		.cfi_offset 14, -4
 11323 0002 95B0     		sub	sp, sp, #84
 11324              		.cfi_def_cfa_offset 88
4609:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11325              		.loc 1 4609 19 view .LVU4122
 11326 0004 0023     		movs	r3, #0
4608:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11327              		.loc 1 4608 8 view .LVU4123
 11328 0006 0191     		str	r1, [sp, #4]
 11329              		.loc 1 4609 2 is_stmt 1 view .LVU4124
4610:source\fatfs/ff.c **** 
4611:source\fatfs/ff.c **** 	putc_bfd(&pb, c);	/* Put a character */
 11330              		.loc 1 4611 2 is_stmt 0 view .LVU4125
 11331 0008 0146     		mov	r1, r0
 11332              	.LVL1238:
 11333              		.loc 1 4611 2 view .LVU4126
 11334 000a 01A8     		add	r0, sp, #4
 11335              	.LVL1239:
4609:source\fatfs/ff.c **** 
 11336              		.loc 1 4609 10 view .LVU4127
 11337 000c CDE90233 		strd	r3, r3, [sp, #8]
 11338              		.loc 1 4611 2 is_stmt 1 view .LVU4128
 11339 0010 FFF7FEFF 		bl	putc_bfd
 11340              	.LVL1240:
4612:source\fatfs/ff.c **** 
4613:source\fatfs/ff.c **** 	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 11341              		.loc 1 4613 2 view .LVU4129
 11342              		.loc 1 4613 11 is_stmt 0 view .LVU4130
 11343 0014 029A     		ldr	r2, [sp, #8]
 11344              		.loc 1 4613 5 view .LVU4131
 11345 0016 002A     		cmp	r2, #0
 11346 0018 04DA     		bge	.L1043
 11347              	.L1045:
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4615:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4616:source\fatfs/ff.c **** 	return EOF;
 11348              		.loc 1 4616 9 view .LVU4132
 11349 001a 4FF0FF30 		mov	r0, #-1
 11350              	.L1042:
4617:source\fatfs/ff.c **** }
 11351              		.loc 1 4617 1 view .LVU4133
 11352 001e 15B0     		add	sp, sp, #84
 11353              		.cfi_remember_state
 11354              		.cfi_def_cfa_offset 4
 11355              		@ sp needed
 11356 0020 5DF804FB 		ldr	pc, [sp], #4
 11357              	.L1043:
 11358              		.cfi_restore_state
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11359              		.loc 1 4614 6 view .LVU4134
 11360 0024 0198     		ldr	r0, [sp, #4]
 11361 0026 6B46     		mov	r3, sp
 11362 0028 04A9     		add	r1, sp, #16
 11363 002a FFF7FEFF 		bl	f_write
 11364              	.LVL1241:
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11365              		.loc 1 4614 3 view .LVU4135
 11366 002e 0028     		cmp	r0, #0
 11367 0030 F3D1     		bne	.L1045
4615:source\fatfs/ff.c **** 	return EOF;
 11368              		.loc 1 4615 3 view .LVU4136
 11369 0032 029A     		ldr	r2, [sp, #8]
 11370 0034 009B     		ldr	r3, [sp]
 11371 0036 9A42     		cmp	r2, r3
 11372 0038 EFD1     		bne	.L1045
4615:source\fatfs/ff.c **** 	return EOF;
 11373              		.loc 1 4615 26 is_stmt 1 discriminator 1 view .LVU4137
4615:source\fatfs/ff.c **** 	return EOF;
 11374              		.loc 1 4615 35 is_stmt 0 discriminator 1 view .LVU4138
 11375 003a 0398     		ldr	r0, [sp, #12]
 11376 003c EFE7     		b	.L1042
 11377              		.cfi_endproc
 11378              	.LFE190:
 11380              		.section	.text.f_puts,"ax",%progbits
 11381              		.align	1
 11382              		.global	f_puts
 11383              		.syntax unified
 11384              		.thumb
 11385              		.thumb_func
 11387              	f_puts:
 11388              	.LVL1242:
 11389              	.LFB191:
4618:source\fatfs/ff.c **** 
4619:source\fatfs/ff.c **** 
4620:source\fatfs/ff.c **** 
4621:source\fatfs/ff.c **** 
4622:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4623:source\fatfs/ff.c **** /* Put a string to the file                                              */
4624:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4625:source\fatfs/ff.c **** 
4626:source\fatfs/ff.c **** int f_puts (
4627:source\fatfs/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
4628:source\fatfs/ff.c **** 	FIL* fp				/* Pointer to the file object */
4629:source\fatfs/ff.c **** )
4630:source\fatfs/ff.c **** {
 11390              		.loc 1 4630 1 is_stmt 1 view -0
 11391              		.cfi_startproc
 11392              		@ args = 0, pretend = 0, frame = 80
 11393              		@ frame_needed = 0, uses_anonymous_args = 0
4631:source\fatfs/ff.c **** 	putbuff pb;
 11394              		.loc 1 4631 2 view .LVU4140
4632:source\fatfs/ff.c **** 	UINT nw;
 11395              		.loc 1 4632 2 view .LVU4141
4633:source\fatfs/ff.c **** 
4634:source\fatfs/ff.c **** 
4635:source\fatfs/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 11396              		.loc 1 4635 2 view .LVU4142
4630:source\fatfs/ff.c **** 	putbuff pb;
 11397              		.loc 1 4630 1 is_stmt 0 view .LVU4143
 11398 0000 10B5     		push	{r4, lr}
 11399              		.cfi_def_cfa_offset 8
 11400              		.cfi_offset 4, -8
 11401              		.cfi_offset 14, -4
4636:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11402              		.loc 1 4636 19 view .LVU4144
 11403 0002 0023     		movs	r3, #0
4630:source\fatfs/ff.c **** 	putbuff pb;
 11404              		.loc 1 4630 1 view .LVU4145
 11405 0004 94B0     		sub	sp, sp, #80
 11406              		.cfi_def_cfa_offset 88
 11407              		.loc 1 4636 10 view .LVU4146
 11408 0006 CDE90233 		strd	r3, r3, [sp, #8]
4635:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11409              		.loc 1 4635 8 view .LVU4147
 11410 000a 0191     		str	r1, [sp, #4]
 11411              		.loc 1 4636 2 is_stmt 1 view .LVU4148
4637:source\fatfs/ff.c **** 
4638:source\fatfs/ff.c **** 	while (*str)			/* Put the string */
 11412              		.loc 1 4638 2 view .LVU4149
 11413 000c 441E     		subs	r4, r0, #1
 11414              	.LVL1243:
 11415              	.L1047:
 11416              		.loc 1 4638 8 view .LVU4150
 11417              		.loc 1 4638 9 is_stmt 0 view .LVU4151
 11418 000e 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
 11419              	.LVL1244:
 11420              		.loc 1 4638 8 view .LVU4152
 11421 0012 31B9     		cbnz	r1, .L1048
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
4640:source\fatfs/ff.c **** 
4641:source\fatfs/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 11422              		.loc 1 4641 2 is_stmt 1 view .LVU4153
 11423              		.loc 1 4641 11 is_stmt 0 view .LVU4154
 11424 0014 029A     		ldr	r2, [sp, #8]
 11425              		.loc 1 4641 5 view .LVU4155
 11426 0016 002A     		cmp	r2, #0
 11427 0018 07DA     		bge	.L1049
 11428              	.L1051:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4643:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4644:source\fatfs/ff.c **** 	return EOF;
 11429              		.loc 1 4644 9 view .LVU4156
 11430 001a 4FF0FF30 		mov	r0, #-1
 11431              	.L1046:
4645:source\fatfs/ff.c **** }
 11432              		.loc 1 4645 1 view .LVU4157
 11433 001e 14B0     		add	sp, sp, #80
 11434              		.cfi_remember_state
 11435              		.cfi_def_cfa_offset 8
 11436              		@ sp needed
 11437 0020 10BD     		pop	{r4, pc}
 11438              	.LVL1245:
 11439              	.L1048:
 11440              		.cfi_restore_state
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
 11441              		.loc 1 4639 3 is_stmt 1 view .LVU4158
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
 11442              		.loc 1 4639 3 is_stmt 0 view .LVU4159
 11443 0022 01A8     		add	r0, sp, #4
 11444 0024 FFF7FEFF 		bl	putc_bfd
 11445              	.LVL1246:
 11446 0028 F1E7     		b	.L1047
 11447              	.LVL1247:
 11448              	.L1049:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11449              		.loc 1 4642 6 view .LVU4160
 11450 002a 0198     		ldr	r0, [sp, #4]
 11451 002c 6B46     		mov	r3, sp
 11452 002e 04A9     		add	r1, sp, #16
 11453 0030 FFF7FEFF 		bl	f_write
 11454              	.LVL1248:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11455              		.loc 1 4642 3 view .LVU4161
 11456 0034 0028     		cmp	r0, #0
 11457 0036 F0D1     		bne	.L1051
4643:source\fatfs/ff.c **** 	return EOF;
 11458              		.loc 1 4643 3 view .LVU4162
 11459 0038 029A     		ldr	r2, [sp, #8]
 11460 003a 009B     		ldr	r3, [sp]
 11461 003c 9A42     		cmp	r2, r3
 11462 003e ECD1     		bne	.L1051
4643:source\fatfs/ff.c **** 	return EOF;
 11463              		.loc 1 4643 26 is_stmt 1 discriminator 1 view .LVU4163
4643:source\fatfs/ff.c **** 	return EOF;
 11464              		.loc 1 4643 35 is_stmt 0 discriminator 1 view .LVU4164
 11465 0040 0398     		ldr	r0, [sp, #12]
 11466 0042 ECE7     		b	.L1046
 11467              		.cfi_endproc
 11468              	.LFE191:
 11470              		.section	.text.f_printf,"ax",%progbits
 11471              		.align	1
 11472              		.global	f_printf
 11473              		.syntax unified
 11474              		.thumb
 11475              		.thumb_func
 11477              	f_printf:
 11478              	.LVL1249:
 11479              	.LFB192:
4646:source\fatfs/ff.c **** 
4647:source\fatfs/ff.c **** 
4648:source\fatfs/ff.c **** 
4649:source\fatfs/ff.c **** 
4650:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4651:source\fatfs/ff.c **** /* Put a formatted string to the file                                    */
4652:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4653:source\fatfs/ff.c **** 
4654:source\fatfs/ff.c **** int f_printf (
4655:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
4656:source\fatfs/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
4657:source\fatfs/ff.c **** 	...					/* Optional arguments... */
4658:source\fatfs/ff.c **** )
4659:source\fatfs/ff.c **** {
 11480              		.loc 1 4659 1 is_stmt 1 view -0
 11481              		.cfi_startproc
 11482              		@ args = 4, pretend = 12, frame = 112
 11483              		@ frame_needed = 0, uses_anonymous_args = 1
4660:source\fatfs/ff.c **** 	va_list arp;
 11484              		.loc 1 4660 2 view .LVU4166
4661:source\fatfs/ff.c **** 	BYTE f, r;
 11485              		.loc 1 4661 2 view .LVU4167
4662:source\fatfs/ff.c **** 	UINT nw, i, j, w;
 11486              		.loc 1 4662 2 view .LVU4168
4663:source\fatfs/ff.c **** 	DWORD v;
 11487              		.loc 1 4663 2 view .LVU4169
4664:source\fatfs/ff.c **** 	TCHAR c, d, s[16], *p;
 11488              		.loc 1 4664 2 view .LVU4170
4665:source\fatfs/ff.c **** 	putbuff pb;
 11489              		.loc 1 4665 2 view .LVU4171
4666:source\fatfs/ff.c **** 
4667:source\fatfs/ff.c **** 
4668:source\fatfs/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 11490              		.loc 1 4668 2 view .LVU4172
4659:source\fatfs/ff.c **** 	va_list arp;
 11491              		.loc 1 4659 1 is_stmt 0 view .LVU4173
 11492 0000 0EB4     		push	{r1, r2, r3}
 11493              		.cfi_def_cfa_offset 12
 11494              		.cfi_offset 1, -12
 11495              		.cfi_offset 2, -8
 11496              		.cfi_offset 3, -4
 11497 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 11498              		.cfi_def_cfa_offset 48
 11499              		.cfi_offset 4, -48
 11500              		.cfi_offset 5, -44
 11501              		.cfi_offset 6, -40
 11502              		.cfi_offset 7, -36
 11503              		.cfi_offset 8, -32
 11504              		.cfi_offset 9, -28
 11505              		.cfi_offset 10, -24
 11506              		.cfi_offset 11, -20
 11507              		.cfi_offset 14, -16
 11508 0006 9CB0     		sub	sp, sp, #112
 11509              		.cfi_def_cfa_offset 160
4659:source\fatfs/ff.c **** 	va_list arp;
 11510              		.loc 1 4659 1 view .LVU4174
 11511 0008 25AA     		add	r2, sp, #148
4669:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11512              		.loc 1 4669 19 view .LVU4175
 11513 000a 0021     		movs	r1, #0
 11514              		.loc 1 4669 10 view .LVU4176
 11515 000c CDE90A11 		strd	r1, r1, [sp, #40]
4659:source\fatfs/ff.c **** 	va_list arp;
 11516              		.loc 1 4659 1 view .LVU4177
 11517 0010 52F8043B 		ldr	r3, [r2], #4
4668:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11518              		.loc 1 4668 8 view .LVU4178
 11519 0014 0990     		str	r0, [sp, #36]
 11520              		.loc 1 4669 2 is_stmt 1 view .LVU4179
4670:source\fatfs/ff.c **** 
4671:source\fatfs/ff.c **** 	va_start(arp, fmt);
 11521              		.loc 1 4671 2 view .LVU4180
 11522 0016 0392     		str	r2, [sp, #12]
4672:source\fatfs/ff.c **** 
4673:source\fatfs/ff.c **** 	for (;;) {
4674:source\fatfs/ff.c **** 		c = *fmt++;
4675:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
4676:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
4677:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
4678:source\fatfs/ff.c **** 			continue;
4679:source\fatfs/ff.c **** 		}
4680:source\fatfs/ff.c **** 		w = f = 0;
4681:source\fatfs/ff.c **** 		c = *fmt++;
4682:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
4683:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
4684:source\fatfs/ff.c **** 		} else {
4685:source\fatfs/ff.c **** 			if (c == '-') {			/* Flag: left justified */
4686:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
4687:source\fatfs/ff.c **** 			}
4688:source\fatfs/ff.c **** 		}
4689:source\fatfs/ff.c **** 		while (IsDigit(c)) {		/* Precision */
4690:source\fatfs/ff.c **** 			w = w * 10 + c - '0';
 11523              		.loc 1 4690 10 is_stmt 0 view .LVU4181
 11524 0018 4FF00A08 		mov	r8, #10
 11525              	.LVL1250:
 11526              	.L1053:
4673:source\fatfs/ff.c **** 		c = *fmt++;
 11527              		.loc 1 4673 2 is_stmt 1 view .LVU4182
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11528              		.loc 1 4674 3 view .LVU4183
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11529              		.loc 1 4674 5 is_stmt 0 view .LVU4184
 11530 001c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 11531              	.LVL1251:
4675:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
 11532              		.loc 1 4675 3 is_stmt 1 view .LVU4185
4675:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
 11533              		.loc 1 4675 6 is_stmt 0 view .LVU4186
 11534 001e 0029     		cmp	r1, #0
 11535 0020 00F0FA80 		beq	.L1054
4676:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
 11536              		.loc 1 4676 3 is_stmt 1 view .LVU4187
4676:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
 11537              		.loc 1 4676 6 is_stmt 0 view .LVU4188
 11538 0024 2529     		cmp	r1, #37
 11539 0026 04D0     		beq	.L1055
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11540              		.loc 1 4674 11 view .LVU4189
 11541 0028 5D1C     		adds	r5, r3, #1
 11542              	.LVL1252:
4677:source\fatfs/ff.c **** 			continue;
 11543              		.loc 1 4677 4 is_stmt 1 view .LVU4190
 11544              	.L1064:
4691:source\fatfs/ff.c **** 			c = *fmt++;
4692:source\fatfs/ff.c **** 		}
4693:source\fatfs/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
4694:source\fatfs/ff.c **** 			f |= 4; c = *fmt++;
4695:source\fatfs/ff.c **** 		}
4696:source\fatfs/ff.c **** 		if (!c) break;
4697:source\fatfs/ff.c **** 		d = c;
4698:source\fatfs/ff.c **** 		if (IsLower(d)) d -= 0x20;
4699:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
4700:source\fatfs/ff.c **** 		case 'S' :					/* String */
4701:source\fatfs/ff.c **** 			p = va_arg(arp, TCHAR*);
4702:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
4703:source\fatfs/ff.c **** 			if (!(f & 2)) {
4704:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
4705:source\fatfs/ff.c **** 			}
4706:source\fatfs/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
4707:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
4708:source\fatfs/ff.c **** 			continue;
4709:source\fatfs/ff.c **** 		case 'C' :					/* Character */
4710:source\fatfs/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
4711:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
4712:source\fatfs/ff.c **** 			r = 2; break;
4713:source\fatfs/ff.c **** 		case 'O' :					/* Octal */
4714:source\fatfs/ff.c **** 			r = 8; break;
4715:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
4716:source\fatfs/ff.c **** 		case 'U' :					/* Unsigned decimal */
4717:source\fatfs/ff.c **** 			r = 10; break;
4718:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
4719:source\fatfs/ff.c **** 			r = 16; break;
4720:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
4721:source\fatfs/ff.c **** 			putc_bfd(&pb, c); continue;
 11545              		.loc 1 4721 4 view .LVU4191
 11546 002a 09A8     		add	r0, sp, #36
 11547 002c FFF7FEFF 		bl	putc_bfd
 11548              	.LVL1253:
 11549              		.loc 1 4721 22 view .LVU4192
 11550              		.loc 1 4721 4 is_stmt 0 view .LVU4193
 11551 0030 D7E0     		b	.L1056
 11552              	.LVL1254:
 11553              	.L1055:
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11554              		.loc 1 4680 3 is_stmt 1 view .LVU4194
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11555              		.loc 1 4681 3 view .LVU4195
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11556              		.loc 1 4681 5 is_stmt 0 view .LVU4196
 11557 0032 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 11558              	.LVL1255:
4682:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
 11559              		.loc 1 4682 3 is_stmt 1 view .LVU4197
4682:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
 11560              		.loc 1 4682 6 is_stmt 0 view .LVU4198
 11561 0034 3029     		cmp	r1, #48
 11562 0036 04D1     		bne	.L1057
4683:source\fatfs/ff.c **** 		} else {
 11563              		.loc 1 4683 4 is_stmt 1 view .LVU4199
 11564              	.LVL1256:
4683:source\fatfs/ff.c **** 		} else {
 11565              		.loc 1 4683 11 view .LVU4200
4683:source\fatfs/ff.c **** 		} else {
 11566              		.loc 1 4683 13 is_stmt 0 view .LVU4201
 11567 0038 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 11568              	.LVL1257:
4683:source\fatfs/ff.c **** 		} else {
 11569              		.loc 1 4683 19 view .LVU4202
 11570 003a DD1C     		adds	r5, r3, #3
 11571              	.LVL1258:
4683:source\fatfs/ff.c **** 		} else {
 11572              		.loc 1 4683 6 view .LVU4203
 11573 003c 0123     		movs	r3, #1
 11574              	.LVL1259:
 11575              	.L1058:
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11576              		.loc 1 4680 9 view .LVU4204
 11577 003e 0027     		movs	r7, #0
 11578 0040 0AE0     		b	.L1060
 11579              	.LVL1260:
 11580              	.L1057:
4685:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
 11581              		.loc 1 4685 4 is_stmt 1 view .LVU4205
4685:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
 11582              		.loc 1 4685 7 is_stmt 0 view .LVU4206
 11583 0042 2D29     		cmp	r1, #45
 11584 0044 2DD1     		bne	.L1059
4686:source\fatfs/ff.c **** 			}
 11585              		.loc 1 4686 5 is_stmt 1 view .LVU4207
 11586              	.LVL1261:
4686:source\fatfs/ff.c **** 			}
 11587              		.loc 1 4686 12 view .LVU4208
4686:source\fatfs/ff.c **** 			}
 11588              		.loc 1 4686 14 is_stmt 0 view .LVU4209
 11589 0046 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 11590              	.LVL1262:
4686:source\fatfs/ff.c **** 			}
 11591              		.loc 1 4686 20 view .LVU4210
 11592 0048 DD1C     		adds	r5, r3, #3
 11593              	.LVL1263:
4686:source\fatfs/ff.c **** 			}
 11594              		.loc 1 4686 7 view .LVU4211
 11595 004a 0223     		movs	r3, #2
 11596 004c F7E7     		b	.L1058
 11597              	.LVL1264:
 11598              	.L1061:
4690:source\fatfs/ff.c **** 			c = *fmt++;
 11599              		.loc 1 4690 4 is_stmt 1 view .LVU4212
4690:source\fatfs/ff.c **** 			c = *fmt++;
 11600              		.loc 1 4690 15 is_stmt 0 view .LVU4213
 11601 004e 08FB0717 		mla	r7, r8, r7, r1
 11602              	.LVL1265:
4691:source\fatfs/ff.c **** 		}
 11603              		.loc 1 4691 6 view .LVU4214
 11604 0052 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 11605              	.LVL1266:
4690:source\fatfs/ff.c **** 			c = *fmt++;
 11606              		.loc 1 4690 6 view .LVU4215
 11607 0056 303F     		subs	r7, r7, #48
 11608              	.LVL1267:
4691:source\fatfs/ff.c **** 		}
 11609              		.loc 1 4691 4 is_stmt 1 view .LVU4216
 11610              	.L1060:
4689:source\fatfs/ff.c **** 			w = w * 10 + c - '0';
 11611              		.loc 1 4689 9 view .LVU4217
 11612 0058 A1F13002 		sub	r2, r1, #48
 11613 005c 092A     		cmp	r2, #9
 11614 005e F6D9     		bls	.L1061
4693:source\fatfs/ff.c **** 			f |= 4; c = *fmt++;
 11615              		.loc 1 4693 3 discriminator 1 view .LVU4218
4693:source\fatfs/ff.c **** 			f |= 4; c = *fmt++;
 11616              		.loc 1 4693 16 is_stmt 0 discriminator 1 view .LVU4219
 11617 0060 01F0DF02 		and	r2, r1, #223
 11618 0064 4C2A     		cmp	r2, #76
4694:source\fatfs/ff.c **** 		}
 11619              		.loc 1 4694 4 is_stmt 1 discriminator 1 view .LVU4220
4694:source\fatfs/ff.c **** 		}
 11620              		.loc 1 4694 14 is_stmt 0 discriminator 1 view .LVU4221
 11621 0066 04BF     		itt	eq
 11622 0068 15F8011B 		ldrbeq	r1, [r5], #1	@ zero_extendqisi2
 11623              	.LVL1268:
4694:source\fatfs/ff.c **** 		}
 11624              		.loc 1 4694 6 discriminator 1 view .LVU4222
 11625 006c 43F00403 		orreq	r3, r3, #4
 11626              	.LVL1269:
4694:source\fatfs/ff.c **** 		}
 11627              		.loc 1 4694 12 is_stmt 1 discriminator 1 view .LVU4223
4696:source\fatfs/ff.c **** 		d = c;
 11628              		.loc 1 4696 3 discriminator 1 view .LVU4224
4696:source\fatfs/ff.c **** 		d = c;
 11629              		.loc 1 4696 6 is_stmt 0 discriminator 1 view .LVU4225
 11630 0070 0029     		cmp	r1, #0
 11631 0072 00F0D180 		beq	.L1054
4697:source\fatfs/ff.c **** 		if (IsLower(d)) d -= 0x20;
 11632              		.loc 1 4697 3 is_stmt 1 view .LVU4226
 11633              	.LVL1270:
4698:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11634              		.loc 1 4698 3 view .LVU4227
4698:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11635              		.loc 1 4698 6 is_stmt 0 view .LVU4228
 11636 0076 A1F16102 		sub	r2, r1, #97
 11637 007a 192A     		cmp	r2, #25
4698:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11638              		.loc 1 4698 19 is_stmt 1 view .LVU4229
4698:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11639              		.loc 1 4698 21 is_stmt 0 view .LVU4230
 11640 007c 9ABF     		itte	ls
 11641 007e A1F12002 		subls	r2, r1, #32
 11642 0082 D2B2     		uxtbls	r2, r2
 11643              	.LVL1271:
4698:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11644              		.loc 1 4698 21 view .LVU4231
 11645 0084 0A46     		movhi	r2, r1
 11646              	.LVL1272:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11647              		.loc 1 4699 3 is_stmt 1 view .LVU4232
 11648 0086 582A     		cmp	r2, #88
 11649 0088 CFD8     		bhi	.L1064
 11650 008a 4E2A     		cmp	r2, #78
 11651 008c 0CD8     		bhi	.L1065
 11652 008e 432A     		cmp	r2, #67
 11653 0090 00F0AF80 		beq	.L1066
 11654 0094 442A     		cmp	r2, #68
 11655 0096 00F0B380 		beq	.L1101
 11656 009a 422A     		cmp	r2, #66
 11657 009c C5D1     		bne	.L1064
4712:source\fatfs/ff.c **** 		case 'O' :					/* Octal */
 11658              		.loc 1 4712 6 is_stmt 0 view .LVU4233
 11659 009e 0224     		movs	r4, #2
 11660 00a0 1FE0     		b	.L1067
 11661              	.LVL1273:
 11662              	.L1059:
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11663              		.loc 1 4681 11 view .LVU4234
 11664 00a2 9D1C     		adds	r5, r3, #2
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11665              		.loc 1 4680 9 view .LVU4235
 11666 00a4 0023     		movs	r3, #0
 11667              	.LVL1274:
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11668              		.loc 1 4680 9 view .LVU4236
 11669 00a6 CAE7     		b	.L1058
 11670              	.LVL1275:
 11671              	.L1065:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11672              		.loc 1 4699 3 view .LVU4237
 11673 00a8 A2F14F00 		sub	r0, r2, #79
 11674 00ac 0928     		cmp	r0, #9
 11675 00ae BCD8     		bhi	.L1064
 11676 00b0 01A4     		adr	r4, .L1069
 11677 00b2 54F820F0 		ldr	pc, [r4, r0, lsl #2]
 11678 00b6 00BF     		.p2align 2
 11679              	.L1069:
 11680 00b8 E1000000 		.word	.L1071+1
 11681 00bc 2B000000 		.word	.L1064+1
 11682 00c0 2B000000 		.word	.L1064+1
 11683 00c4 2B000000 		.word	.L1064+1
 11684 00c8 8F010000 		.word	.L1070+1
 11685 00cc 2B000000 		.word	.L1064+1
 11686 00d0 01020000 		.word	.L1101+1
 11687 00d4 2B000000 		.word	.L1064+1
 11688 00d8 2B000000 		.word	.L1064+1
 11689 00dc FD010000 		.word	.L1068+1
 11690              		.p2align 1
 11691              	.L1071:
4714:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
 11692              		.loc 1 4714 6 view .LVU4238
 11693 00e0 0824     		movs	r4, #8
 11694              	.L1067:
 11695              	.LVL1276:
4722:source\fatfs/ff.c **** 		}
4723:source\fatfs/ff.c **** 
4724:source\fatfs/ff.c **** 		/* Get an argument and put it in numeral */
4725:source\fatfs/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 11696              		.loc 1 4725 3 is_stmt 1 view .LVU4239
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11697              		.loc 1 4701 6 is_stmt 0 view .LVU4240
 11698 00e2 0398     		ldr	r0, [sp, #12]
 11699 00e4 061D     		adds	r6, r0, #4
 11700              		.loc 1 4725 24 view .LVU4241
 11701 00e6 0396     		str	r6, [sp, #12]
 11702              		.loc 1 4725 88 view .LVU4242
 11703 00e8 442A     		cmp	r2, #68
 11704              		.loc 1 4725 42 view .LVU4243
 11705 00ea 0068     		ldr	r0, [r0]
 11706              		.loc 1 4725 88 view .LVU4244
 11707 00ec 04D1     		bne	.L1082
 11708              	.LVL1277:
4726:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 11709              		.loc 1 4726 16 discriminator 1 view .LVU4245
 11710 00ee 0028     		cmp	r0, #0
4727:source\fatfs/ff.c **** 			v = 0 - v;
 11711              		.loc 1 4727 4 is_stmt 1 discriminator 1 view .LVU4246
 11712              		.loc 1 4727 6 is_stmt 0 discriminator 1 view .LVU4247
 11713 00f0 BCBF     		itt	lt
 11714 00f2 4042     		rsblt	r0, r0, #0
 11715              	.LVL1278:
4728:source\fatfs/ff.c **** 			f |= 8;
 11716              		.loc 1 4728 4 is_stmt 1 discriminator 1 view .LVU4248
 11717              		.loc 1 4728 6 is_stmt 0 discriminator 1 view .LVU4249
 11718 00f4 43F00803 		orrlt	r3, r3, #8
 11719              	.LVL1279:
 11720              	.L1082:
4729:source\fatfs/ff.c **** 		}
4730:source\fatfs/ff.c **** 		i = 0;
 11721              		.loc 1 4730 3 is_stmt 1 view .LVU4250
 11722              		.loc 1 4730 3 is_stmt 0 view .LVU4251
 11723 00f8 7829     		cmp	r1, #120
 11724 00fa 0DF1140C 		add	ip, sp, #20
 11725 00fe 0CBF     		ite	eq
 11726 0100 4FF0270E 		moveq	lr, #39
 11727 0104 4FF0070E 		movne	lr, #7
 11728              		.loc 1 4730 5 view .LVU4252
 11729 0108 0021     		movs	r1, #0
 11730              	.LVL1280:
 11731              		.loc 1 4730 5 view .LVU4253
 11732 010a E146     		mov	r9, ip
 11733              	.LVL1281:
 11734              	.L1086:
4731:source\fatfs/ff.c **** 		do {
 11735              		.loc 1 4731 3 is_stmt 1 view .LVU4254
4732:source\fatfs/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 11736              		.loc 1 4732 4 view .LVU4255
 11737              		.loc 1 4732 18 is_stmt 0 view .LVU4256
 11738 010c B0FBF4FB 		udiv	fp, r0, r4
 11739 0110 04FB1B06 		mls	r6, r4, fp, r0
 11740              		.loc 1 4732 6 view .LVU4257
 11741 0114 F2B2     		uxtb	r2, r6
 11742              	.LVL1282:
 11743              		.loc 1 4732 24 is_stmt 1 view .LVU4258
4733:source\fatfs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11744              		.loc 1 4733 7 is_stmt 0 view .LVU4259
 11745 0116 092E     		cmp	r6, #9
 11746              		.loc 1 4733 17 view .LVU4260
 11747 0118 88BF     		it	hi
 11748 011a 7244     		addhi	r2, r2, lr
 11749              	.LVL1283:
 11750              		.loc 1 4733 17 view .LVU4261
 11751 011c 8246     		mov	r10, r0
 11752 011e 88BF     		it	hi
 11753 0120 D2B2     		uxtbhi	r2, r2
4734:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11754              		.loc 1 4734 15 view .LVU4262
 11755 0122 3032     		adds	r2, r2, #48
4735:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11756              		.loc 1 4735 3 view .LVU4263
 11757 0124 5445     		cmp	r4, r10
4734:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11758              		.loc 1 4734 11 view .LVU4264
 11759 0126 0CF8012B 		strb	r2, [ip], #1
4732:source\fatfs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11760              		.loc 1 4732 26 view .LVU4265
 11761 012a 5846     		mov	r0, fp
 11762              	.LVL1284:
4733:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11763              		.loc 1 4733 4 is_stmt 1 view .LVU4266
4733:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11764              		.loc 1 4733 15 view .LVU4267
4734:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11765              		.loc 1 4734 4 view .LVU4268
4734:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11766              		.loc 1 4734 7 is_stmt 0 view .LVU4269
 11767 012c 01F10106 		add	r6, r1, #1
 11768              	.LVL1285:
 11769              		.loc 1 4735 11 is_stmt 1 view .LVU4270
 11770              		.loc 1 4735 3 is_stmt 0 view .LVU4271
 11771 0130 02D8     		bhi	.L1085
 11772              		.loc 1 4735 14 discriminator 1 view .LVU4272
 11773 0132 102E     		cmp	r6, #16
 11774 0134 66D1     		bne	.L1103
 11775 0136 0F21     		movs	r1, #15
 11776              	.L1085:
4736:source\fatfs/ff.c **** 		if (f & 8) s[i++] = '-';
 11777              		.loc 1 4736 3 is_stmt 1 view .LVU4273
 11778              		.loc 1 4736 6 is_stmt 0 view .LVU4274
 11779 0138 1A07     		lsls	r2, r3, #28
 11780 013a 07D5     		bpl	.L1087
 11781              		.loc 1 4736 14 is_stmt 1 discriminator 1 view .LVU4275
 11782              	.LVL1286:
 11783              		.loc 1 4736 21 is_stmt 0 discriminator 1 view .LVU4276
 11784 013c 06F17002 		add	r2, r6, #112
 11785 0140 0DEB0206 		add	r6, sp, r2
 11786 0144 2D22     		movs	r2, #45
 11787 0146 06F85C2C 		strb	r2, [r6, #-92]
 11788              		.loc 1 4736 17 discriminator 1 view .LVU4277
 11789 014a 8E1C     		adds	r6, r1, #2
 11790              	.LVL1287:
 11791              	.L1087:
4737:source\fatfs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11792              		.loc 1 4737 3 is_stmt 1 view .LVU4278
 11793              		.loc 1 4737 10 view .LVU4279
 11794              		.loc 1 4737 12 is_stmt 0 view .LVU4280
 11795 014c 13F0010F 		tst	r3, #1
 11796 0150 14BF     		ite	ne
 11797 0152 4FF0300A 		movne	r10, #48
 11798 0156 4FF0200A 		moveq	r10, #32
 11799              	.LVL1288:
4738:source\fatfs/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 11800              		.loc 1 4738 3 is_stmt 1 view .LVU4281
4737:source\fatfs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11801              		.loc 1 4737 5 is_stmt 0 view .LVU4282
 11802 015a B346     		mov	fp, r6
 11803              		.loc 1 4738 9 view .LVU4283
 11804 015c 03F00204 		and	r4, r3, #2
 11805              	.LVL1289:
 11806              	.L1089:
 11807              		.loc 1 4738 9 is_stmt 1 discriminator 1 view .LVU4284
 11808              		.loc 1 4738 23 is_stmt 0 discriminator 1 view .LVU4285
 11809 0160 0BF10103 		add	r3, fp, #1
 11810              		.loc 1 4738 9 discriminator 1 view .LVU4286
 11811 0164 14B9     		cbnz	r4, .L1092
 11812              	.LVL1290:
 11813              		.loc 1 4738 19 discriminator 2 view .LVU4287
 11814 0166 BB45     		cmp	fp, r7
 11815 0168 4ED3     		bcc	.L1091
 11816              		.loc 1 4738 23 view .LVU4288
 11817 016a 9B46     		mov	fp, r3
 11818              	.LVL1291:
 11819              	.L1092:
4739:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 11820              		.loc 1 4739 3 is_stmt 1 discriminator 1 view .LVU4289
 11821              		.loc 1 4739 6 discriminator 1 view .LVU4290
 11822 016c 013E     		subs	r6, r6, #1
 11823              	.LVL1292:
 11824              		.loc 1 4739 6 is_stmt 0 discriminator 1 view .LVU4291
 11825 016e 09A8     		add	r0, sp, #36
 11826 0170 19F80610 		ldrb	r1, [r9, r6]	@ zero_extendqisi2
 11827 0174 FFF7FEFF 		bl	putc_bfd
 11828              	.LVL1293:
 11829              		.loc 1 4739 35 is_stmt 1 discriminator 1 view .LVU4292
 11830              		.loc 1 4739 3 is_stmt 0 discriminator 1 view .LVU4293
 11831 0178 002E     		cmp	r6, #0
 11832 017a F7D1     		bne	.L1092
 11833              	.L1093:
 11834              	.LVL1294:
4740:source\fatfs/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 11835              		.loc 1 4740 9 is_stmt 1 discriminator 1 view .LVU4294
 11836              		.loc 1 4740 9 is_stmt 0 discriminator 1 view .LVU4295
 11837 017c 5F45     		cmp	r7, fp
 11838 017e 30D9     		bls	.L1056
 11839              		.loc 1 4740 19 is_stmt 1 discriminator 2 view .LVU4296
 11840 0180 5146     		mov	r1, r10
 11841 0182 09A8     		add	r0, sp, #36
 11842 0184 FFF7FEFF 		bl	putc_bfd
 11843              	.LVL1295:
 11844 0188 0BF1010B 		add	fp, fp, #1
 11845              	.LVL1296:
 11846              		.loc 1 4740 19 is_stmt 0 discriminator 2 view .LVU4297
 11847 018c F6E7     		b	.L1093
 11848              	.LVL1297:
 11849              	.L1070:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11850              		.loc 1 4701 4 is_stmt 1 view .LVU4298
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11851              		.loc 1 4701 6 is_stmt 0 view .LVU4299
 11852 018e 039A     		ldr	r2, [sp, #12]
 11853              	.LVL1298:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11854              		.loc 1 4701 6 view .LVU4300
 11855 0190 111D     		adds	r1, r2, #4
 11856              	.LVL1299:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11857              		.loc 1 4701 6 view .LVU4301
 11858 0192 1668     		ldr	r6, [r2]
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11859              		.loc 1 4702 4 is_stmt 1 view .LVU4302
 11860              	.LVL1300:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11861              		.loc 1 4701 6 is_stmt 0 view .LVU4303
 11862 0194 0391     		str	r1, [sp, #12]
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11863              		.loc 1 4702 11 view .LVU4304
 11864 0196 4FF00009 		mov	r9, #0
 11865              	.LVL1301:
 11866              	.L1072:
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11867              		.loc 1 4702 16 is_stmt 1 discriminator 1 view .LVU4305
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11868              		.loc 1 4702 17 is_stmt 0 discriminator 1 view .LVU4306
 11869 019a 16F80920 		ldrb	r2, [r6, r9]	@ zero_extendqisi2
 11870 019e 4C46     		mov	r4, r9
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11871              		.loc 1 4702 23 discriminator 1 view .LVU4307
 11872 01a0 09F10109 		add	r9, r9, #1
 11873              	.LVL1302:
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11874              		.loc 1 4702 4 discriminator 1 view .LVU4308
 11875 01a4 002A     		cmp	r2, #0
 11876 01a6 F8D1     		bne	.L1072
4703:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11877              		.loc 1 4703 4 is_stmt 1 view .LVU4309
4703:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11878              		.loc 1 4703 7 is_stmt 0 view .LVU4310
 11879 01a8 9907     		lsls	r1, r3, #30
 11880 01aa 0FD4     		bmi	.L1074
 11881 01ac A246     		mov	r10, r4
 11882 01ae 05E0     		b	.L1073
 11883              	.LVL1303:
 11884              	.L1075:
4704:source\fatfs/ff.c **** 			}
 11885              		.loc 1 4704 21 is_stmt 1 discriminator 2 view .LVU4311
 11886 01b0 2021     		movs	r1, #32
 11887 01b2 09A8     		add	r0, sp, #36
 11888 01b4 FFF7FEFF 		bl	putc_bfd
 11889              	.LVL1304:
 11890 01b8 0AF1010A 		add	r10, r10, #1
 11891              	.LVL1305:
 11892              	.L1073:
4704:source\fatfs/ff.c **** 			}
 11893              		.loc 1 4704 11 discriminator 1 view .LVU4312
4704:source\fatfs/ff.c **** 			}
 11894              		.loc 1 4704 11 is_stmt 0 discriminator 1 view .LVU4313
 11895 01bc 5745     		cmp	r7, r10
 11896 01be F7D8     		bhi	.L1075
 11897 01c0 3B1B     		subs	r3, r7, r4
 11898 01c2 BC42     		cmp	r4, r7
 11899 01c4 88BF     		it	hi
 11900 01c6 0023     		movhi	r3, #0
4704:source\fatfs/ff.c **** 			}
 11901              		.loc 1 4704 13 view .LVU4314
 11902 01c8 03EB0904 		add	r4, r3, r9
 11903              	.LVL1306:
 11904              	.L1074:
4704:source\fatfs/ff.c **** 			}
 11905              		.loc 1 4704 13 view .LVU4315
 11906 01cc 013E     		subs	r6, r6, #1
 11907 01ce 02E0     		b	.L1076
 11908              	.LVL1307:
 11909              	.L1077:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11910              		.loc 1 4706 15 is_stmt 1 discriminator 2 view .LVU4316
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11911              		.loc 1 4706 15 is_stmt 0 discriminator 2 view .LVU4317
 11912 01d0 09A8     		add	r0, sp, #36
 11913 01d2 FFF7FEFF 		bl	putc_bfd
 11914              	.LVL1308:
 11915              	.L1076:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11916              		.loc 1 4706 10 is_stmt 1 discriminator 1 view .LVU4318
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11917              		.loc 1 4706 11 is_stmt 0 discriminator 1 view .LVU4319
 11918 01d6 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
 11919              	.LVL1309:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11920              		.loc 1 4706 10 discriminator 1 view .LVU4320
 11921 01da 0029     		cmp	r1, #0
 11922 01dc F8D1     		bne	.L1077
 11923              	.L1078:
 11924              	.LVL1310:
4707:source\fatfs/ff.c **** 			continue;
 11925              		.loc 1 4707 10 is_stmt 1 discriminator 1 view .LVU4321
4707:source\fatfs/ff.c **** 			continue;
 11926              		.loc 1 4707 10 is_stmt 0 discriminator 1 view .LVU4322
 11927 01de A742     		cmp	r7, r4
 11928 01e0 01D8     		bhi	.L1079
 11929              	.LVL1311:
 11930              	.L1056:
4659:source\fatfs/ff.c **** 	va_list arp;
 11931              		.loc 1 4659 1 view .LVU4323
 11932 01e2 2B46     		mov	r3, r5
 11933 01e4 1AE7     		b	.L1053
 11934              	.LVL1312:
 11935              	.L1079:
4707:source\fatfs/ff.c **** 			continue;
 11936              		.loc 1 4707 20 is_stmt 1 discriminator 2 view .LVU4324
 11937 01e6 2021     		movs	r1, #32
 11938 01e8 09A8     		add	r0, sp, #36
 11939 01ea FFF7FEFF 		bl	putc_bfd
 11940              	.LVL1313:
 11941 01ee 0134     		adds	r4, r4, #1
 11942              	.LVL1314:
4707:source\fatfs/ff.c **** 			continue;
 11943              		.loc 1 4707 20 is_stmt 0 discriminator 2 view .LVU4325
 11944 01f0 F5E7     		b	.L1078
 11945              	.LVL1315:
 11946              	.L1066:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11947              		.loc 1 4710 4 is_stmt 1 view .LVU4326
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11948              		.loc 1 4710 25 is_stmt 0 view .LVU4327
 11949 01f2 039B     		ldr	r3, [sp, #12]
 11950              	.LVL1316:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11951              		.loc 1 4710 25 view .LVU4328
 11952 01f4 1A1D     		adds	r2, r3, #4
 11953              	.LVL1317:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11954              		.loc 1 4710 4 view .LVU4329
 11955 01f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 11956              	.LVL1318:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11957              		.loc 1 4710 25 view .LVU4330
 11958 01f8 0392     		str	r2, [sp, #12]
 11959 01fa 16E7     		b	.L1064
 11960              	.LVL1319:
 11961              	.L1068:
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 11962              		.loc 1 4719 4 is_stmt 1 view .LVU4331
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 11963              		.loc 1 4719 12 view .LVU4332
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 11964              		.loc 1 4719 6 is_stmt 0 view .LVU4333
 11965 01fc 1024     		movs	r4, #16
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 11966              		.loc 1 4719 4 view .LVU4334
 11967 01fe 70E7     		b	.L1067
 11968              	.LVL1320:
 11969              	.L1101:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11970              		.loc 1 4699 3 view .LVU4335
 11971 0200 0A24     		movs	r4, #10
 11972 0202 6EE7     		b	.L1067
 11973              	.LVL1321:
 11974              	.L1103:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11975              		.loc 1 4699 3 view .LVU4336
 11976 0204 3146     		mov	r1, r6
 11977 0206 81E7     		b	.L1086
 11978              	.LVL1322:
 11979              	.L1091:
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 11980              		.loc 1 4738 31 discriminator 3 view .LVU4337
 11981 0208 5146     		mov	r1, r10
 11982 020a 09A8     		add	r0, sp, #36
 11983 020c 0193     		str	r3, [sp, #4]
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 11984              		.loc 1 4738 31 is_stmt 1 discriminator 3 view .LVU4338
 11985 020e FFF7FEFF 		bl	putc_bfd
 11986              	.LVL1323:
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 11987              		.loc 1 4738 23 is_stmt 0 discriminator 3 view .LVU4339
 11988 0212 019B     		ldr	r3, [sp, #4]
 11989 0214 9B46     		mov	fp, r3
 11990 0216 A3E7     		b	.L1089
 11991              	.LVL1324:
 11992              	.L1054:
4741:source\fatfs/ff.c **** 	}
4742:source\fatfs/ff.c **** 
4743:source\fatfs/ff.c **** 	va_end(arp);
 11993              		.loc 1 4743 2 is_stmt 1 view .LVU4340
4744:source\fatfs/ff.c **** 
4745:source\fatfs/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 11994              		.loc 1 4745 2 view .LVU4341
 11995              		.loc 1 4745 11 is_stmt 0 view .LVU4342
 11996 0218 0A9A     		ldr	r2, [sp, #40]
 11997              		.loc 1 4745 5 view .LVU4343
 11998 021a 002A     		cmp	r2, #0
 11999 021c 06DA     		bge	.L1095
 12000              	.LVL1325:
 12001              	.L1097:
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4747:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4748:source\fatfs/ff.c **** 	return EOF;
 12002              		.loc 1 4748 9 view .LVU4344
 12003 021e 4FF0FF30 		mov	r0, #-1
 12004              	.L1052:
4749:source\fatfs/ff.c **** }
 12005              		.loc 1 4749 1 view .LVU4345
 12006 0222 1CB0     		add	sp, sp, #112
 12007              		.cfi_remember_state
 12008              		.cfi_def_cfa_offset 48
 12009              		@ sp needed
 12010 0224 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12011              		.cfi_restore 14
 12012              		.cfi_restore 11
 12013              		.cfi_restore 10
 12014              		.cfi_restore 9
 12015              		.cfi_restore 8
 12016              		.cfi_restore 7
 12017              		.cfi_restore 6
 12018              		.cfi_restore 5
 12019              		.cfi_restore 4
 12020              		.cfi_def_cfa_offset 12
 12021 0228 03B0     		add	sp, sp, #12
 12022              		.cfi_restore 3
 12023              		.cfi_restore 2
 12024              		.cfi_restore 1
 12025              		.cfi_def_cfa_offset 0
 12026 022a 7047     		bx	lr
 12027              	.LVL1326:
 12028              	.L1095:
 12029              		.cfi_restore_state
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12030              		.loc 1 4746 6 view .LVU4346
 12031 022c 0998     		ldr	r0, [sp, #36]
 12032 022e 04AB     		add	r3, sp, #16
 12033 0230 0CA9     		add	r1, sp, #48
 12034 0232 FFF7FEFF 		bl	f_write
 12035              	.LVL1327:
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12036              		.loc 1 4746 3 view .LVU4347
 12037 0236 0028     		cmp	r0, #0
 12038 0238 F1D1     		bne	.L1097
4747:source\fatfs/ff.c **** 	return EOF;
 12039              		.loc 1 4747 3 view .LVU4348
 12040 023a 0A9A     		ldr	r2, [sp, #40]
 12041 023c 049B     		ldr	r3, [sp, #16]
 12042 023e 9A42     		cmp	r2, r3
 12043 0240 EDD1     		bne	.L1097
4747:source\fatfs/ff.c **** 	return EOF;
 12044              		.loc 1 4747 26 is_stmt 1 discriminator 1 view .LVU4349
4747:source\fatfs/ff.c **** 	return EOF;
 12045              		.loc 1 4747 35 is_stmt 0 discriminator 1 view .LVU4350
 12046 0242 0B98     		ldr	r0, [sp, #44]
 12047 0244 EDE7     		b	.L1052
 12048              		.cfi_endproc
 12049              	.LFE192:
 12051 0246 00BF     		.section	.bss.FatFs,"aw",%nobits
 12052              		.align	2
 12053              		.set	.LANCHOR1,. + 0
 12056              	FatFs:
 12057 0000 00000000 		.space	12
 12057      00000000 
 12057      00000000 
 12058              		.section	.bss.Files,"aw",%nobits
 12059              		.align	2
 12060              		.set	.LANCHOR0,. + 0
 12063              	Files:
 12064 0000 00000000 		.space	24
 12064      00000000 
 12064      00000000 
 12064      00000000 
 12064      00000000 
 12065              		.section	.bss.Fsid,"aw",%nobits
 12066              		.align	1
 12067              		.set	.LANCHOR2,. + 0
 12070              	Fsid:
 12071 0000 0000     		.space	2
 12072              		.section	.rodata.LfnOfs,"a"
 12073              		.set	.LANCHOR3,. + 0
 12076              	LfnOfs:
 12077 0000 01030507 		.ascii	"\001\003\005\007\011\016\020\022\024\026\030\034\036"
 12077      090E1012 
 12077      1416181C 
 12077      1E
 12078              		.section	.rodata.cst.0,"a"
 12079              		.align	1
 12080              		.set	.LANCHOR5,. + 0
 12083              	cst.0:
 12084 0000 0080     		.short	-32768
 12085 0002 0040     		.short	16384
 12086 0004 0020     		.short	8192
 12087 0006 0010     		.short	4096
 12088 0008 0008     		.short	2048
 12089 000a 0040     		.short	16384
 12090 000c 0020     		.short	8192
 12091 000e 0010     		.short	4096
 12092 0010 0008     		.short	2048
 12093 0012 0004     		.short	1024
 12094 0014 0002     		.short	512
 12095              		.section	.rodata.vst.1,"a"
 12096              		.align	1
 12097              		.set	.LANCHOR4,. + 0
 12100              	vst.1:
 12101 0000 0004     		.short	1024
 12102 0002 0002     		.short	512
 12103 0004 0001     		.short	256
 12104 0006 8000     		.short	128
 12105 0008 4000     		.short	64
 12106 000a 2000     		.short	32
 12107 000c 1000     		.short	16
 12108 000e 0800     		.short	8
 12109 0010 0400     		.short	4
 12110 0012 0200     		.short	2
 12111 0014 0000     		.short	0
 12112              		.text
 12113              	.Letext0:
 12114              		.file 2 "source\\fatfs\\integer.h"
 12115              		.file 3 "source\\fatfs\\ff.h"
 12116              		.file 4 "source\\fatfs\\diskio.h"
 12117              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 12118              		.file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:20     .text.mem_cpy:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:25     .text.mem_cpy:00000000 mem_cpy
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:62     .text.mem_set:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:67     .text.mem_set:00000000 mem_set
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:98     .text.chk_lock:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:103    .text.chk_lock:00000000 chk_lock
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:236    .text.chk_lock:0000007c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:241    .text.inc_lock:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:246    .text.inc_lock:00000000 inc_lock
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:410    .text.inc_lock:00000094 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:415    .text.dec_lock:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:420    .text.dec_lock:00000000 dec_lock
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:501    .text.dec_lock:0000003c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:506    .text.clear_lock:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:511    .text.clear_lock:00000000 clear_lock
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:553    .text.clear_lock:00000018 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:558    .text.clmt_clust:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:563    .text.clmt_clust:00000000 clmt_clust
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:627    .text.sum_sfn:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:632    .text.sum_sfn:00000000 sum_sfn
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:676    .text.get_ldnumber:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:681    .text.get_ldnumber:00000000 get_ldnumber
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:771    .text.validate:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:776    .text.validate:00000000 validate
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:823    .text.get_fileinfo:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:828    .text.get_fileinfo:00000000 get_fileinfo
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1057   .text.sync_window.part.0:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1062   .text.sync_window.part.0:00000000 sync_window.part.0
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1157   .text.sync_window:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1162   .text.sync_window:00000000 sync_window
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1191   .text.move_window:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1196   .text.move_window:00000000 move_window
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1273   .text.check_fs:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1278   .text.check_fs:00000000 check_fs
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1355   .text.check_fs:0000004c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1360   .text.find_volume:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1365   .text.find_volume:00000000 find_volume
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1883   .text.find_volume:0000022c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1890   .text.sync_fs:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:1895   .text.sync_fs:00000000 sync_fs
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2015   .text.sync_fs:00000080 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2020   .text.ld_clust.isra.0:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2025   .text.ld_clust.isra.0:00000000 ld_clust.isra.0
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2056   .text.clust2sect:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2062   .text.clust2sect:00000000 clust2sect
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2098   .text.get_fat:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2104   .text.get_fat:00000000 get_fat
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2307   .text.dir_sdi:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2312   .text.dir_sdi:00000000 dir_sdi
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2482   .text.put_fat:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2488   .text.put_fat:00000000 put_fat
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2726   .text.create_chain:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2731   .text.create_chain:00000000 create_chain
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2933   .text.dir_next:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:2938   .text.dir_next:00000000 dir_next
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:3205   .text.dir_find:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:3210   .text.dir_find:00000000 dir_find
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:3555   .text.dir_find:00000140 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:3568   .text.follow_path:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:3573   .text.follow_path:00000000 follow_path
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4295   .text.follow_path:0000029c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4303   .text.dir_register:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4308   .text.dir_register:00000000 dir_register
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4975   .text.dir_register:00000284 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4981   .text.dir_remove:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:4986   .text.dir_remove:00000000 dir_remove
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5089   .text.dir_read.constprop.0:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5094   .text.dir_read.constprop.0:00000000 dir_read.constprop.0
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5387   .text.dir_read.constprop.0:00000104 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5392   .text.remove_chain:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5397   .text.remove_chain:00000000 remove_chain
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5526   .text.f_mount:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5532   .text.f_mount:00000000 f_mount
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5636   .text.f_mount:00000054 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5641   .text.f_open:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:5647   .text.f_open:00000000 f_open
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6097   .text.f_open:000001bc $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6102   .text.f_read:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6108   .text.f_read:00000000 f_read
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6463   .text.f_write:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6469   .text.f_write:00000000 f_write
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6874   .text.putc_bfd:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6879   .text.putc_bfd:00000000 putc_bfd
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6969   .text.f_sync:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:6975   .text.f_sync:00000000 f_sync
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7161   .text.f_close:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7167   .text.f_close:00000000 f_close
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7221   .text.f_lseek:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7227   .text.f_lseek:00000000 f_lseek
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7800   .text.f_opendir:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7806   .text.f_opendir:00000000 f_opendir
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:7998   .text.f_closedir:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8004   .text.f_closedir:00000000 f_closedir
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8062   .text.f_readdir:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8068   .text.f_readdir:00000000 f_readdir
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8223   .text.f_stat:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8229   .text.f_stat:00000000 f_stat
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8338   .text.f_getfree:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8344   .text.f_getfree:00000000 f_getfree
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8592   .text.f_truncate:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8598   .text.f_truncate:00000000 f_truncate
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8782   .text.f_unlink:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:8788   .text.f_unlink:00000000 f_unlink
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9014   .text.f_mkdir:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9020   .text.f_mkdir:00000000 f_mkdir
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9503   .text.f_chmod:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9509   .text.f_chmod:00000000 f_chmod
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9645   .text.f_rename:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9651   .text.f_rename:00000000 f_rename
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9958   .text.f_utime:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:9964   .text.f_utime:00000000 f_utime
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:10105  .text.f_mkfs:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:10111  .text.f_mkfs:00000000 f_mkfs
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:10498  .text.f_mkfs:0000017c $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:10504  .text.f_mkfs:00000188 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11196  .text.f_mkfs:00000550 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11204  .text.f_gets:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11210  .text.f_gets:00000000 f_gets
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11303  .text.f_putc:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11309  .text.f_putc:00000000 f_putc
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11381  .text.f_puts:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11387  .text.f_puts:00000000 f_puts
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11471  .text.f_printf:00000000 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11477  .text.f_printf:00000000 f_printf
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11680  .text.f_printf:000000b8 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:11690  .text.f_printf:000000e0 $t
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12052  .bss.FatFs:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12056  .bss.FatFs:00000000 FatFs
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12059  .bss.Files:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12063  .bss.Files:00000000 Files
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12066  .bss.Fsid:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12070  .bss.Fsid:00000000 Fsid
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12076  .rodata.LfnOfs:00000000 LfnOfs
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12079  .rodata.cst.0:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12083  .rodata.cst.0:00000000 cst.0
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12096  .rodata.vst.1:00000000 $d
C:\Users\dinot\AppData\Local\Temp\cchA6Hs7.s:12100  .rodata.vst.1:00000000 vst.1

UNDEFINED SYMBOLS
disk_status
ff_convert
disk_write
disk_read
disk_initialize
disk_ioctl
ff_wtoupper
ff_memalloc
get_fattime
ff_memfree
